<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>甜点成本</title>
    <link href="/2022/12/04/%E7%94%9C%E7%82%B9%E6%88%90%E6%9C%AC/"/>
    <url>/2022/12/04/%E7%94%9C%E7%82%B9%E6%88%90%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="甜点成本"><a class="markdownIt-Anchor" href="#甜点成本"></a> 甜点成本</h2><p><a href="https://leetcode.cn/problems/closest-dessert-cost/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>你打算做甜点，现在需要购买配料。目前共有 n 种冰激凌基料和 m 种配料可供选购。而制作甜点需要遵循以下几条规则：</p><p>必须选择 一种 冰激凌基料。<br />可以添加 一种或多种 配料，也可以不添加任何配料。<br />每种类型的配料 最多两份 。<br />给你以下三个输入：</p><p>baseCosts ，一个长度为 n 的整数数组，其中每个 baseCosts[i] 表示第 i 种冰激凌基料的价格。<br />toppingCosts，一个长度为 m 的整数数组，其中每个 toppingCosts[i] 表示 一份 第 i 种冰激凌配料的价格。<br />target ，一个整数，表示你制作甜点的目标价格。<br />你希望自己做的甜点总成本尽可能接近目标价格 target 。</p><p>返回最接近 target 的甜点成本。如果有多种方案，返回 成本相对较低 的一种。</p><p>示例</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：baseCosts = [2,3], toppingCosts = [4,5,100], target = 18<br>输出：17<br>解释：考虑下面的方案组合（所有下标均从<span class="hljs-number"> 0 </span>开始）：<br>- 选择<span class="hljs-number"> 1 </span>号基料：成本 3<br>- 选择<span class="hljs-number"> 1 </span>份<span class="hljs-number"> 0 </span>号配料：成本<span class="hljs-number"> 1 </span>x<span class="hljs-number"> 4 </span>= 4<br>- 选择<span class="hljs-number"> 2 </span>份<span class="hljs-number"> 1 </span>号配料：成本<span class="hljs-number"> 2 </span>x<span class="hljs-number"> 5 </span>= 10<br>- 选择<span class="hljs-number"> 0 </span>份<span class="hljs-number"> 2 </span>号配料：成本<span class="hljs-number"> 0 </span>x<span class="hljs-number"> 100 </span>= 0<br>总成本：3 +<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 10 </span>+<span class="hljs-number"> 0 </span>=<span class="hljs-number"> 17 </span>。不存在总成本为<span class="hljs-number"> 18 </span>的甜点制作方案。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这是一道背包问题的变种，可以把所有的方案分成两大类，总成本大于target的和总成本小于target的，我们要做的就是用一个变量res记录大于target的最小成本，然后对小于target的方案进行动态规划。</p><p>首先维护一个数组<code>can[]</code>,表示每个小于target的方案是否合法（即可以通过base或者配料组合得到的数值），先遍历basecosts，如果有x小于target的，则<code>can[x]=true</code>，大于target则更新res。然后开始动态规划，每个配料遍历两次，如果加上当前配料后成本大于target，则更新res，如果当前成本不合法，那么有可能减去当前配料后就合法了，所以据此更新当前的<code>can</code></p><p>最后，只需要考虑在<code>res-target</code>的距离内，小于target的方案有没有合法的，因为如果大于这个距离，那么最接近target的方案就是res了。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>public:<br>    <span class="hljs-built_in">int</span> closest<span class="hljs-constructor">Cost(<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt;&amp; <span class="hljs-params">baseCosts</span>, <span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt;&amp; <span class="hljs-params">toppingCosts</span>, <span class="hljs-params">int</span> <span class="hljs-params">target</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> b=*min<span class="hljs-constructor">_element(<span class="hljs-params">baseCosts</span>.<span class="hljs-params">begin</span>()</span>,baseCosts.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>);<br>        <span class="hljs-keyword">if</span>(b&gt;=target)<br>            return b;<br>        vector&lt;<span class="hljs-built_in">bool</span>&gt; can(target+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>);<br>        <span class="hljs-built_in">int</span> res=<span class="hljs-number">2</span>*target-b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> &amp;t:baseCosts)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t&lt;=target)<br>                can<span class="hljs-literal">[<span class="hljs-identifier">t</span>]</span>=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span><br>                res=min(res,t);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span>&amp; t:toppingCosts)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=target;j&gt;=<span class="hljs-number">0</span>;--j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(can<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>&amp;&amp;j+t&gt;target)<br>                        res=min(res,j+t);<br>                    <span class="hljs-keyword">if</span>(j-t&gt;=<span class="hljs-number">0</span>)<br>                        can<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>=can<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span><span class="hljs-pattern-match">|can[j-t];</span><br><span class="hljs-pattern-match">                &#125;</span><br><span class="hljs-pattern-match">            &#125;</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=0;i&lt;=res-target;<span class="hljs-operator">++</span>i)</span><br><span class="hljs-pattern-match">        &#123;</span><br><span class="hljs-pattern-match">            <span class="hljs-keyword">if</span>(can[target-i])</span><br><span class="hljs-pattern-match">                return target-i;</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">        return res;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>移动球的最小次数</title>
    <link href="/2022/12/02/%E7%A7%BB%E5%8A%A8%E7%90%83%E7%9A%84%E6%9C%80%E5%B0%8F%E6%AC%A1%E6%95%B0/"/>
    <url>/2022/12/02/%E7%A7%BB%E5%8A%A8%E7%90%83%E7%9A%84%E6%9C%80%E5%B0%8F%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%A7%BB%E5%8A%A8%E6%89%80%E6%9C%89%E7%90%83%E5%88%B0%E6%AF%8F%E4%B8%AA%E7%9B%92%E5%AD%90%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%95%B0">移动所有球到每个盒子所需的最小操作数</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="移动所有球到每个盒子所需的最小操作数"><a class="markdownIt-Anchor" href="#移动所有球到每个盒子所需的最小操作数"></a> 移动所有球到每个盒子所需的最小操作数</h2><p><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>有 n 个盒子。给你一个长度为 n 的二进制字符串 boxes ，其中 boxes[i] 的值为 ‘0’ 表示第 i 个盒子是 空 的，而 boxes[i] 的值为 ‘1’ 表示盒子里有 一个 小球。</p><p>在一步操作中，你可以将 一个 小球从某个盒子移动到一个与之相邻的盒子中。第 i 个盒子和第 j 个盒子相邻需满足 abs(i - j) == 1 。注意，操作执行后，某些盒子中可能会存在不止一个小球。</p><p>返回一个长度为 n 的数组 answer ，其中 answer[i] 是将所有小球移动到第 i 个盒子所需的 最小 操作数。</p><p>每个 answer[i] 都需要根据盒子的 初始状态 进行计算。</p><p>示例</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：boxes = &quot;110&quot;<br>输出：[1,1,3]<br>解释：每个盒子对应的最小操作数如下：<br>1) 第<span class="hljs-number"> 1 </span>个盒子：将一个小球从第<span class="hljs-number"> 2 </span>个盒子移动到第<span class="hljs-number"> 1 </span>个盒子，需要<span class="hljs-number"> 1 </span>步操作。<br>2) 第<span class="hljs-number"> 2 </span>个盒子：将一个小球从第<span class="hljs-number"> 1 </span>个盒子移动到第<span class="hljs-number"> 2 </span>个盒子，需要<span class="hljs-number"> 1 </span>步操作。<br>3) 第<span class="hljs-number"> 3 </span>个盒子：将一个小球从第<span class="hljs-number"> 1 </span>个盒子移动到第<span class="hljs-number"> 3 </span>个盒子，需要<span class="hljs-number"> 2 </span>步操作。将一个小球从第<span class="hljs-number"> 2 </span>个盒子移动到第<span class="hljs-number"> 3 </span>个盒子，需要<span class="hljs-number"> 1 </span>步操作。共计<span class="hljs-number"> 3 </span>步操作。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题因为样例少，所以暴力也能过，这里用前缀和与后缀和进行优化。</p><p><code>pre[i]</code>表示把i位置之前所有的1移到i位置所需要的次数，状态方程<code>pre[i]=pre[i-1]+presum</code>,可以看做先把前面的所有球移动到i-1位置，需要<code>pre[i-1]</code>次，然后i-1位置一共有presum个小球，把他们依次移动到i位置即可</p><p>后缀同理，那么每个位置所需的移动次数就是<code>pre[i]+aft[i]</code></p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">minOperations</span><span class="hljs-params">(string boxes)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = boxes.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">aft</span><span class="hljs-params">(n)</span></span>;<br><br>        <span class="hljs-type">int</span> prsum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<br>                pre[i] = pre[i - <span class="hljs-number">1</span>] + prsum;<br>            <span class="hljs-keyword">if</span>(boxes[i] == <span class="hljs-string">&#x27;1&#x27;</span>) <br>                ++prsum;<br>        &#125;<br><br>        <span class="hljs-type">int</span> afsum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&lt;n<span class="hljs-number">-1</span>)<br>                aft[i] = aft[i + <span class="hljs-number">1</span>] + afsum;<br>            <span class="hljs-keyword">if</span>(boxes[i] == <span class="hljs-string">&#x27;1&#x27;</span>) <br>                ++afsum;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n ; i++)<br>            res[i] = pre[i] + aft[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大频率栈</title>
    <link href="/2022/11/30/%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/"/>
    <url>/2022/11/30/%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="最大频率栈"><a class="markdownIt-Anchor" href="#最大频率栈"></a> 最大频率栈</h2><p><a href="https://leetcode.cn/problems/maximum-frequency-stack/description/">题目</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>设计一个类似堆栈的数据结构，将元素推入堆栈，并从堆栈中弹出出现频率最高的元素。</p><p>实现 FreqStack 类:</p><p>FreqStack() 构造一个空的堆栈。<br />void push(int val) 将一个整数 val 压入栈顶。<br />int pop() 删除并返回堆栈中出现频率最高的元素。<br />如果出现频率最高的元素不只一个，则移除并返回最接近栈顶的元素。</p><p>示例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade">输入：<br>[<span class="hljs-string">&quot;FreqStack&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;pop&quot;</span>,<span class="hljs-string">&quot;pop&quot;</span>,<span class="hljs-string">&quot;pop&quot;</span>,<span class="hljs-string">&quot;pop&quot;</span>],<br>[[],[<span class="hljs-number">5</span>],[<span class="hljs-number">7</span>],[<span class="hljs-number">5</span>],[<span class="hljs-number">7</span>],[<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>],[],[],[],[]]<br>输出：[<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>]<br>解释：<br>FreqStack = <span class="hljs-keyword">new</span> FreqStack();<br>freqStack.<span class="hljs-built_in">push</span> (<span class="hljs-number">5</span>);<span class="hljs-comment">//堆栈为 [5]</span><br>freqStack.<span class="hljs-built_in">push</span> (<span class="hljs-number">7</span>);<span class="hljs-comment">//堆栈是 [5,7]</span><br>freqStack.<span class="hljs-built_in">push</span> (<span class="hljs-number">5</span>);<span class="hljs-comment">//堆栈是 [5,7,5]</span><br>freqStack.<span class="hljs-built_in">push</span> (<span class="hljs-number">7</span>);<span class="hljs-comment">//堆栈是 [5,7,5,7]</span><br>freqStack.<span class="hljs-built_in">push</span> (<span class="hljs-number">4</span>);<span class="hljs-comment">//堆栈是 [5,7,5,7,4]</span><br>freqStack.<span class="hljs-built_in">push</span> (<span class="hljs-number">5</span>);<span class="hljs-comment">//堆栈是 [5,7,5,7,4,5]</span><br>freqStack.<span class="hljs-built_in">pop</span> ();<span class="hljs-comment">//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,5,7,4]。</span><br>freqStack.<span class="hljs-built_in">pop</span> ();<span class="hljs-comment">//返回 7 ，因为 5 和 7 出现频率最高，但7最接近顶部。堆栈变成 [5,7,5,4]。</span><br>freqStack.<span class="hljs-built_in">pop</span> ();<span class="hljs-comment">//返回 5 ，因为 5 出现频率最高。堆栈变成 [5,7,4]。</span><br>freqStack.<span class="hljs-built_in">pop</span> ();<span class="hljs-comment">//返回 4 ，因为 4, 5 和 7 出现频率最高，但 4 是最接近顶部的。堆栈变成 [5,7]。</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>用一个map记录数字和对应频率，然后每一个频率对应一个栈，每当加入一个元素，就把这个元素加入到对应频率的栈中，取出时从最大频率对应的栈弹出元素即可。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FreqStack</span> &#123;<br><span class="hljs-keyword">public</span>: <br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br>    unordered_map&lt;<span class="hljs-type">int</span>,stack&lt;<span class="hljs-type">int</span>&gt;&gt; st;<br>    <span class="hljs-type">int</span> maxfreq;<br>    <span class="hljs-built_in">FreqStack</span>() &#123;<br>        maxfreq=<span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        ++mp[val];<br>        st[mp[val]].<span class="hljs-built_in">push</span>(val);<br>        maxfreq=<span class="hljs-built_in">max</span>(maxfreq,mp[val]);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> res=st[maxfreq].<span class="hljs-built_in">top</span>();<br>        st[maxfreq].<span class="hljs-built_in">pop</span>();<br>        --mp[res];<br>        <span class="hljs-keyword">if</span>(st[maxfreq].<span class="hljs-built_in">empty</span>())<br>            --maxfreq;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大平均值和的分组</title>
    <link href="/2022/11/28/%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E7%9A%84%E5%88%86%E7%BB%84/"/>
    <url>/2022/11/28/%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E7%9A%84%E5%88%86%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E7%9A%84%E5%88%86%E7%BB%84">最大平均值和的分组</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="最大平均值和的分组"><a class="markdownIt-Anchor" href="#最大平均值和的分组"></a> 最大平均值和的分组</h2><p><a href="https://leetcode.cn/problems/largest-sum-of-averages/description/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定数组 nums 和一个整数 k 。我们将给定的数组 nums 分成 最多 k 个相邻的非空子数组 。 分数 由每个子数组内的平均值的总和构成。</p><p>注意我们必须使用 nums 数组中的每一个数进行分组，并且分数不一定需要是整数。</p><p>返回我们所能得到的最大 分数 是多少。答案误差在 10-6 内被视为是正确的。</p><p>示例</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: nums = [<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>], k = <span class="hljs-number">3</span><br>输出: <span class="hljs-number">20.00000</span><br>解释: <br>nums 的最优分组是[<span class="hljs-number">9</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">9</span>]. 得到的分数是 <span class="hljs-number">9</span> + (<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span> + <span class="hljs-number">9</span> = <span class="hljs-number">20.</span> <br>我们也可以把 nums 分成[<span class="hljs-number">9</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">9</span>]. <br>这样的分组得到的分数为 <span class="hljs-number">5</span> + <span class="hljs-number">2</span> + <span class="hljs-number">6</span> = <span class="hljs-number">13</span>, 但不是最大值.<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>动态规划，用<code>dp[i][j]</code>表示前i个数分j组时的最大平均值和，然后写出状态方程:<br /><code>dp[i][j]=max(dp[i][j],dp[x][j-1]+(sum[i]-sum[x])/(i-x))</code></p><ul><li>j:<code>2~k</code></li><li>i:<code>j~n</code></li><li>x:<code>j-1~i</code></li></ul><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">largestSumOfAverages</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            sum[i+<span class="hljs-number">1</span>]=sum[i]+nums[i];<br>        &#125;<br>        vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">double</span>&gt;(k+<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>]=sum[i]/i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=k;++j)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=j;i&lt;=n;++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=j<span class="hljs-number">-1</span>;x&lt;i;++x)<br>                &#123;<br>                    dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[x][j<span class="hljs-number">-1</span>]+(sum[i]-sum[x])/(i-x));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n][k];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最长公共子串</title>
    <link href="/2022/11/27/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/"/>
    <url>/2022/11/27/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2">最长公共子串</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82">题目要求</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="最长公共子串"><a class="markdownIt-Anchor" href="#最长公共子串"></a> 最长公共子串</h2><h3 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h3><p>给定两个字符串str1和str2,输出两个字符串的最长公共子串，如果最长公共子串为空，输出-1。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>一道模板题，这里要输出最长的公共子串而不是其长度，代码如下</p><p>注意，<code>starti</code>从第一个字符串末尾开始，<code>startj</code>从第二个字符串开头开始</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include&lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>string maxsubstr(string s1,string s2)<br>&#123;<br>int <span class="hljs-attribute">l1</span>=s1.size();<br>int <span class="hljs-attribute">l2</span>=s2.size();<br>int <span class="hljs-attribute">maxlen</span>=0,curlen=0;<br>int <span class="hljs-attribute">starti</span>=l1-1,startj=0;<br>int <span class="hljs-attribute">endi</span>=-1;<br><span class="hljs-keyword">while</span>(startj&lt;l2)<br>&#123;<br><span class="hljs-attribute">curlen</span>=0;<br><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=starti,j=startj;i&lt;l1&amp;&amp;j&lt;l2;++i,++j)<br>&#123;<br><span class="hljs-keyword">if</span>(s1[i]==s2[j])<br>&#123;<br>++curlen;<br><span class="hljs-keyword">if</span>(curlen&gt;maxlen)<br>&#123;<br><span class="hljs-attribute">maxlen</span>=curlen;<br><span class="hljs-attribute">endi</span>=i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-attribute">curlen</span>=0;<br>&#125;<br><span class="hljs-keyword">if</span>(starti&gt;0)<br>--starti;<br><span class="hljs-keyword">else</span><br>++startj;<br>&#125;<br>return <span class="hljs-attribute">maxlen</span>==0 ? <span class="hljs-string">&quot;-1&quot;</span>:s1.substr(endi-maxlen+1,maxlen);<br>&#125;<br><br>int main()<br>&#123;<br>string s1,s2;<br>cin&gt;&gt;s1&gt;&gt;s2;<br>cout&lt;&lt;maxsubstr(s1,s2)&lt;&lt;endl;<br>return 0;<br><br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>细分图的可到达节点</title>
    <link href="/2022/11/26/%E7%BB%86%E5%88%86%E5%9B%BE%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/"/>
    <url>/2022/11/26/%E7%BB%86%E5%88%86%E5%9B%BE%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%BB%86%E5%88%86%E5%9B%BE%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9">细分图的可到达节点</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="细分图的可到达节点"><a class="markdownIt-Anchor" href="#细分图的可到达节点"></a> 细分图的可到达节点</h2><p><a href="https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给你一个无向图（原始图），图中有 n 个节点，编号从 0 到 n - 1 。你决定将图中的每条边 细分 为一条节点链，每条边之间的新节点数各不相同。</p><p>图用由边组成的二维数组 edges 表示，其中 edges[i] = [ui, vi, cnti] 表示原始图中节点 ui 和 vi 之间存在一条边，cnti 是将边 细分 后的新节点总数。注意，cnti == 0 表示边不可细分。</p><p>要 细分 边 [ui, vi] ，需要将其替换为 (cnti + 1) 条新边，和 cnti 个新节点。新节点为 x1, x2, …, xcnti ，新边为 [ui, x1], [x1, x2], [x2, x3], …, [xcnti+1, xcnti], [xcnti, vi] 。</p><p>现在得到一个 新的细分图 ，请你计算从节点 0 出发，可以到达多少个节点？如果节点间距离是 maxMoves 或更少，则视为 可以到达 。</p><p>给你原始图和 maxMoves ，返回 新的细分图中从节点 0 出发 可到达的节点数 。</p><p>示例</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：edges = <span class="hljs-comment">[<span class="hljs-comment">[0,1,4]</span>,<span class="hljs-comment">[1,2,6]</span>,<span class="hljs-comment">[0,2,8]</span>,<span class="hljs-comment">[1,3,1]</span>]</span>, maxMoves = 10, n = 4<br>输出：23<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题看了一遍题没太看懂，本来想直接cv了😢，看了眼题解发现是最短路，就参考大佬灵茶山的题解写了，顺便复习一下堆优化的dijkstra和链式前向星存图</p><p><a href="https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/solutions/1991509/tu-jie-zhuan-huan-cheng-dan-yuan-zui-dua-6l8o/">链接</a></p><ul><li>首先需要进行一边dijkstra，求出0到其他点的最短路</li><li>遍历所有顶点，小于maxmoves则<code>++ans</code></li><li>遍历所有边，设一条边的起点和终点为u和v，分别用maxmoves减去<code>dis[u]</code>和<code>dis[v]</code>得到a和b,这条边上符合要求的点个数即为<code>min(a+b,cnt)</code>,加入到ans中即可</li></ul><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">int</span> dis[<span class="hljs-number">3005</span>];<br>    <span class="hljs-built_in">bool</span> vis[<span class="hljs-number">3005</span>];<br>    static <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">int</span> head[N];<br>    <span class="hljs-built_in">int</span> cnt;<br>    struct edges<br>    &#123;<br>        <span class="hljs-built_in">int</span> to,next,w;<br>    &#125;e[<span class="hljs-number">2</span>*N];<br><br>    struct node<br>    &#123;<br>        <span class="hljs-built_in">int</span> n,w;<br>        node(<span class="hljs-built_in">int</span> nn,<span class="hljs-built_in">int</span> ww):n(nn),w(ww)&#123;&#125;<br>        <span class="hljs-built_in">bool</span> operator &lt; (<span class="hljs-keyword">const</span> node &amp; t) <span class="hljs-keyword">const</span>&#123;<br>            <span class="hljs-keyword">return</span> w&gt;t.w;<br>        &#125;<br>    &#125;;<br>    priority_queue&lt;node&gt; q;<br>    <span class="hljs-built_in">void</span> add(<span class="hljs-built_in">int</span> u,<span class="hljs-built_in">int</span> v,<span class="hljs-built_in">int</span> w)<br>    &#123;<br>        ++cnt;<br>        e[cnt].to=v;<br>        e[cnt].w=w;<br>        e[cnt].next=head[u];<br>        head[u]=cnt;<br>    &#125;<br>    <span class="hljs-built_in">int</span> reachableNodes(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; edges, <span class="hljs-built_in">int</span> maxMoves, <span class="hljs-built_in">int</span> n) <br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">auto</span> &amp;e: edges) <br>        &#123;<br>            <span class="hljs-built_in">int</span> u = e[<span class="hljs-number">0</span>], v = e[<span class="hljs-number">1</span>], cnt = e[<span class="hljs-number">2</span>];<br>            add(u,v,cnt+<span class="hljs-number">1</span>);<br>            add(v,u,cnt+<span class="hljs-number">1</span>);<br>        &#125;<br>        memset(dis,<span class="hljs-number">0x3f</span>,sizeof(dis));<br>        <span class="hljs-built_in">int</span> u,v,w;<br>        dis[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        q.push(node(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">while</span>(!q.empty())<br>        &#123;<br>            node t=q.top();<br>            q.pop();<br>            u=t.n;<br>            <span class="hljs-keyword">if</span>(!vis[u])<br>            &#123;<br>                vis[u]=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=head[u];i;i=e[i].next)<br>                &#123;<br>                    v=e[i].to;<br>                    w=e[i].w;<br>                    <span class="hljs-keyword">if</span>(dis[u]+w&lt;dis[v])<br>                    &#123;<br>                        dis[v]=dis[u]+w;<br>                        <span class="hljs-keyword">if</span>(!vis[v])<br>                            q.push(node(v,dis[v]));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// return dis[2];</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dis[i]&lt;=maxMoves)<br>                ++ans;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">auto</span> &amp;e: edges) <br>        &#123;<br>            <span class="hljs-built_in">int</span> u = e[<span class="hljs-number">0</span>], v = e[<span class="hljs-number">1</span>], cnt = e[<span class="hljs-number">2</span>];<br>            <span class="hljs-built_in">int</span> a=max(maxMoves-dis[u],<span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">int</span> b=max(maxMoves-dis[v],<span class="hljs-number">0</span>);<br>            ans+=min(a+b,cnt);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>情感丰富的文字</title>
    <link href="/2022/11/25/%E6%83%85%E6%84%9F%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%96%87%E5%AD%97/"/>
    <url>/2022/11/25/%E6%83%85%E6%84%9F%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%96%87%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="情感丰富的文字"><a class="markdownIt-Anchor" href="#情感丰富的文字"></a> 情感丰富的文字</h2><p><a href="https://leetcode.cn/problems/expressive-words/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&gt; “heeellooo”, “hi” -&gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：“h”, “eee”, “ll”, “ooo”。</p><p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上。</p><p>例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&gt; “lllll” 以获得 “helllllooo”。如果 S = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&gt; “hellooo” -&gt; “helllllooo” = S。</p><p>输入一组查询单词，输出其中可扩张的单词数量。</p><p>示例</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">输入： <br>S = <span class="hljs-string">&quot;heeellooo&quot;</span><br>words = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-string">&quot;helo&quot;</span>]<br>输出：1<br>解释：<br>我们能通过扩张 <span class="hljs-string">&quot;hello&quot;</span> 的 <span class="hljs-string">&quot;e&quot;</span> 和 <span class="hljs-string">&quot;o&quot;</span> 来得到 <span class="hljs-string">&quot;heeellooo&quot;</span>。<br>我们不能通过扩张 <span class="hljs-string">&quot;helo&quot;</span> 来得到 <span class="hljs-string">&quot;heeellooo&quot;</span> 因为 <span class="hljs-string">&quot;ll&quot;</span> 的长度小于 3 。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>定义两个指针分别从左到右遍历字符串，统计连续字符的出现频率，分以下情况：</p><ul><li>当两个指针对应的字符不同，不匹配</li><li>当s的指针统计的字符c出现次数小于于t中该字符次数，不匹配</li><li>如果字符c在两个串中出现的次数不相等，且在s中出现次数小于3,不匹配</li></ul><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">judge</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>&amp; s,<span class="hljs-built_in">string</span>&amp; t</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> len1=s.size();<br>        <span class="hljs-built_in">int</span> len2=t.size();<br>        <span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">char</span> c;<br>        <span class="hljs-keyword">while</span>(i&lt;len1&amp;&amp;j&lt;len2)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]!=t[j])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            c=s[i];<br>            <span class="hljs-built_in">int</span> c1=<span class="hljs-number">0</span>,c2=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(i&lt;len1&amp;&amp;s[i]==c)<br>            &#123;<br>                ++i;<br>                ++c1;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(j&lt;len2&amp;&amp;t[j]==c)<br>            &#123;<br>                ++j;<br>                ++c2;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(c1&lt;c2)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c1&gt;c2&amp;&amp;c1&lt;<span class="hljs-number">3</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i==len1&amp;&amp;j==len2;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">expressiveWords</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s, vector&lt;<span class="hljs-built_in">string</span>&gt;&amp; words</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">string</span>&amp; ss:words)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(judge(s,ss))<br>                ++ans;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>到达首都的最小油耗</title>
    <link href="/2022/11/21/%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B2%B9%E8%80%97/"/>
    <url>/2022/11/21/%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B2%B9%E8%80%97/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B2%B9%E8%80%97">到达首都的最小油耗</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="到达首都的最小油耗"><a class="markdownIt-Anchor" href="#到达首都的最小油耗"></a> 到达首都的最小油耗</h2><p><a href="https://leetcode.cn/problems/minimum-fuel-cost-to-report-to-the-capital/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给你一棵 n 个节点的树（一个无向、连通、无环图），每个节点表示一个城市，编号从 0 到 n - 1 ，且恰好有 n - 1 条路。0 是首都。给你一个二维整数数组 roads ，其中 roads[i] = [ai, bi] ，表示城市 ai 和 bi 之间有一条 双向路 。</p><p>每个城市里有一个代表，他们都要去首都参加一个会议。</p><p>每座城市里有一辆车。给你一个整数 seats 表示每辆车里面座位的数目。</p><p>城市里的代表可以选择乘坐所在城市的车，或者乘坐其他城市的车。相邻城市之间一辆车的油耗是一升汽油。</p><p>请你返回到达首都最少需要多少升汽油。</p><p>示例</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2<br>输出：7<br>解释：<br>- 代表<span class="hljs-number"> 2 </span>到达城市<span class="hljs-number"> 3 </span>，消耗<span class="hljs-number"> 1 </span>升汽油。<br>- 代表<span class="hljs-number"> 2 </span>和代表<span class="hljs-number"> 3 </span>一起到达城市<span class="hljs-number"> 1 </span>，消耗<span class="hljs-number"> 1 </span>升汽油。<br>- 代表<span class="hljs-number"> 2 </span>和代表<span class="hljs-number"> 3 </span>一起到达首都，消耗<span class="hljs-number"> 1 </span>升汽油。<br>- 代表<span class="hljs-number"> 1 </span>直接到达首都，消耗<span class="hljs-number"> 1 </span>升汽油。<br>- 代表<span class="hljs-number"> 5 </span>直接到达首都，消耗<span class="hljs-number"> 1 </span>升汽油。<br>- 代表<span class="hljs-number"> 6 </span>到达城市<span class="hljs-number"> 4 </span>，消耗<span class="hljs-number"> 1 </span>升汽油。<br>- 代表<span class="hljs-number"> 4 </span>和代表<span class="hljs-number"> 6 </span>一起到达首都，消耗<span class="hljs-number"> 1 </span>升汽油。<br>最少消耗<span class="hljs-number"> 7 </span>升汽油。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题实际上是在算车的数量，以0为根节点，用dfs来计算所有树对0的贡献值</p><p>例如，某个子树如下图:</p><p><img src="https://pic.leetcode.cn/1668950622-FRRlaR-4.png" alt="fig1" /></p><p>最下面两个节点的贡献各自为1,然后第二层的节点有3个人，而座位数为2，那么贡献值就是2（3/2向上取整）,所以该子树的总贡献是1+1+2=4</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">minimumFuelCost</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; roads, <span class="hljs-type">int</span> seats)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=roads.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">g</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; t:roads)<br>        &#123;<br>            g[t[<span class="hljs-number">0</span>]].<span class="hljs-built_in">push_back</span>(t[<span class="hljs-number">1</span>]);<br>            g[t[<span class="hljs-number">1</span>]].<span class="hljs-built_in">push_back</span>(t[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt; dfs=[&amp;](<span class="hljs-type">int</span> t,<span class="hljs-type">int</span> par)-&gt;<span class="hljs-type">int</span>&#123;<br>            <span class="hljs-type">int</span> num=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; c:g[t])<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c!=par)<br>                    num+=<span class="hljs-built_in">dfs</span>(c,t);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(t!=<span class="hljs-number">0</span>)<br>                ans+=(num<span class="hljs-number">-1</span>)/seats+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>香槟塔</title>
    <link href="/2022/11/20/%E9%A6%99%E6%A7%9F%E5%A1%94/"/>
    <url>/2022/11/20/%E9%A6%99%E6%A7%9F%E5%A1%94/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E9%A6%99%E6%A7%9F%E5%A1%94">香槟塔</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="香槟塔"><a class="markdownIt-Anchor" href="#香槟塔"></a> 香槟塔</h2><p><a href="https://leetcode.cn/problems/champagne-tower/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>我们把玻璃杯摆成金字塔的形状，其中 第一层 有 1 个玻璃杯， 第二层 有 2 个，依次类推到第 100 层，每个玻璃杯 (250ml) 将盛有香槟。</p><p>从顶层的第一个玻璃杯开始倾倒一些香槟，当顶层的杯子满了，任何溢出的香槟都会立刻等流量的流向左右两侧的玻璃杯。当左右两边的杯子也满了，就会等流量的流向它们左右两边的杯子，依次类推。（当最底层的玻璃杯满了，香槟会流到地板上）</p><p>示例</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: poured = <span class="hljs-number">100000009</span>, query_row = <span class="hljs-number">33</span>, query_glass = <span class="hljs-number">17</span><br>输出: <span class="hljs-number">1.00000</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>一开始以为是个数学规律题，结果没想到还是个动态规划😂</p><p><code>dp[i][j]</code>表示第i行第j个杯子的盛水量，可以得出状态方程为：</p><p><code>dp[i][j]=max(dp[i-1][j]-1,0.0)/2+max(dp[i-1][j-1]-1,0.0)/2;</code></p><p>为了防止下标越界，dp数组下标从1开始</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">champagneTower</span><span class="hljs-params">(<span class="hljs-type">int</span> poured, <span class="hljs-type">int</span> query_row, <span class="hljs-type">int</span> query_glass)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">dp</span>(<span class="hljs-number">101</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-number">101</span>));<br>        dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=poured;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=query_row+<span class="hljs-number">1</span>;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;++j)<br>            &#123;<br>                dp[i][j]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j]<span class="hljs-number">-1</span>,<span class="hljs-number">0.0</span>)/<span class="hljs-number">2</span>+<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>,<span class="hljs-number">0.0</span>)/<span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(dp[query_row+<span class="hljs-number">1</span>][query_glass+<span class="hljs-number">1</span>],<span class="hljs-number">1.0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>子序列宽度之和</title>
    <link href="/2022/11/18/%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/11/18/%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%AD%90%E5%BA%8F%E5%88%97%E5%AE%BD%E5%BA%A6%E4%B9%8B%E5%92%8C">子序列宽度之和</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="子序列宽度之和"><a class="markdownIt-Anchor" href="#子序列宽度之和"></a> 子序列宽度之和</h2><p><a href="https://leetcode.cn/problems/sum-of-subsequence-widths/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>一个序列的 宽度 定义为该序列中最大元素和最小元素的差值。</p><p>给你一个整数数组 nums ，返回 nums 的所有非空 子序列 的 宽度之和 。由于答案可能非常大，请返回对 109 + 7 取余 后的结果。</p><p>子序列 定义为从一个数组里删除一些（或者不删除）元素，但不改变剩下元素的顺序得到的数组。例如，[3,6,2,7] 就是数组 [0,3,1,6,2,2,7] 的一个子序列。</p><p>示例</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,1,3]</span><br>输出：6<br>解释：子序列为 <span class="hljs-comment">[1]</span>, <span class="hljs-comment">[2]</span>, <span class="hljs-comment">[3]</span>, <span class="hljs-comment">[2,1]</span>, <span class="hljs-comment">[2,3]</span>, <span class="hljs-comment">[1,3]</span>, <span class="hljs-comment">[2,1,3]</span> 。<br>相应的宽度是 0, 0, 0, 1, 1, 2, 2 。<br>宽度之和是 6 。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题没什么好的思路，参考了大佬的：<a href="https://leetcode.cn/problems/sum-of-subsequence-widths/solutions/1977443/tan-xin-by-heren1229-bo9s/">链接</a></p><p>我们知道，一个数组有<code>2^n-1个</code>非空子序列，枚举显然是不可行的。 换一个角度思考这个问题，事实上，对于每一个子序列，元素的顺序不影响结果，因为我们只要知道它的最大值和最小值就可以了。所以我们想知道，对每一个元素来说，有几个子序列以它为最大值，又有几个子序列以它为最小值？ 考虑以某个元素为最小值的序列个数。如果是整个序列的最小值，显然，所有包含它的子序列都以它为最小值，数目为<code>2^(n-1)</code>。那次小值呢？就是包含它，但不包含最小值的序列个数，就是2<sup>(n-2)，这样，我们就看出规律来了：如果某个数是数组中第k小的元素，那么以它为最小值的子序列就有2</sup>(n-k)个。其实也很好理解，我们从选与不选的角度考虑子序列个数，当确定以第k小的元素为最小值时，前面k-1个都不能选，第k个必须选，剩下可选可不选的还有n-k个，子序列自然就是<code>2^(n-k)</code>个了。 同理，以第k大元素为最大值的子序列也有<code>2^(n-k)</code>个。 接下来考虑如何用代码计算。直接写是不可能的，因为不可能算<code>2^100000</code>，所以我们维护一个系数，从1到<code>2^(n-1)</code>，每次乘二，根据上述的描述，可以推知，以第k小元素为最大值的序列数=以第k大元素为最小值的序列数<code>2^k</code>，(k从0开始)，所以我们从小到大遍历，每次加上<code>(2^k)</code>乘以第k小值，减去<code>(2^k)</code>乘以第k大值。 排序时间复杂度O(nlogn)，计算时间复杂度O(n)</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">mod</span>=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>; <br>    <span class="hljs-built_in">int</span> sumSubseqWidths(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">int</span> n=nums.size();<br>        sort(nums.begin(),nums.end());<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> k=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            ans=(ans+nums[i]*k-nums[n<span class="hljs-number">-1</span>-i]*k)%<span class="hljs-keyword">mod</span>;<br>            k=(k*<span class="hljs-number">2</span>)%<span class="hljs-keyword">mod</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>匹配子序列的单词数</title>
    <link href="/2022/11/17/%E5%8C%B9%E9%85%8D%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/"/>
    <url>/2022/11/17/%E5%8C%B9%E9%85%8D%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%8C%B9%E9%85%8D%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0">匹配子序列的单词数</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="匹配子序列的单词数"><a class="markdownIt-Anchor" href="#匹配子序列的单词数"></a> 匹配子序列的单词数</h2><p><a href="https://leetcode.cn/problems/number-of-matching-subsequences/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定字符串 s 和字符串数组 words, 返回  words[i] 中是s的子序列的单词个数 。</p><p>字符串的 子序列 是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是none)，而不改变其余字符的相对顺序。</p><p>例如， “ace” 是 “abcde” 的子序列。</p><p>示例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">输入: s = <span class="hljs-string">&quot;dsahjpjauf&quot;</span>, <span class="hljs-built_in">words</span> = [<span class="hljs-string">&quot;ahjpjau&quot;</span>,<span class="hljs-string">&quot;ja&quot;</span>,<span class="hljs-string">&quot;ahbwzgqnuk&quot;</span>,<span class="hljs-string">&quot;tnmlanowax&quot;</span>]<br>输出: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>用<code>pair(i,j)</code>表示words中，第<code>i</code>个字符串的查询到了第<code>j</code>个字符，开始先将words中所有字符串的第一个字符放入对应queue中，然后遍历所有s中的字符，取出字符对应的queue，然后依次出队列，将对应words中的字符串的下标<code>j</code>增加1，如果<code>j</code>等于所在字符串的长度，说明该字符串符合要求。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numMatchingSubseq</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len=words.<span class="hljs-built_in">size</span>();<br>        vector&lt;queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">v</span>(<span class="hljs-number">26</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>            v[words[i][<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-built_in">push</span>(&#123;i,<span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; c:s)<br>        &#123;<br>            <span class="hljs-keyword">auto</span>&amp; q=v[c-<span class="hljs-string">&#x27;a&#x27;</span>];<br>            <span class="hljs-type">int</span> n=q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">while</span>(n--)<br>            &#123;<br>                <span class="hljs-type">int</span> i=q.<span class="hljs-built_in">front</span>().first;<br>                <span class="hljs-type">int</span> j=q.<span class="hljs-built_in">front</span>().second;<br>                q.<span class="hljs-built_in">pop</span>();<br>                ++j;<br>                <span class="hljs-keyword">if</span>(j==words[i].<span class="hljs-built_in">size</span>())<br>                    ++ans;<br>                <span class="hljs-keyword">else</span><br>                    v[words[i][j]-<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-built_in">push</span>(&#123;i,j&#125;);                <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回文串个数</title>
    <link href="/2022/11/13/%E5%9B%9E%E6%96%87%E4%B8%B2%E4%B8%AA%E6%95%B0/"/>
    <url>/2022/11/13/%E5%9B%9E%E6%96%87%E4%B8%B2%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2">回文子串</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#%E4%B8%8D%E9%87%8D%E5%8F%A0%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE">不重叠回文子字符串的最大数目</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="回文子串"><a class="markdownIt-Anchor" href="#回文子串"></a> 回文子串</h2><p><a href="https://leetcode.cn/problems/palindromic-substrings/description/">原题</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。</p><p>回文字符串 是正着读和倒过来读一样的字符串。</p><p>子字符串 是字符串中的由连续字符组成的一个序列。</p><p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p><p>示例</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;aaa&quot;</span><br>输出：<span class="hljs-number">6</span><br>解释：<span class="hljs-number">6</span>个回文子串: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>关于回文串数量问题一般用中心扩展法，即：</p><blockquote><p>枚举每一个可能的回文中心，然后用两个指针分别向左右两边拓展，当两个指针指向的元素相同的时候就拓展，否则停止拓展。</p></blockquote><p>关于回文中心的数量，有以下规律：</p><ul><li>长度为<code>n</code>的字符串可以得到<code>2*n-1</code>组回文中心<code>[l,r]</code></li><li>第<code>i</code>组回文中心的<code>l=i/2,r=i/2+i%2</code>;</li></ul><p>从所有回文中心开始扩展，可以得到所有回文子串的数量</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">int</span> countSubstrings(<span class="hljs-built_in">string</span> s) &#123;<br>        <span class="hljs-built_in">int</span> n=s.size();<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-built_in">int</span> l=i/<span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">int</span> r=l+i%<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">while</span>(l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r])<br>            &#123;<br>                --l;<br>                ++r;<br>                ++ans;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="不重叠回文子字符串的最大数目"><a class="markdownIt-Anchor" href="#不重叠回文子字符串的最大数目"></a> 不重叠回文子字符串的最大数目</h2><p><a href="https://leetcode.cn/problems/maximum-number-of-non-overlapping-palindrome-substrings/description/">原题</a></p><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p>给你一个字符串 s 和一个 正 整数 k 。</p><p>从字符串 s 中选出一组满足下述条件且 不重叠 的子字符串：</p><p>每个子字符串的长度 至少 为 k 。<br />每个子字符串是一个 回文串 。<br />返回最优方案中能选择的子字符串的 最大 数目。</p><p>子字符串 是字符串中一个连续的字符序列。</p><p>示例</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;abaccdbbd&quot;</span>, <span class="hljs-attr">k</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">2</span><br>解释：可以选择 <span class="hljs-attr">s</span> = <span class="hljs-string">&quot;abaccdbbd&quot;</span> 中斜体加粗的子字符串。<span class="hljs-string">&quot;aba&quot;</span> 和 <span class="hljs-string">&quot;dbbd&quot;</span> 都是回文，且长度至少为 <span class="hljs-attr">k</span> = <span class="hljs-number">3</span> 。<br>可以证明，无法选出两个以上的有效子字符串。<br></code></pre></td></tr></table></figure><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>主要思路是中心扩展法+dp</p><p>中心扩展法可参考上面的题，此题中用<code>dp[i]</code>表示<code>0～i-1</code>的子串中符合要求的子串个数，通过中心扩展法可得到若干回文中心，对于每一个回文中心，要更新l、r对应的dp值，即<code>dp[l+1]</code>和<code>dp[r+1]</code>。</p><ul><li>对于<code>dp[l+1]</code>，要考虑是否加入<code>l</code>位置的字符，所以<code>dp[l+1]=max(dp[l+1],dp[l])</code></li><li>对于<code>dp[r+1]</code>，因为<code>l~r</code>是个回文串，所以比较的是<code>0~l-1</code>和<code>0~r</code>这两段，<code>dp[r+1]=max(dp[r+1],dp[l]+1)</code></li></ul><p>最后<code>dp[n]</code>即最终答案</p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mel">class Solution &#123;<br>public:<br>    <span class="hljs-keyword">int</span> maxPalindromes(<span class="hljs-keyword">string</span> s, <span class="hljs-keyword">int</span> k) &#123;<br>        <span class="hljs-keyword">int</span> n=s.<span class="hljs-keyword">size</span>();<br>        <span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dp(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l=i/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> r=l+i%2;<br>            dp[l+<span class="hljs-number">1</span>]=<span class="hljs-keyword">max</span>(dp[l+<span class="hljs-number">1</span>],dp[l]);<br>            <span class="hljs-keyword">while</span>(l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r])<br>            &#123;<br>                <span class="hljs-keyword">if</span>(r-l+<span class="hljs-number">1</span>&gt;=k)<br>                &#123;<br>                    dp[r+<span class="hljs-number">1</span>]=<span class="hljs-keyword">max</span>(dp[r+<span class="hljs-number">1</span>],dp[l]+<span class="hljs-number">1</span>);<br>                &#125;<br>                --l;<br>                ++r;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>多米诺和托米诺平铺</title>
    <link href="/2022/11/12/%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA/"/>
    <url>/2022/11/12/%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA">多米诺和托米诺平铺</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="多米诺和托米诺平铺"><a class="markdownIt-Anchor" href="#多米诺和托米诺平铺"></a> 多米诺和托米诺平铺</h2><p><a href="https://leetcode.cn/problems/domino-and-tromino-tiling/description/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 “L” 的托米诺形。两种形状都可以旋转。<br /><img src="https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg" alt="" /><br />给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 109 + 7 取模 的值。</p><p>平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。</p><p>示例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: n = 3</span><br><span class="hljs-section">输出: 5</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>动态规划题目，<code>dp[i][4]</code>表示第i列在4种情况下的类数。</p><ul><li>dp[i][0]:当第i列一个瓷砖也没有，说明上一列填满了,<code>dp[i][0]=dp[i-1][3]</code></li><li>dp[i][1]:第i列只有上边有瓷砖，说明i-1列可能只有下边有，或者一个也没有，<code>dp[i][1]=dp[i-1][0]+dp[i-1][2]</code></li><li>dp[i][2]:第i列只有下边有瓷砖，说明i-1列可能只有上边有，或者一个也没有，<code>dp[i][2]=dp[i-1][0]+dp[i-1][1]</code></li><li>dp[i][3]:第i列上下都有，可能i-1列上下都有，也可能i-1列上或者下有，要加L型的，也可能i-1列上下都没有，加了两个多米诺的。<code>dp[i][3]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2]+dp[i-1][3]</code></li></ul><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><br>class <span class="hljs-symbol">Solution</span> &#123;<br>public:<br>    static const int mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>    long long dp[<span class="hljs-number">1001</span>][<span class="hljs-number">4</span>];<br>    int numTilings(int n) &#123;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">1</span>;<br>        for(int i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        &#123;<br>            dp[i][<span class="hljs-number">0</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">3</span>]<span class="hljs-comment">%mod;</span><br>            dp[i][<span class="hljs-number">1</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])<span class="hljs-comment">%mod;</span><br>            dp[i][<span class="hljs-number">2</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>])<span class="hljs-comment">%mod;</span><br>            dp[i][<span class="hljs-number">3</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">3</span>])<span class="hljs-comment">%mod;</span><br>        &#125;<br>        return dp[n][<span class="hljs-number">3</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>滑动窗口</title>
    <link href="/2022/11/11/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2022/11/11/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E9%95%BF%E5%BA%A6%E4%B8%BA-k-%E5%AD%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C">长度为 K 子数组中的最大和</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#%E5%8C%BA%E9%97%B4%E5%AD%90%E6%95%B0%E7%BB%84%E4%B8%AA%E6%95%B0">区间子数组个数</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li></ul></li></ul><!-- /TOC --><blockquote><p>滑动窗口也是很典型的一类题，这里举个简单的例子回顾一下主要思想。<s>(水篇博客😂)</s></p></blockquote><h2 id="长度为-k-子数组中的最大和"><a class="markdownIt-Anchor" href="#长度为-k-子数组中的最大和"></a> 长度为 K 子数组中的最大和</h2><p><a href="https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/description/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给你一个整数数组 nums 和一个整数 k 。请你从 nums 中满足下述条件的全部子数组中找出最大子数组和：</p><p>子数组的长度是 k，且<br />子数组中的所有元素 各不相同 。<br />返回满足题面要求的最大子数组和。如果不存在子数组满足这些条件，返回 0 。</p><p>子数组 是数组中一段连续非空的元素序列。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>设置一个<code>hashset</code>，用<code>l</code>记录滑动窗口左端下标，然后遍历数组中的所有元素，分以下三种情况：</p><ul><li>判断set中有没有该元素，有的话不断删除最左边的数直到没有该元素</li><li>窗口大小如果大于等于k，从左边删除一个元素，然后加入当前元素，更新最大和</li><li>窗口大小如果小于k，则加入当前元素，如果加入后窗口大小为k，更新最大和</li></ul><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_set&lt;<span class="hljs-built_in">int</span>&gt; st;<br>    <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> maximumSubarraySum(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums, <span class="hljs-built_in">int</span> k) &#123;<br>        <span class="hljs-built_in">int</span> len=nums.size();<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> l=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-keyword">count</span>(nums[i]))<br>            &#123;<br>                <span class="hljs-keyword">sum</span>-=nums[l];<br>                st.erase(nums[l]);<br>                ++l;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i-l&gt;=k)<br>            &#123;<br>                <span class="hljs-keyword">sum</span>-=nums[l];<br>                st.erase(nums[l]);<br>                ++l;<br>                <span class="hljs-keyword">sum</span>+=nums[i];<br>                st.insert(nums[i]);<br>                ans=max(ans,<span class="hljs-keyword">sum</span>);   <br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                st.insert(nums[i]);<br>                <span class="hljs-keyword">sum</span>+=nums[i];<br>                <span class="hljs-keyword">if</span>(i-l==k<span class="hljs-number">-1</span>)<br>                    ans=max(ans,<span class="hljs-keyword">sum</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="区间子数组个数"><a class="markdownIt-Anchor" href="#区间子数组个数"></a> 区间子数组个数</h2><p><a href="https://leetcode.cn/problems/number-of-subarrays-with-bounded-maximum/description/">题目链接</a></p><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p>给你一个整数数组 nums 和两个整数：left 及 right 。找出 nums 中连续、非空且其中最大元素在范围 [left, right] 内的子数组，并返回满足条件的子数组的个数。</p><p>生成的测试用例保证结果符合 32-bit 整数范围。</p><p>示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums = <span class="hljs-selector-attr">[2,1,4,3]</span>, <span class="hljs-attribute">left</span> = <span class="hljs-number">2</span>, right = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">3</span><br>解释：满足条件的三个子数组：<span class="hljs-selector-attr">[2]</span>, <span class="hljs-selector-attr">[2, 1]</span>, <span class="hljs-selector-attr">[3]</span><br></code></pre></td></tr></table></figure><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>用l和r记录滑动窗口的左右端，然后从左到右遍历数组，如果当前元素符合要求，<code>r=i</code>，如果当前元素大于right，<code>r=i+1</code>,然后加上每次的结果<code>r-l+1</code></p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    <span class="hljs-built_in">int</span> numSubarrayBoundedMax(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums, <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>, <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>=nums.size();<br>        <span class="hljs-built_in">int</span> l=<span class="hljs-number">0</span>,r=-<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;++i)<br>        &#123;<br>            <span class="hljs-built_in">if</span>(nums[i]&gt;=<span class="hljs-built_in">left</span>&amp;&amp;nums[i]&lt;=<span class="hljs-built_in">right</span>)<br>                r=i;<br>            else <span class="hljs-built_in">if</span>(nums[i]&gt;<span class="hljs-built_in">right</span>)<br>                l=i+<span class="hljs-number">1</span>;<br>            ans+=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,r-l+<span class="hljs-number">1</span>);<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>获取所有钥匙的最短路径</title>
    <link href="/2022/11/10/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <url>/2022/11/10/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84">获取所有钥匙的最短路径</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="获取所有钥匙的最短路径"><a class="markdownIt-Anchor" href="#获取所有钥匙的最短路径"></a> 获取所有钥匙的最短路径</h2><p><a href="https://leetcode.cn/problems/shortest-path-to-get-all-keys/description/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定一个二维网格 grid ，其中：</p><p>‘.’ 代表一个空房间<br />‘#’ 代表一堵<br />‘@’ 是起点<br />小写字母代表钥匙<br />大写字母代表锁<br />我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p><p>假设 k 为 钥匙/锁 的个数，且满足 1 &lt;= k &lt;= 6，字母表中的前 k 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p><p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。</p><p>示例：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">输入：<span class="hljs-built_in">grid</span> = [<span class="hljs-string">&quot;@.a.#&quot;</span>,<span class="hljs-string">&quot;###.#&quot;</span>,<span class="hljs-string">&quot;b.A.B&quot;</span>]<br>输出：<span class="hljs-number">8</span><br>解释：目标是获得所有钥匙，而不是打开所有锁<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>用一个三元组<code>(x,y,status)</code> 表示当前的状态，其中 <code>(x,y)</code> 表示当前所处的位置，<code>status</code> 是一个二进制数，长度恰好等于网格中钥匙的数目，<code>status</code> 的第 i 个二进制位为 1，当且仅当我们已经获得了网格中的第 i 把钥匙。</p><p>这样一来，我们就可以使用上述的状态进行广度优先搜索。初始时，我们把 <code>(srcx,srcy,0)</code>加入队列，其中 <code>srcx,srcy)</code> 为起点。在搜索的过程中，我们可以向上下左右四个方向进行扩展：</p><p>如果对应方向是空房间，那么 <code>status</code> 的值不变；</p><p>如果对应方向是第 i 把钥匙，那么将 <code>status</code> 的第 i 位置为 111；</p><p>如果对应方向是第 i 把锁，那么只有在 <code>status</code> 的第 i 位为 1 时，才可以通过。</p><p>当 <code>status</code> 每一位都为1时，说明获取了所有钥匙，此时就可以返回最短路作为答案。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int dir[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br>class <span class="hljs-symbol">Solution</span> &#123;<br>public:<br>    unordered_map&lt;char,int&gt; mp;<br>    queue&lt;tuple&lt;int,int,int&gt;&gt; q;<br>    int shortestPathAllKeys(vector&lt;string&gt;&amp; grid) &#123;<br>        int m=grid.size(),n=grid[<span class="hljs-number">0</span>].size();<br>        int srcx,srcy,dx,dy;<br>        for(int i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>        &#123;<br>            for(int j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                if(grid[i][j]==<span class="hljs-string">&#x27;@&#x27;</span>)<br>                &#123;<br>                    srcx=i;<br>                    srcy=j;<br>                &#125;<br>                else if(grid[i][j]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;grid[i][j]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)<br>                &#123;<br>                    if(!mp.count(grid[i][j]))<br>                        mp[grid[i][j]]=mp.size();<br>                &#125;<br>            &#125;<br>        &#125;<br>        vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dis(m,vector&lt;vector&lt;int&gt;&gt;(n,vector&lt;int&gt;(<span class="hljs-number">1</span>&lt;&lt;mp.size(),<span class="hljs-number">-1</span>)));<br>        q.push(&#123;srcx,srcy,<span class="hljs-number">0</span>&#125;);<br>        dis[srcx][srcy][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        while(!q.empty())<br>        &#123;   <br>            auto[x,y,status]=q.front();<br>            q.pop();<br>            for(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;++i)<br>            &#123;<br>                dx=x+dir[i][<span class="hljs-number">0</span>];<br>                dy=y+dir[i][<span class="hljs-number">1</span>];<br>                if(dx&gt;=<span class="hljs-number">0</span>&amp;&amp;dx&lt;m&amp;&amp;dy&gt;=<span class="hljs-number">0</span>&amp;&amp;dy&lt;n&amp;&amp;grid[dx][dy]!=<span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#123;<br>                    if(grid[dx][dy]==<span class="hljs-string">&#x27;.&#x27;</span>||grid[dx][dy]==<span class="hljs-string">&#x27;@&#x27;</span>)<br>                    &#123;<br>                        if(dis[dx][dy][status]==<span class="hljs-number">-1</span>)<br>                        &#123;<br>                            dis[dx][dy][status]=dis[x][y][status]+<span class="hljs-number">1</span>;<br>                            q.push(&#123;dx,dy,status&#125;);<br>                        &#125;<br>                    &#125;<br>                    else if(grid[dx][dy]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;grid[dx][dy]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)<br>                    &#123;<br>                        int idx=mp[grid[dx][dy]];<br>                        if(dis[dx][dy][status|(<span class="hljs-number">1</span>&lt;&lt;idx)]==<span class="hljs-number">-1</span>)<br>                        &#123;<br>                            dis[dx][dy][status|(<span class="hljs-number">1</span>&lt;&lt;idx)]=dis[x][y][status]+<span class="hljs-number">1</span>;<br>                            if((status|(<span class="hljs-number">1</span>&lt;&lt;idx))==(<span class="hljs-number">1</span>&lt;&lt;mp.size())<span class="hljs-number">-1</span>)<br>                                return dis[dx][dy][status|(<span class="hljs-number">1</span>&lt;&lt;idx)];<br>                            q.push(&#123;dx,dy,status|(<span class="hljs-number">1</span>&lt;&lt;idx)&#125;);<br>                        &#125;<br>                    &#125;<br>                    else<br>                    &#123;<br>                        int idx=mp[grid[dx][dy]+<span class="hljs-number">32</span>];<br>                        if((status &amp; (<span class="hljs-number">1</span>&lt;&lt;idx)) &amp;&amp; dis[dx][dy][status]==<span class="hljs-number">-1</span>)<br>                        &#123;<br>                            dis[dx][dy][status]=dis[x][y][status]+<span class="hljs-number">1</span>;<br>                            q.push(&#123;dx,dy,status&#125;);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        return <span class="hljs-number">-1</span>;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大加号标志</title>
    <link href="/2022/11/09/%E6%9C%80%E5%A4%A7%E5%8A%A0%E5%8F%B7%E6%A0%87%E5%BF%97/"/>
    <url>/2022/11/09/%E6%9C%80%E5%A4%A7%E5%8A%A0%E5%8F%B7%E6%A0%87%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%9C%80%E5%A4%A7%E5%8A%A0%E5%8F%B7%E6%A0%87%E5%BF%97">最大加号标志</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="最大加号标志"><a class="markdownIt-Anchor" href="#最大加号标志"></a> 最大加号标志</h2><p><a href="https://leetcode.cn/problems/largest-plus-sign/description/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>在一个 n x n 的矩阵 grid 中，除了在数组 mines 中给出的元素为 0，其他每个元素都为 1。mines[i] = [xi, yi]表示 grid[xi][yi] == 0</p><p>返回  grid 中包含 1 的最大的 轴对齐 加号标志的阶数 。如果未找到加号标志，则返回 0 。</p><p>一个 k 阶由 1 组成的 “轴对称”加号标志 具有中心网格 grid[r][c] == 1 ，以及4个从中心向上、向下、向左、向右延伸，长度为 k-1，由 1 组成的臂。注意，只有加号标志的所有网格要求为 1 ，别的网格可能为 0 也可能为 1 。</p><p>示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: n = <span class="hljs-number">5</span>, mines = <span class="hljs-string">[[4, 2]]</span><br>输出: <span class="hljs-number">2</span><br>解释: 在上面的网格中，最大加号标志的阶只能是<span class="hljs-number">2</span>。一个标志已在图中标出。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><blockquote><p>这道题属于动态规划，用<code>dp[i][j]</code>表示在<code>(i,j)</code>位置四个方向阶数的最小值，然后找到dp数组中的最大值即可。<br />注意：遍历时要先处理水平方向，再处理垂直方向，不然无法正确更新dp数组</p></blockquote><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Solution &#123;<br>public:<br>    bool vis[250001];<br>    int orderOfLargestPlusSign(int n, vector&lt;vector&lt;int&gt;&gt;&amp; mines) &#123;<br>        vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n,n));<br>        <span class="hljs-keyword">for</span>(auto &amp; t:mines)<br>            vis[t[0]*n+t[1]]=<span class="hljs-literal">true</span>;<br>        int <span class="hljs-attribute">count</span>=0;<br>        int <span class="hljs-attribute">ans</span>=0;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=0;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(vis[i*n+j])<br>                    <span class="hljs-attribute">count</span>=0;<br>                <span class="hljs-keyword">else</span><br>                    ++count;<br>                dp[i][j]=min(dp[i][j],count);<br>            &#125;<br>            <span class="hljs-attribute">count</span>=0;<br>            <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=n-1;j&gt;=0;--j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(vis[i*n+j])<br>                    <span class="hljs-attribute">count</span>=0;<br>                <span class="hljs-keyword">else</span><br>                    ++count;<br>                dp[i][j]=min(dp[i][j],count);<br>            &#125;<br>            <span class="hljs-attribute">count</span>=0;<br>            <br>        &#125;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=0;j&lt;n;++j)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(vis[i*n+j])<br>                    <span class="hljs-attribute">count</span>=0;<br>                <span class="hljs-keyword">else</span><br>                    ++count;<br>                dp[i][j]=min(dp[i][j],count);<br>            &#125;<br>            <span class="hljs-attribute">count</span>=0;<br>            <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=n-1;i&gt;=0;--i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(vis[i*n+j])<br>                    <span class="hljs-attribute">count</span>=0;<br>                <span class="hljs-keyword">else</span><br>                    ++count;<br>                dp[i][j]=min(dp[i][j],count);<br>                <span class="hljs-attribute">ans</span>=max(dp[i][j],ans);<br>            &#125;<br>            <span class="hljs-attribute">count</span>=0;<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>美丽整数最小增量</title>
    <link href="/2022/11/08/%E7%BE%8E%E4%B8%BD%E6%95%B4%E6%95%B0%E6%9C%80%E5%B0%8F%E5%A2%9E%E9%87%8F/"/>
    <url>/2022/11/08/%E7%BE%8E%E4%B8%BD%E6%95%B4%E6%95%B0%E6%9C%80%E5%B0%8F%E5%A2%9E%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%BE%8E%E4%B8%BD%E6%95%B4%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%A2%9E%E9%87%8F">美丽整数的最小增量</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="美丽整数的最小增量"><a class="markdownIt-Anchor" href="#美丽整数的最小增量"></a> 美丽整数的最小增量</h2><p><a href="https://leetcode.cn/problems/minimum-addition-to-make-integer-beautiful/description/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给你两个正整数 n 和 target 。</p><p>如果某个整数每一位上的数字相加小于或等于 target ，则认为这个整数是一个 美丽整数 。</p><p>找出并返回满足 n + x 是 美丽整数 的最小非负整数 x 。生成的输入保证总可以使 n 变成一个美丽整数。</p><p>示例：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 16, target = 6<br>输出：4<br>解释：最初，n 是<span class="hljs-number"> 16 </span>，且其每一位数字的和是<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 7 </span>。<br>在加<span class="hljs-number"> 4 </span>之后，n 变为<span class="hljs-number"> 20 </span>且每一位数字的和变成<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 0 </span>=<span class="hljs-number"> 2 </span>。可以证明无法加上一个小于<span class="hljs-number"> 4 </span>的非负整数使 n 变成一个美丽整数。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>从右到左遍历，依次进行高位加1,低位置0,直到满足条件为止</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> makeIntegerBeautiful(<span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> n, <span class="hljs-built_in">int</span> target) &#123;<br>        string s=to_string(n);<br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> len=s.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">char</span> c:s)<br>            <span class="hljs-keyword">sum</span>+=c-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">sum</span>&lt;=target)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=len<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;9&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;++j)<br>                <span class="hljs-keyword">sum</span>+=s[j]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            ++<span class="hljs-keyword">sum</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">sum</span>&lt;=target)<br>            &#123;<br>                string ans=s;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i+<span class="hljs-number">1</span>;j&lt;len;++j)<br>                    ans[j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                ++ans[i];<br>                <span class="hljs-keyword">return</span> stoll(ans)-n;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> stoll(<span class="hljs-string">&#x27;1&#x27;</span>+string(len,<span class="hljs-string">&#x27;0&#x27;</span>))-n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>transformer笔记</title>
    <link href="/2022/11/03/transformer%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/03/transformer%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#transformer%E7%AC%94%E8%AE%B0">Transformer笔记</a><ul><li><a href="#transformer%E7%9A%84%E6%8F%90%E5%87%BA">transformer的提出</a></li><li><a href="#%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6">自注意力机制</a></li><li><a href="#%E5%A4%9A%E5%A4%B4%E6%B3%A8%E6%84%8F%E5%8A%9B">多头注意力</a></li><li><a href="#%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81">位置编码</a><ul><li><a href="#token-embedding">Token Embedding</a></li><li><a href="#positional-embedding">Positional Embedding</a></li></ul></li><li><a href="#transformer%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84">Transformer网络结构</a><ul><li><a href="#encoder">Encoder</a></li><li><a href="#decoder">Decoder</a></li><li><a href="#%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%8E%A9%E7%A0%81%E6%9C%BA%E5%88%B6">注意力掩码机制</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8Etransformer%E7%9A%84%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B">基于transformer的分类模型</a></li></ul></li></ul><!-- /TOC --><h1 id="transformer笔记"><a class="markdownIt-Anchor" href="#transformer笔记"></a> Transformer笔记</h1><p>在写本篇博客时，主要参考了这篇博客（<a href="https://zhuanlan.zhihu.com/p/420820453">博客链接</a>），博主介绍的非常细致，强烈推荐。</p><h2 id="transformer的提出"><a class="markdownIt-Anchor" href="#transformer的提出"></a> transformer的提出</h2><p>该模型的提出，来源于2017年的一篇论文：Attention is all you need</p><p>在论文中作者提到，当前主流的序列模型都是基于复杂的RNN或者CNN构造的Encoder-Decoder模型,这种模型使得下一个时刻的计算过程依赖于上一个时刻的输出，因此RNN在计算效率上受到很大限制。于是作者提出了transformer架构，他抛弃了RNN结构，引入了注意力机制来计算模型输入输出间的隐含表示。</p><h2 id="自注意力机制"><a class="markdownIt-Anchor" href="#自注意力机制"></a> 自注意力机制</h2><p>注意力机制可以描述为将query和一系列的key-value对映射到某个输出的过程，而这个输出的向量就是根据query和key计算得到的权重作用于value上的权重和。</p><p><img src="https://pic2.zhimg.com/80/v2-21ebe709cd12dda0a9c9da7559d3e045_720w.webp" alt="" /><br />可以看出，自注意力的计算过程就是通过Query和Key计算出权重，然后与Value相乘得到输出。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mrow><mo fence="true">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mrow><mo fence="true">(</mo><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac><mo fence="true">)</mo></mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">Attention\left(Q,K,V\right)=softmax\left(\frac{QK^T}{\sqrt{d_k}}\right)V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">t</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.468361em;vertical-align:-0.95003em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183309999999999em;"><span style="top:-2.25278em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.81722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18278000000000005em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></span></p><p>其中Q,K,V分别是三个矩阵，而除以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{d_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.18278000000000005em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.81722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18278000000000005em;"><span></span></span></span></span></span></span></span></span>就是上图中的scale过程。作者发现某些情况下<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">QK^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>会得到很大的值，这会导致softmax后产生很小的梯度，不利于训练，所以加入scale的过程。</p><p>下面举例说明Q,K,V是怎么来的。</p><p><img src="https://pic4.zhimg.com/80/v2-28903ee6a9c01d4895af7836b1e5997f_720w.webp" alt="" /></p><p>从上图可以看出，Q，K，V其实就是输入X乘以三个不同的矩阵计算而来，即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>q</mi></msup><mspace linebreak="newline"></mspace><mi>K</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>k</mi></msup><mspace linebreak="newline"></mspace><mi>V</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>v</mi></msup></mrow><annotation encoding="application/x-tex">Q=XW^q\\K=XW^k\\V=XW^v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.714392em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span></span></span></span></span></span></span></span></p><p>得到Q,K,V之后，就可以进一步计算得到权重向量。</p><p><img src="https://pic4.zhimg.com/80/v2-3173490f0b8fb89b22a22b65d2851c7f_720w.webp" alt="" /><br />假如Q和K的计算结果如上图，对于权重矩阵的第1行来说，0.7表示的就是“我”与“我”的注意力值；0.2表示的就是“我”与”是”的注意力值；0.1表示的就是“我”与“谁”的注意力值。换句话说，在对序列中的“我“进行编码时，应该将0.7的注意力放在“我”上，0.2的注意力放在“是”上，将0.1的注意力放在谁上。</p><p>不过，上面的规律也反映了一个小问题：<strong>模型在对当前位置的信息进行编码时，会过度的将注意力集中于自身的位置而可能忽略了其它位置。</strong></p><p>得到权重矩阵之后，与V相乘：</p><p><img src="https://pic3.zhimg.com/80/v2-a574d12396e1e2006716eb58f9fa5806_720w.webp" alt="" /></p><p>对于“是”而言，它的编码向量其实就是“我，是，谁”三个字的加权和，如下图所示：</p><p><img src="https://pic2.zhimg.com/80/v2-3de3645627bd94e4258a89c4376227c1_720w.webp" alt="" /></p><p>这种自注意力机制,确实解决了作者在论文中所提出的“传统序列模型在编码过程中都需顺序进行的弊端”的问题，有了自注意力机制后，仅仅只需要对原始输入进行几次矩阵变换便能够得到最终包含有不同位置注意力信息的编码向量。</p><h2 id="多头注意力"><a class="markdownIt-Anchor" href="#多头注意力"></a> 多头注意力</h2><p>之前提到，自注意力在对当前位置的信息进行编码时，会过度的将注意力集中于自身的位置，所以提出了Multi-head Attention来进行改进。</p><p><img src="https://pic4.zhimg.com/80/v2-849a1a08e54a4ab3b2bfadfaceddfeab_720w.webp" alt="" /></p><p>多头注意力机制其实就是将原始的输入序列进行多组的自注意力处理过程；然后再将每一组自注意力的结果拼接起来进行一次线性变换得到最终的输出结果。具体的，其计算公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>M</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>i</mi><mi>H</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>t</mi><mo stretchy="false">(</mo><mi>h</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>h</mi></msub><mo stretchy="false">)</mo><msup><mi>W</mi><mi>O</mi></msup><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>W</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>h</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>Q</mi><msubsup><mi>W</mi><mi>i</mi><mi>Q</mi></msubsup><mo separator="true">,</mo><mi>K</mi><msubsup><mi>W</mi><mi>i</mi><mi>K</mi></msubsup><mo separator="true">,</mo><mi>V</mi><msubsup><mi>W</mi><mi>i</mi><mi>V</mi></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MultiHead(Q,K,V)=Concat(head_1,...,head_h)W^O\\\\Where head_i=Attention(QW_i^Q,KW^K_i,VW_i^V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">O</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.276864em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">t</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9592389999999998em;"><span style="top:-2.4231360000000004em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.180908em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>作者使用了个并行的自注意力模块（8个头）来构建一个注意力层，论文中所使用的多头注意力机制其实就是将一个大的高维单头拆分成了h个多头。</p><p><img src="https://pic4.zhimg.com/80/v2-382a68f2a5543f00b7a4a1fd84e29b83_720w.webp" alt="" /></p><p>当进行进行注意力权重矩阵计算时，h越大那么Q,K,V就会被切分得越小，进而得到的注意力权重分配方式越多，如图所示。</p><p><img src="https://pic1.zhimg.com/80/v2-8837a813f9028886bb8529a59c6cd9c8_720w.webp" alt="" /></p><p>因而多头这一做法也恰好用于克服模型在对当前位置的信息进行编码时，会过度的将注意力集中于自身的位置的问题，使得权重分配更合理。</p><h2 id="位置编码"><a class="markdownIt-Anchor" href="#位置编码"></a> 位置编码</h2><h3 id="token-embedding"><a class="markdownIt-Anchor" href="#token-embedding"></a> Token Embedding</h3><p>在对文本相关的数据进行建模时首先要做的便是对其进行向量化(Embedding),在深度学习中，更常见的做法便是将各个词（或者字）通过一个Embedding层映射到低维稠密的向量空间。因此，在Transformer模型中，首先第一步要做的同样是将文本以这样的方式进行向量化表示，并且将其称之为Token Embedding，也就是深度学习中常说的词嵌入（Word Embedding）</p><p><img src="https://pic4.zhimg.com/80/v2-9e4cb60bd2ed3e1aca137928bf34a537_720w.webp" alt="" /></p><p>如果是换做之前的网络模型，例如CNN或者RNN，那么对于文本向量化的步骤就到此结束了，因为这些网络结构本身已经具备了捕捉时序特征的能力,但是这对仅仅只有自注意力机制的网络结构来说却不行。自注意力机制在实际运算过程中不过就是几个矩阵来回相乘进行<strong>线性变换</strong>而已。因此，这就导致即使是打乱各个词的顺序，那么最终计算得到的结果本质上却没有发生任何变换，换句话说仅仅只使用自注意力机制会丢失文本原有的序列信息（<s>换个顺序学习不到新的东西</s>）。</p><p>下面举例说明原因：</p><p><img src="https://pic4.zhimg.com/80/v2-a61fbde8b2b7958eef3dd134f722c69b_720w.webp" alt="" /></p><p>经过词嵌入表示后，序列“我 在 看 书”经过了一次线性变换。现在，我们将序列变成“书 在 看 我”，然后同样以中间这个权重矩阵来进行线性变换。</p><p><img src="https://pic4.zhimg.com/80/v2-9aede5435fe5c6f010457c5818ec3ce3_720w.webp" alt="" /></p><p>所以，序列在交换位置前和交换位置后计算得到的结果在本质上并没有任何区别，仅仅只是交换了对应的位置。因此，基于这样的原因，Transformer在原始输入文本进行Embedding后，又额外的加入了一个Positional Embedding来刻画数据在时序上的特征。</p><h3 id="positional-embedding"><a class="markdownIt-Anchor" href="#positional-embedding"></a> Positional Embedding</h3><p>先来通过一幅图直观看看经过Positional Embedding处理后到底产生了什么样的变化。</p><p><img src="https://pic3.zhimg.com/80/v2-8110b24565ffbfb028866a19050940fa_720w.webp" alt="" /></p><blockquote><p>如图所示，横坐标表示输入序列中的每一个Token，每一条曲线或者直线表示对应Token在每个维度上对应的位置信息。在左图中，每个维度所对应的位置信息都是一个不变的常数；而在右图中，每个维度所对应的位置信息都是基于某种公式变换所得到。换句话说就是，左图中任意两个Token上的向量都可以进行位置交换而模型却不能捕捉到这一差异，但是加入右图这样的位置信息模型却能够感知到。例如位置20这一处的向量，在左图中无论你将它换到哪个位置，都和原来一模一样；但在右图中，你却再也找不到与位置20处位置信息相同的位置。</p></blockquote><p>下面再看一个例子</p><p><img src="https://pic1.zhimg.com/80/v2-9a4be9596e49f523e90c2c9eb7b37864_720w.webp" alt="" /></p><p>原始输入在经过Token Embedding后，又加入了一个常数位置信息的的Positional Embedding。在经过一次线性变换后便得到了图2-5左右边所示的结果。接下来，我们再交换序列的位置，并同时进行Positional Embedding观察其结果。</p><p><img src="https://pic3.zhimg.com/80/v2-d98e246f487827ee1ad6411cc00928e6_720w.webp" alt="" /></p><p>可以看到，交换位置后得到的权重矩阵只是发生了普通的线性变换，说明上述类型的PE是无效的。</p><p>在Transformer中，作者采用了以下公式所示的规则来生成各个维度的位置信息。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><msub><mi>E</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi></mrow></msub><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow><mrow><mn>1000</mn><msup><mn>0</mn><mfrac><mrow><mn>2</mn><mi>i</mi></mrow><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mfrac></msup></mrow></mfrac><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mi>P</mi><msub><mi>E</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow><mrow><mn>1000</mn><msup><mn>0</mn><mfrac><mrow><mn>2</mn><mi>i</mi></mrow><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mfrac></msup></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">PE_{pos,2i}=sin\left(\frac{pos}{10000^{\frac{2i}{d_{model}}}}\right)\\PE_{pos,2i+1}=cos\left(\frac{pos}{10000^{\frac{2i}{d_{model}}}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4619299999999997em;vertical-align:-1.01193em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.12193em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.1219299999999999em;"><span style="top:-3.5233700000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550857142857142em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34963999999999995em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5937428571428571em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.35193em;"><span class="pstrut" style="height:3.12193em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.79893em;"><span class="pstrut" style="height:3.12193em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01193em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4619299999999997em;vertical-align:-1.01193em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.12193em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.1219299999999999em;"><span style="top:-3.5233700000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550857142857142em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34963999999999995em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5937428571428571em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.35193em;"><span class="pstrut" style="height:3.12193em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.79893em;"><span class="pstrut" style="height:3.12193em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01193em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>上式中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">PE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>就是embedding的矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">pos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span></span></span></span>代表某一个位置,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>代表某一个维度，在融入这种非常数的Positional Embedding位置信息后，便可以得到下图结果。</p><p><img src="https://pic3.zhimg.com/80/v2-0c62651daf9f5c0c1de77e9137b058b6_720w.webp" alt="" /></p><p>这就说明通过Positional Embedding可以弥补自注意力机制不能捕捉序列时序信息的缺陷(<s>感觉类似于激活层的作用</s>)。</p><h2 id="transformer网络结构"><a class="markdownIt-Anchor" href="#transformer网络结构"></a> Transformer网络结构</h2><p>整体结构如下：</p><p><img src="https://pic1.zhimg.com/80/v2-6da4c9720ec88860295bd63e19344820_720w.webp" alt="" /></p><h3 id="encoder"><a class="markdownIt-Anchor" href="#encoder"></a> Encoder</h3><p><img src="https://pic3.zhimg.com/80/v2-5da93887d468045677e9983f14b35db6_720w.webp" alt="" /></p><p>主要由多头注意力机制和两层前馈神经网络构成，并且都加入了残差连接，并进行了层归一化。其中前馈神经网络主要用于变换维度，增强模型表达能力。</p><h3 id="decoder"><a class="markdownIt-Anchor" href="#decoder"></a> Decoder</h3><p><img src="https://pic1.zhimg.com/80/v2-8ab2c37e224137c05332419d525c88cc_720w.webp" alt="" /></p><p>不同于Encoder部分，在Decoder中一共包含有3个部分的网络结构。最上面的和最下面的部分（暂时忽略Mask）与Encoder相同，只是多了中间这个与Encoder输出（Memory）进行交互的部分，作者称之为“Encoder-Decoder attention”。<strong>对于这部分的输入，Q来自于下面多头注意力机制的输出，K和V均是Encoder部分的输出（Memory）经过线性变换后得到。</strong></p><p>具体解码过程如下：</p><p>首先，待解码向量和Memory分别各自乘上一个矩阵后得到Q、K、V。</p><p><img src="https://pic2.zhimg.com/80/v2-22669eedb0931017b8ed1d56dcd28089_720w.webp" alt="" /></p><p><img src="https://pic4.zhimg.com/80/v2-56ab4338fc9da4ca495fe070904846cf_720w.webp" alt="" /></p><p>在解码第1个时刻时，首先Q通过与K进行交互得到权重向量，此时可以看做是<strong>Q（待解码向量）在K（本质上也就是Memory）中查询Memory中各个位置与Q有关的信息</strong>；然后将权重向量与V进行运算得到解码向量，此时这个解码向量可以看作是<strong>考虑了Memory中各个位置编码信息的输出向量</strong>，也就是说它包含了在解码当前时刻时应该将注意力放在Memory中哪些位置上的信息。</p><p>在得到这个解码向量并经过图2-10中最上面的两层全连接层后，便将其输入到分类层中进行分类得到当前时刻的解码输出值。</p><h3 id="注意力掩码机制"><a class="markdownIt-Anchor" href="#注意力掩码机制"></a> 注意力掩码机制</h3><p>模型在实际的预测过程中只是将当前时刻之前（包括当前时刻）的所有时刻作为输入来预测下一个时刻，也就是说模型在预测时是看不到当前时刻之后的信息。因此，Transformer中的Decoder通过加入注意力掩码机制（Masked Multi-Head Attention）来解决了这一问题。</p><p><img src="https://pic4.zhimg.com/80/v2-ef714b246dfc08c912db18aaec0542cb_720w.webp" alt="" /></p><p>如图所示，左边依旧是通过Q和K计算得到了注意力权重矩阵（此时还未进行softmax操作），而中间的就是所谓的注意力掩码矩阵，两者在相加之后再乘上矩阵V便得到了整个自注意力机制的输出。（因为attention mask的加入，使得softmax之后，后面时刻的权重变为0，正好屏蔽了当前时刻之后的输入。）</p><h2 id="基于transformer的分类模型"><a class="markdownIt-Anchor" href="#基于transformer的分类模型"></a> 基于transformer的分类模型</h2><p><img src="https://moonhotel.oss-cn-shanghai.aliyuncs.com/images/2107052058585050890.jpg" alt="" /></p><p>上图便是一个基于Transformer结构的文本分类模型。不过准确的说应该只是一个基于Transformer中Encoder的文本分类模型。这是因为在文本分类任务中并没有解码这一过程，所以我们只需要将Encoder编码得到的向量输入到分类器中进行分类即可。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BRT笔记</title>
    <link href="/2022/10/27/BRT%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/27/BRT%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#brt%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0">BRT阅读笔记</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E8%83%8C%E6%99%AF">相关背景</a></li><li><a href="#%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D">模型介绍</a><ul><li><a href="#%E5%86%B3%E7%AD%96%E6%A0%91">决策树</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="brt阅读笔记"><a class="markdownIt-Anchor" href="#brt阅读笔记"></a> BRT阅读笔记</h1><h2 id="相关背景"><a class="markdownIt-Anchor" href="#相关背景"></a> 相关背景</h2><p>提升回归树(BRT)，是一种用来拟合统计模型的集合方法，他集合了Regression Trees 和 Boosting 两种方法的优点。最终的BRT模型可以被理解为一个加法回归模型，其中各个项是简单的树，以前向的、阶段性的方式进行拟合。</p><p>BRT可以处理不同类型的预测变量并适应缺失数据。它们不需要事先进行数据转换或消除异常值，可以适应复杂的非线性关系，并自动处理预测变量之间的交互效应。在BRT中拟合多棵树，克服了单棵树模型的最大缺点：其预测性能相对较差。尽管BRT模型很复杂，但它们可以通过总结的方式给予强大的生态学洞察力，其预测性能优于大多数传统的建模方法。</p><h2 id="模型介绍"><a class="markdownIt-Anchor" href="#模型介绍"></a> 模型介绍</h2><p>BRT主要使用两种算法，回归树就是用于分类的树(决策树)的模型组，而boosting则是对这些模型进行组合</p><h3 id="决策树"><a class="markdownIt-Anchor" href="#决策树"></a> 决策树</h3><img src="/2022/10/27/BRT%E7%AC%94%E8%AE%B0/brt1.png" class="" title="Fig1"><p>基于树的预测器模型将空间划分为矩形，然后使用一系列的规则确定同质的区域。然后，为每个区域拟合一个常数，分类树拟合最可能的类别作为常数，回归树拟合该区域观测值的平均响应。在上图中，两个预测变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">X_1,X_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可能是温度和降雨量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>可能表示一个成体的平均重量，区域<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>Y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">Y_1,Y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示终端节点或者叶子。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_1,t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>等是分割点，其作用是为了最小化预测误差。</p><p>树对异常值不敏感，并且可以通过使用替代品允许少许数据的缺失，但也有一些缺陷，比如树很难模拟平滑的函数，并且树的结构取决于数据样本，微小的数据变化可能导致树出现一系列差异很大的分支。因此，这些因素都限制了树的预测性能。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单调双端队列</title>
    <link href="/2022/10/26/%E5%8D%95%E8%B0%83%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    <url>/2022/10/26/%E5%8D%95%E8%B0%83%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-k-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84">和至少为 K 的最短子数组</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="和至少为-k-的最短子数组"><a class="markdownIt-Anchor" href="#和至少为-k-的最短子数组"></a> 和至少为 K 的最短子数组</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/">题目链接</a></p><p>给你一个整数数组 nums 和一个整数 k ，找出 nums 中和至少为 k 的 最短非空子数组 ，并返回该子数组的长度。如果不存在这样的 子数组 ，返回 -1 。</p><p>子数组 是数组中 连续 的一部分。</p><p>示例</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [2,-1,2], k = 3</span><br><span class="hljs-string">输出：3</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题自己想的就是前缀和然后暴力，但TLE了，看了题解发现需要用单调双端队列对前缀和数组进行优化</p><p>主要做两处优化：</p><ol><li><p>弹出队首并更新答案</p></li><li><p>弹出队尾，保证队列单调递增</p></li></ol><p><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/solution/liang-zhang-tu-miao-dong-dan-diao-dui-li-9fvh/">参考链接</a></p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">shortestSubarray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(len+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)<br>            a[i]=nums[i<span class="hljs-number">-1</span>]+a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> ans=INT_MAX;<br>        deque&lt;<span class="hljs-type">int</span>&gt; q;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=len;++i)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()&amp;&amp;a[i]-a[q.<span class="hljs-built_in">front</span>()]&gt;=k)<br>            &#123;<br>                ans=<span class="hljs-built_in">min</span>(ans,i-q.<span class="hljs-built_in">front</span>());<br>                q.<span class="hljs-built_in">pop_front</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()&amp;&amp;a[i]&lt;=a[q.<span class="hljs-built_in">back</span>()])<br>               q.<span class="hljs-built_in">pop_back</span>();<br>            q.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans==INT_MAX ? <span class="hljs-number">-1</span> : ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大人工岛</title>
    <link href="/2022/10/25/%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/"/>
    <url>/2022/10/25/%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B">最大人工岛</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5">最短的桥</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="最大人工岛"><a class="markdownIt-Anchor" href="#最大人工岛"></a> 最大人工岛</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><a href="https://leetcode.cn/problems/making-a-large-island/">原题链接</a></p><p>给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。</p><p>返回执行此操作后，grid 中最大的岛屿面积是多少？</p><p>岛屿 由一组上、下、左、右四个方向相连的 1 形成。</p><p>示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: grid = <span class="hljs-string">[[1, 1], [1, 0]]</span><br>输出: <span class="hljs-number">4</span><br>解释: 将一格<span class="hljs-number">0</span>变成<span class="hljs-number">1</span>，岛屿的面积扩大为 <span class="hljs-number">4</span>。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>主要思路是dfs，用dfs给不同的岛编号，用哈系表记录每个编号的岛的面积，然后遍历所有非岛屿部分，更新最大面积即可</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Solution</span> &#123;</span><br><span class="hljs-class">public:</span><br><span class="hljs-class">    void dfs(<span class="hljs-title">int</span> <span class="hljs-title">x</span>,<span class="hljs-title">int</span> <span class="hljs-title">y</span>,<span class="hljs-title">int</span> <span class="hljs-title">bh</span>,<span class="hljs-title">vector</span>&lt;<span class="hljs-title">vector</span>&lt;<span class="hljs-title">int</span>&gt;&gt;&amp; <span class="hljs-title">grid</span>,<span class="hljs-title">int</span> <span class="hljs-title">m</span>,<span class="hljs-title">int</span> <span class="hljs-title">n</span>)</span><br><span class="hljs-class">    &#123;</span><br><span class="hljs-class">        if(<span class="hljs-title">grid</span>[<span class="hljs-title">x</span>][<span class="hljs-title">y</span>]!=1)</span><br><span class="hljs-class">            return;</span><br><span class="hljs-class">        grid[x][y]=bh;</span><br><span class="hljs-class">        if(<span class="hljs-title">x</span>+1&lt;<span class="hljs-title">m</span>)</span><br><span class="hljs-class">            dfs(<span class="hljs-title">x</span>+1,<span class="hljs-title">y</span>,<span class="hljs-title">bh</span>,<span class="hljs-title">grid</span>,<span class="hljs-title">m</span>,<span class="hljs-title">n</span>);</span><br><span class="hljs-class">        if(<span class="hljs-title">y</span>+1&lt;<span class="hljs-title">n</span>)</span><br><span class="hljs-class">            dfs(<span class="hljs-title">x</span>,<span class="hljs-title">y</span>+1,<span class="hljs-title">bh</span>,<span class="hljs-title">grid</span>,<span class="hljs-title">m</span>,<span class="hljs-title">n</span>);</span><br><span class="hljs-class">        if(<span class="hljs-title">x</span>-1&gt;=0)</span><br><span class="hljs-class">            dfs(<span class="hljs-title">x</span>-1,<span class="hljs-title">y</span>,<span class="hljs-title">bh</span>,<span class="hljs-title">grid</span>,<span class="hljs-title">m</span>,<span class="hljs-title">n</span>);</span><br><span class="hljs-class">        if(<span class="hljs-title">y</span>-1&gt;=0)</span><br><span class="hljs-class">            dfs(<span class="hljs-title">x</span>,<span class="hljs-title">y</span>-1,<span class="hljs-title">bh</span>,<span class="hljs-title">grid</span>,<span class="hljs-title">m</span>,<span class="hljs-title">n</span>);</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    int largestIsland(<span class="hljs-title">vector</span>&lt;<span class="hljs-title">vector</span>&lt;<span class="hljs-title">int</span>&gt;&gt;&amp; <span class="hljs-title">grid</span>) &#123;</span><br><span class="hljs-class">        int m=grid.size();</span><br><span class="hljs-class">        int n=grid[0].size();</span><br><span class="hljs-class">        unordered_map&lt;int,int&gt; mp;</span><br><span class="hljs-class">        mp[0]=0;</span><br><span class="hljs-class">        int ans=0;</span><br><span class="hljs-class">        int bh=2;</span><br><span class="hljs-class">        for(<span class="hljs-title">int</span> <span class="hljs-title">i</span>=0;<span class="hljs-title">i</span>&lt;<span class="hljs-title">m</span>;++<span class="hljs-title">i</span>)</span><br><span class="hljs-class">        &#123;</span><br><span class="hljs-class">            for(<span class="hljs-title">int</span> <span class="hljs-title">j</span>=0;<span class="hljs-title">j</span>&lt;<span class="hljs-title">n</span>;++<span class="hljs-title">j</span>)</span><br><span class="hljs-class">            &#123;</span><br><span class="hljs-class">                if(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>]==1)</span><br><span class="hljs-class">                &#123;</span><br><span class="hljs-class">                    dfs(<span class="hljs-title">i</span>,<span class="hljs-title">j</span>,<span class="hljs-title">bh</span>,<span class="hljs-title">grid</span>,<span class="hljs-title">m</span>,<span class="hljs-title">n</span>);</span><br><span class="hljs-class">                    ++bh;</span><br><span class="hljs-class">                &#125;</span><br><span class="hljs-class">            &#125;</span><br><span class="hljs-class">        &#125;</span><br><span class="hljs-class">        for(<span class="hljs-title">int</span> <span class="hljs-title">i</span>=0;<span class="hljs-title">i</span>&lt;<span class="hljs-title">m</span>;++<span class="hljs-title">i</span>)</span><br><span class="hljs-class">        &#123;</span><br><span class="hljs-class">            for(<span class="hljs-title">int</span> <span class="hljs-title">j</span>=0;<span class="hljs-title">j</span>&lt;<span class="hljs-title">n</span>;++<span class="hljs-title">j</span>)</span><br><span class="hljs-class">            &#123;</span><br><span class="hljs-class">                if(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>]!=0)</span><br><span class="hljs-class">                    ++mp[grid[i][j]];</span><br><span class="hljs-class">            &#125;</span><br><span class="hljs-class">        &#125;</span><br><span class="hljs-class">        int flag=0;</span><br><span class="hljs-class">        for(<span class="hljs-title">int</span> <span class="hljs-title">i</span>=0;<span class="hljs-title">i</span>&lt;<span class="hljs-title">m</span>;++<span class="hljs-title">i</span>)</span><br><span class="hljs-class">        &#123;</span><br><span class="hljs-class">            for(<span class="hljs-title">int</span> <span class="hljs-title">j</span>=0;<span class="hljs-title">j</span>&lt;<span class="hljs-title">n</span>;++<span class="hljs-title">j</span>)</span><br><span class="hljs-class">            &#123;</span><br><span class="hljs-class">                if(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>]==0)</span><br><span class="hljs-class">                &#123;</span><br><span class="hljs-class">                    flag=1;</span><br><span class="hljs-class">                    int t=0;</span><br><span class="hljs-class">                    unordered_set&lt;int&gt; s;</span><br><span class="hljs-class">                    if(<span class="hljs-title">i</span>-1&gt;=0)</span><br><span class="hljs-class">                        s.insert(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>-1][<span class="hljs-title">j</span>]);</span><br><span class="hljs-class">                    if(<span class="hljs-title">j</span>-1&gt;=0)</span><br><span class="hljs-class">                        s.insert(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>-1]);</span><br><span class="hljs-class">                    if(<span class="hljs-title">i</span>+1&lt;<span class="hljs-title">m</span>)</span><br><span class="hljs-class">                        s.insert(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>+1][<span class="hljs-title">j</span>]);</span><br><span class="hljs-class">                    if(<span class="hljs-title">j</span>+1&lt;<span class="hljs-title">n</span>)</span><br><span class="hljs-class">                        s.insert(<span class="hljs-title">grid</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>+1]);</span><br><span class="hljs-class">                    for(<span class="hljs-title">auto</span> <span class="hljs-title">it</span>=<span class="hljs-title">s</span>.<span class="hljs-title">begin</span>();it!=s.end();++it)</span><br><span class="hljs-class">                        t+=mp[*it];</span><br><span class="hljs-class">                    ans=max(<span class="hljs-title">ans</span>,<span class="hljs-title">t</span>+1);</span><br><span class="hljs-class">                &#125;</span><br><span class="hljs-class">            &#125;</span><br><span class="hljs-class">        &#125;</span><br><span class="hljs-class">        if(<span class="hljs-title">flag</span>)</span><br><span class="hljs-class">            return ans;</span><br><span class="hljs-class">        else</span><br><span class="hljs-class">            return m*n;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;;</span><br></code></pre></td></tr></table></figure><h2 id="最短的桥"><a class="markdownIt-Anchor" href="#最短的桥"></a> 最短的桥</h2><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p><a href="https://leetcode.cn/problems/shortest-bridge/">原题链接</a></p><p>给你一个大小为 n x n 的二元矩阵 grid ，其中 1 表示陆地，0 表示水域。</p><p>岛 是由四面相连的 1 形成的一个最大组，即不会与非组内的任何其他 1 相连。grid 中 恰好存在两座岛 。</p><p>你可以将任意数量的 0 变为 1 ，以使两座岛连接起来，变成 一座岛 。</p><p>返回必须翻转的 0 的最小数目。</p><p>示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：grid = <span class="hljs-string">[[0,1,0],[0,0,0],[0,0,1]]</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>这道题实际上是求两个岛之间的最短距离，主要思路是dfs标记其中一个岛，然后用bfs进行岛屿之间最短距离的求解</p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; q;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span></span><br><span class="hljs-function">    </span>&#123;<br>        grid[x][y]=<span class="hljs-number">2</span>;<br>        q.<span class="hljs-built_in">emplace</span>(x,y);<br>        <span class="hljs-keyword">if</span>(x<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;grid[x<span class="hljs-number">-1</span>][y]==<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y,grid);<br>        <span class="hljs-keyword">if</span>(x+<span class="hljs-number">1</span>&lt;n&amp;&amp;grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,y,grid);<br>        <span class="hljs-keyword">if</span>(y<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;grid[x][y<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">dfs</span>(x,y<span class="hljs-number">-1</span>,grid);<br>        <span class="hljs-keyword">if</span>(y+<span class="hljs-number">1</span>&lt;n&amp;&amp;grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>,grid);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid,<span class="hljs-type">int</span>&amp; step)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> len=q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">while</span>(len--)<br>            &#123;<br>                <span class="hljs-type">int</span> x=q.<span class="hljs-built_in">front</span>().first;<br>                <span class="hljs-type">int</span> y=q.<span class="hljs-built_in">front</span>().second;<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(x<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;grid[x<span class="hljs-number">-1</span>][y]!=<span class="hljs-number">2</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(grid[x<span class="hljs-number">-1</span>][y]==<span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">return</span>;<br>                    q.<span class="hljs-built_in">emplace</span>(x<span class="hljs-number">-1</span>,y);<br>                    grid[x<span class="hljs-number">-1</span>][y]=<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(y<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;grid[x][y<span class="hljs-number">-1</span>]!=<span class="hljs-number">2</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(grid[x][y<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">return</span>;<br>                    q.<span class="hljs-built_in">emplace</span>(x,y<span class="hljs-number">-1</span>);<br>                    grid[x][y<span class="hljs-number">-1</span>]=<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(x+<span class="hljs-number">1</span>&lt;n&amp;&amp;grid[x+<span class="hljs-number">1</span>][y]!=<span class="hljs-number">2</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">return</span>;<br>                    q.<span class="hljs-built_in">emplace</span>(x+<span class="hljs-number">1</span>,y);<br>                    grid[x+<span class="hljs-number">1</span>][y]=<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(y+<span class="hljs-number">1</span>&lt;n&amp;&amp;grid[x][y+<span class="hljs-number">1</span>]!=<span class="hljs-number">2</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">return</span>;<br>                    q.<span class="hljs-built_in">emplace</span>(x,y+<span class="hljs-number">1</span>);<br>                    grid[x][y+<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>                &#125;<br>            &#125;<br>            ++step;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">shortestBridge</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        n=grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> step=<span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(grid[i][j]==<span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-built_in">dfs</span>(i,j,grid);<br>                    <span class="hljs-built_in">bfs</span>(grid,step);<br>                    <span class="hljs-keyword">return</span> step;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数位dp</title>
    <link href="/2022/10/23/%E6%95%B0%E4%BD%8Ddp/"/>
    <url>/2022/10/23/%E6%95%B0%E4%BD%8Ddp/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%95%B0%E4%BD%8Ddp">数位DP</a><ul><li><a href="#%E4%BE%8B%E9%A2%98">例题</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#ac%E4%BB%A3%E7%A0%81">AC代码</a></li></ul></li></ul><!-- /TOC --><h2 id="数位dp"><a class="markdownIt-Anchor" href="#数位dp"></a> 数位DP</h2><blockquote><p>一般指在限定条件下，关于每位数字出现次数的相关题目，先从入门开始吧(😢自己tcl)</p></blockquote><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p><a href="https://www.luogu.com.cn/problem/P2602">P2602 [ZJOI2010] 数字计数</a></p><p><strong>题目描述</strong></p><p>给定两个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>，求在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a,b]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span></span></span></span> 中的所有整数中，每个数码(digit)各出现了多少次。</p><p><strong>输入格式</strong></p><p>仅包含一行两个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span>，含义如上所述。</p><p><strong>输出格式</strong></p><p>包含一行十个整数，分别表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">0\sim 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a,b]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span></span></span></span> 中出现了多少次。</p><p>样例输入</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">9 </span><span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><strong>数据规模与约定</strong></p><ul><li>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，保证 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">a\le b\le10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>；</li><li>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，保证 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mo>≤</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">1\le a\le b\le 10^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>。</li></ul><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题主要就是找到各种规律</p><p>首先找到递推公式，如果有<code>i</code>位数字，那么对于<code>0～9</code>的每一个数字，出现的次数是一样的，所以不考虑前导0时有<br /><code>dp[i]=10*dp[i-1]+10^(i-1)</code><br />dp[i]表示i位的数每个数字出现的次数</p><p>对于ABCD</p><p>看A000，把这个A000看成0000～1000～2000…A000对于不考虑首位每一个式子的数字的出现个数为 <code>A*dp[3]</code>。加上首位出现也就是小于A每一个数都出现了<code>10^3</code>次，再加上，我们就把A000处理完了。</p><p>另外，首位A还出现了BCD+1次呢，也就是从A000~ABCD，这个A还出现了BCD+1次，最后减去前导0的个数，就是<code>10^(i-1)</code></p><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll a,b;<br>ll cnta[<span class="hljs-number">10</span>],cntb[<span class="hljs-number">10</span>];<br>ll dp[<span class="hljs-number">13</span>],ten[<span class="hljs-number">13</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dig</span><span class="hljs-params">(ll x,ll* cnt)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">while</span>(x)<br>&#123;<br>v[++len]=x%<span class="hljs-number">10</span>;<br>x/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len;i&gt;=<span class="hljs-number">1</span>;--i)<br>&#123;<br><span class="hljs-comment">//不算首位，每个数字出现了x*dp[i-1]次,x是当前最高位 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;++j)<br>cnt[j]+=v[i]*dp[i<span class="hljs-number">-1</span>];<br><span class="hljs-comment">//算首位，即小于x的数增加10^(i-1)个 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;v[i];++j)<br>cnt[j]+=ten[i<span class="hljs-number">-1</span>];<br><span class="hljs-comment">//首位还多出现了低位+1次</span><br>ll tmp=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">1</span>;--j)<br>&#123;<br>tmp=tmp*<span class="hljs-number">10</span>+v[j];<br>&#125;<br>cnt[v[i]]+=tmp+<span class="hljs-number">1</span>;<br><span class="hljs-comment">//减去前导0</span><br>cnt[<span class="hljs-number">0</span>]-=ten[i<span class="hljs-number">-1</span>]; <br>&#125;<br>&#125;<br><span class="hljs-comment">//dp[i]=10*dp[i-1]+10^(i-1)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ll a,b;<br>cin&gt;&gt;a&gt;&gt;b;<br>ten[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//初始化dp </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">13</span>;++i)<br>&#123;<br>dp[i]=<span class="hljs-number">10</span>*dp[i<span class="hljs-number">-1</span>]+ten[i<span class="hljs-number">-1</span>];<br>ten[i]=<span class="hljs-number">10</span>*ten[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-built_in">dig</span>(a<span class="hljs-number">-1</span>,cnta);<br><span class="hljs-built_in">dig</span>(b,cntb);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;++i)<br>&#123;<br>cout&lt;&lt;cntb[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>规划兼职工作</title>
    <link href="/2022/10/22/%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/"/>
    <url>/2022/10/22/%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C">规划兼职工作</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="规划兼职工作"><a class="markdownIt-Anchor" href="#规划兼职工作"></a> 规划兼职工作</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>你打算利用空闲时间兼职来赚些零花钱</p><p>现在有若<code>n</code>条兼职信息，一条兼职信息包含<code>a,b,c</code>3个数据</p><p><code>a</code>表示该兼职的开始时间<br /><code>b</code>表示该兼职的终止时间<br /><code>c</code>表示该兼职的收入</p><p>你在一个时间段内只能有1份兼职，也就是说上一份兼职的终止时间要满足小于等于下一份兼职的开始时间</p><p>请你算出你能获得的最大收入</p><p>输入第一行<code>n</code>，表示兼职个数<br />下面<code>n</code>行，每行3个数，表示<code>a,b,c</code></p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">10</span> <span class="hljs-number">100</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span> <span class="hljs-number">70</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">9</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">150<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题可以用动态规划解决，先将所有兼职按照终止时间升序排序，<code>dp[i]</code>表示到第<code>i</code>份能获得的最大收益</p><ul><li>当不选择第<code>i</code>份兼职，<code>dp[i]=dp[i-1]</code></li><li>当选择第<code>i</code>份兼职，<code>dp[i]=dp[k]+profit[i]</code>，<code>k</code>是满足终止时间小于等于第<code>i</code>份兼职开始时间的第<code>k</code>份兼职</li></ul><p>状态方程：<code>dp[i]=max(dp[i-1],dp[k]+profit[i])</code>;</p><p>关于<code>k</code>的确定，很多人是通过二分查找来确定<code>k</code>的，但我自己写的二分查找总是没法ac，所以就没用(tcl😢😢😢)</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e4</span>+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">e</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> e&amp; t) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> b&lt;t.b;<br>    &#125; <br>&#125;e[N];<br><span class="hljs-type">int</span> dp[N]; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>cin&gt;&gt;e[i].a&gt;&gt;e[i].b&gt;&gt;e[i].c;<br>&#125;<br><span class="hljs-built_in">sort</span>(e+<span class="hljs-number">1</span>,e+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>k=i;<br><span class="hljs-keyword">while</span>(e[k].b&gt;e[i].a)<br>--k;<br>dp[i]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>],dp[k]+e[i].c);<br>&#125;<br>cout&lt;&lt;dp[n]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第k个语法符号</title>
    <link href="/2022/10/20/%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/"/>
    <url>/2022/10/20/%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7">第k个语法符号</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%89%A9%E5%B1%95">位操作扩展</a></li></ul></li><li><a href="#%E6%89%A9%E5%B1%95%E6%B1%82%E6%9F%90%E4%B8%AA%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0">扩展：求某个数二进制表示中1的个数</a><ul><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="第k个语法符号"><a class="markdownIt-Anchor" href="#第k个语法符号"></a> 第k个语法符号</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><a href="https://leetcode.cn/problems/k-th-symbol-in-grammar/">原题链接</a><br />我们构建了一个包含 n 行( 索引从 1  开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p><p>例如，对于 n = 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。<br />给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</p><p>示例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: n = 2, k = 1</span><br><span class="hljs-section">输出: 0</span><br><span class="hljs-section">解释: </span><br><span class="hljs-section">第一行: 0 </span><br><span class="hljs-section">第二行: 01</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题大致看上去不是很难，自己的思路就是中规中矩的算，没什么亮点(😢tcl)</p><p>看了评论区的一位大佬，瞬间的折服了，时间复杂度直接<code>O(1)</code></p><p>大佬解这道题就是一句话：<strong>对K-1做奇偶校验</strong></p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>下面放上大佬的代码：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">class</span> <span class="hljs-variable">Solution</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-variable">public</span><span class="hljs-operator">:</span><br>    <span class="hljs-variable">int</span> <span class="hljs-variable">kthGrammar</span><span class="hljs-punctuation">(</span><span class="hljs-variable">int</span> <span class="hljs-built_in">N</span><span class="hljs-operator">,</span> <span class="hljs-variable">unsigned</span> <span class="hljs-variable">int</span> <span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span> <br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-built_in">K</span> <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><span class="hljs-operator">;</span><br>        <span class="hljs-built_in">K</span> <span class="hljs-operator">^=</span> <span class="hljs-built_in">K</span> <span class="hljs-operator">&gt;&gt;</span> <span class="hljs-number">1</span><span class="hljs-operator">;</span><br>        <span class="hljs-built_in">K</span> <span class="hljs-operator">^=</span> <span class="hljs-built_in">K</span> <span class="hljs-operator">&gt;&gt;</span> <span class="hljs-number">2</span><span class="hljs-operator">;</span><br>        <span class="hljs-built_in">K</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">K</span> <span class="hljs-operator">&amp;</span> <span class="hljs-number">0</span><span class="hljs-variable">x11111111</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">*</span> <span class="hljs-number">0</span><span class="hljs-variable">x11111111</span><span class="hljs-operator">;</span><br>        <span class="hljs-variable">return</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">K</span> <span class="hljs-operator">&gt;&gt;</span> <span class="hljs-number">28</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span> <span class="hljs-number">1</span><span class="hljs-operator">;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><p>第一眼看过去，我还是不会😢</p><p>于是仔细看了一番，下面我来解释一下</p><h3 id="位操作扩展"><a class="markdownIt-Anchor" href="#位操作扩展"></a> 位操作扩展</h3><p>大佬的话，翻译一下，就是求<code>K-1</code>对应的二进制数中，1的个数是奇数还是偶数，奇数返回1,偶数返回0</p><p>因为在奇偶校验中，常常需要需要判断一个数中1的个数，以确定奇偶校验位</p><p>也就是说，这道题的本质，就是判断<code>K-1</code>对应的二进制数中，1的个数是奇数还是偶数。(大佬太强了%%%)</p><p>关于代码呢，我主要参考了这篇博客  <a href="https://blog.csdn.net/u012028275/article/details/112596947"><em>博客链接</em></a>，说的非常详细，还带图示。</p><p><code>K ^= K &gt;&gt; 1;</code>，作用就是相邻两位异或，判断每两位1的个数，奇数个1则为，否则为0，结果存在相邻2位的低位</p><p><code>K ^= K &gt;&gt; 2;</code>，和上一步差不多，不过判断的是每4位的1的个数</p><p><code>K &amp; 0x11111111</code>，作用是每4位只取最低位，其他置0</p><p><code>K * 0x11111111;</code>，作用是将整个32位的1的个数奇偶性压缩到最高4位，也就是28～31位</p><p><code>(K &gt;&gt; 28) &amp; 1;</code>，移到最低4位，解出1的个数的奇偶性</p><h2 id="扩展求某个数二进制表示中1的个数"><a class="markdownIt-Anchor" href="#扩展求某个数二进制表示中1的个数"></a> 扩展：求某个数二进制表示中1的个数</h2><p>位操作还可以求某个数二进制表示中1的个数</p><p>比如现在需要求一个无符号整形数的二进制数中1的个数</p><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>其实和奇偶校验有点关系，求每2个数、每4个数、每8个数、每16个数的1的个数相加就好了</p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-attr">std</span><span class="hljs-punctuation">;</span><br>int main()<br><span class="hljs-punctuation">&#123;</span><br>int n<span class="hljs-punctuation">;</span><br>cin&gt;&gt;n<span class="hljs-punctuation">;</span><br><span class="hljs-comment">//int n=0b0111100110011000000000000000001; </span><br>n=((n<span class="hljs-variable">&amp;0xaaaaaaaa</span>)&gt;&gt;<span class="hljs-number">1</span>)+(n<span class="hljs-variable">&amp;0x55555555</span>)<span class="hljs-punctuation">;</span> <br>n=((n<span class="hljs-variable">&amp;0xcccccccc</span>)&gt;&gt;<span class="hljs-number">2</span>)+(n<span class="hljs-variable">&amp;0x33333333</span>)<span class="hljs-punctuation">;</span><br>n=((n<span class="hljs-variable">&amp;0xf0f0f0f0</span>)&gt;&gt;<span class="hljs-number">4</span>)+(n<span class="hljs-variable">&amp;0x0f0f0f0f</span>)<span class="hljs-punctuation">;</span><br>n=((n<span class="hljs-variable">&amp;0xff00ff00</span>)&gt;&gt;<span class="hljs-number">8</span>)+(n<span class="hljs-variable">&amp;0x00ff00ff</span>)<span class="hljs-punctuation">;</span><br>n=((n<span class="hljs-variable">&amp;0xffff0000</span>)&gt;&gt;<span class="hljs-number">16</span>)+(n<span class="hljs-variable">&amp;0x0000ffff</span>)<span class="hljs-punctuation">;</span><br>cout<span class="hljs-params">&lt;&lt;n&lt;&lt;endl;</span><br><span class="hljs-params">return <span class="hljs-number">0</span>;</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使序列递增的最小交换次数</title>
    <link href="/2022/10/18/%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/"/>
    <url>/2022/10/18/%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0">使序列递增的最小交换次数</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="使序列递增的最小交换次数"><a class="markdownIt-Anchor" href="#使序列递增的最小交换次数"></a> 使序列递增的最小交换次数</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><a href="https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/">原题</a></p><p>我们有两个长度相等且不为空的整型数组 nums1 和 nums2 。在一次操作中，我们可以交换 nums1[i] 和 nums2[i]的元素。</p><p>例如，如果 nums1 = [1,2,3,8] ， nums2 =[5,6,7,4] ，你可以交换 i = 3 处的元素，得到 nums1 =[1,2,3,4] 和 nums2 =[5,6,7,8] 。<br />返回 使 nums1 和 nums2 严格递增 所需操作的最小次数 。</p><p>数组 arr 严格递增 且  arr[0] &lt; arr[1] &lt; arr[2] &lt; … &lt; arr[arr.length - 1] 。<br />input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p><code>dp[i][0]</code>表示不交换 <code>i</code> 处元素时满足条件的最小操作次数，<code>dp[i][1]</code>表示交换 <code>i</code> 处元素时满足条件的最小操作次数</p><p>下面要分类讨论：</p><ul><li>当nums1和nums都递增，且在<code>i</code>处交换后也都递增，那么在<code>i</code>处可换可不换</li><li>当nums1和nums都递增，但在<code>i</code>处交换后不递增，那么如果在<code>i</code>处交换，在<code>i-1</code>处也要交换</li><li>当nums1或nums2不递增，如果在<code>i</code>处交换，那么<code>i-1</code>处不交换，如果<code>i-1</code>处交换，<code>i</code>处不交换</li></ul><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int N=1e5;<br>int a<span class="hljs-comment">[N]</span>;<br>int b<span class="hljs-comment">[N]</span>;<br>int dp<span class="hljs-comment">[N]</span><span class="hljs-comment">[2]</span>;<br>int main()<br>&#123;<br>int n;<br>cin&gt;&gt;n;<br>for(int i=0;i&lt;n;++i)<br>cin&gt;&gt;a<span class="hljs-comment">[i]</span>;<br>for(int i=0;i&lt;n;++i)<br>cin&gt;&gt;b<span class="hljs-comment">[i]</span>;<br>dp<span class="hljs-comment">[0]</span><span class="hljs-comment">[1]</span>=1;<br>for(int i=1;i&lt;n;++i)<br>&#123;<br>if((a<span class="hljs-comment">[i-1]</span>&lt;a<span class="hljs-comment">[i]</span>&amp;&amp;b<span class="hljs-comment">[i-1]</span>&lt;b<span class="hljs-comment">[i]</span>)&amp;&amp;(a<span class="hljs-comment">[i-1]</span>&lt;b<span class="hljs-comment">[i]</span>&amp;&amp;b<span class="hljs-comment">[i-1]</span>&lt;a<span class="hljs-comment">[i]</span>))<br>&#123;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=min(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>);<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>+1;<br>&#125;<br>else if(a<span class="hljs-comment">[i-1]</span>&lt;a<span class="hljs-comment">[i]</span>&amp;&amp;b<span class="hljs-comment">[i-1]</span>&lt;b<span class="hljs-comment">[i]</span>)<br>&#123;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>+1;<br>&#125;<br>else<br>&#123;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>+1;<br>&#125;<br>&#125;<br>cout&lt;&lt;min(dp<span class="hljs-comment">[n-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[n-1]</span><span class="hljs-comment">[1]</span>);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>不同的子序列</title>
    <link href="/2022/10/14/%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2022/10/14/%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97">不同的子序列</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="不同的子序列"><a class="markdownIt-Anchor" href="#不同的子序列"></a> 不同的子序列</h2><p><a href="https://leetcode.cn/problems/distinct-subsequences-ii/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定一个字符串 s，计算 s 的 不同非空子序列 的个数。因为结果可能很大，所以返回答案需要对 10^9 + 7 取余 。</p><p>字符串的 子序列 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串。</p><p>例如，“ace” 是 “abcde” 的一个子序列，但 “aec” 不是。</p><p>示例：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;aba&quot;</span><br>输出：<span class="hljs-number">6</span><br>解释：<span class="hljs-number">6</span> 个不同的子序列分别是 <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;ba&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span> 以及 <span class="hljs-string">&quot;aba&quot;</span>。<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这是一道动态规划的题目，自己没想出来，看了题解才理解<br />核心的思想就是，<em>以当前字符结尾的不同子序列的个数=之前部分的个数+新增加的个数-重复序列个数</em><br />其中，需要一个数组<code>recount[]</code>来记录每个字符带来的增加量，当某字符多次出现时，它带来的重复量就等于<code>recount[i]</code></p><p>比如：对于序列 abcb</p><p>a : “”, a<br /><strong>newcnt=1</strong></p><p>ab : “”, a, b, ab<br /><strong>newcnt=2</strong></p><p>abc : “”,a, b, ab, c, ac, bc, cc<br /><strong>newcnt=4</strong></p><p>abcb: “”,a, b, ab, c, ac, bc, cc, <s>b</s>, <s>ab</s>, bb, abb, cb, acb, bcb, ccb<br /><strong>newcnt=8, recount[‘b’]=2</strong></p><p>根据以上例子，可得到下面的结论：</p><ul><li>newcnt=pre_cnt(上一个字符的个数)</li><li>recount[x]=newcnt_x(字符x上一次出现带来的新增个数)</li></ul><p>为了计算，在子集前面加了空串 <code>“”</code>，所以初始个数为1</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">int</span> distinctSubseqII(string s) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">mod</span>=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>        <span class="hljs-built_in">int</span> len=s.size();<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; recount(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> newcnt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            newcnt=ans;<br>            ans=((ans+newcnt)%<span class="hljs-keyword">mod</span>-recount[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]+<span class="hljs-keyword">mod</span>)%<span class="hljs-keyword">mod</span>;<br>            recount[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]=newcnt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>优势洗牌</title>
    <link href="/2022/10/09/%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/"/>
    <url>/2022/10/09/%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C">优势洗牌</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="优势洗牌"><a class="markdownIt-Anchor" href="#优势洗牌"></a> 优势洗牌</h2><p><a href="https://leetcode.cn/problems/advantage-shuffle/">题目链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定两个大小相等的数组 nums1 和 nums2，nums1 相对于 nums2 的优势可以用满足 nums1[i] &gt; nums2[i] 的索引 i 的数目来描述。</p><p>返回 nums1 的任意排列，使其相对于 nums2 的优势最大化。</p><p>示例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums1 = <span class="hljs-string">[12,24,8,32]</span>, nums2 = <span class="hljs-string">[13,25,32,11]</span><br>输出：<span class="hljs-string">[24,32,8,12]</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><blockquote><p>题目有一个隐含条件是，当nums1中的某个数不大于于nums2的任意数时，该数对应nums2的较大的数。具体步骤如下，先将两个数组的下标根据数字的大小升序排序，然后当nums1中的数大于nums2的数，加入答案数组中，否则找到对应nums2中的较大数的对应位置，根据该位置加入答案数组中</p></blockquote><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>public:<br>    vector&lt;<span class="hljs-built_in">int</span>&gt; advantage<span class="hljs-constructor">Count(<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt;&amp; <span class="hljs-params">nums1</span>, <span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt;&amp; <span class="hljs-params">nums2</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> len = nums1.size<span class="hljs-literal">()</span>;<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; ans(len),a(len),b(len);<br>        iota(a.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,a.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>,<span class="hljs-number">0</span>);<br>        iota(b.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,b.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>,<span class="hljs-number">0</span>);<br>        sort(a.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,a.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>,<span class="hljs-literal">[&amp;]</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j)&#123;<br>            return nums1<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>&lt;nums1<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>        &#125;);<br>        sort(b.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,b.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>,<span class="hljs-literal">[&amp;]</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j)&#123;<br>            return nums2<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>&lt;nums2<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>        &#125;);<br>        <span class="hljs-built_in">int</span> l=<span class="hljs-number">0</span>,r=len-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums1<span class="hljs-literal">[<span class="hljs-identifier">a</span>[<span class="hljs-identifier">i</span>]</span>]&gt;nums2<span class="hljs-literal">[<span class="hljs-identifier">b</span>[<span class="hljs-identifier">l</span>]</span>])<br>            &#123;<br>                ans<span class="hljs-literal">[<span class="hljs-identifier">b</span>[<span class="hljs-identifier">l</span>]</span>]=nums1<span class="hljs-literal">[<span class="hljs-identifier">a</span>[<span class="hljs-identifier">i</span>]</span>];<br>                ++l;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans<span class="hljs-literal">[<span class="hljs-identifier">b</span>[<span class="hljs-identifier">r</span>]</span>]=nums1<span class="hljs-literal">[<span class="hljs-identifier">a</span>[<span class="hljs-identifier">i</span>]</span>];<br>                --r;<br>            &#125;<br><br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>括号问题</title>
    <link href="/2022/10/07/%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/07/%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D">括号匹配</a></li><li><a href="#%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0">使括号有效的最少添加</a></li><li><a href="#%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90">括号生成</a></li><li><a href="#%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0">括号的分数</a></li></ul><!-- /TOC --><blockquote><p>关于括号多多少少会用到栈，下面举几个简单例子</p></blockquote><h3 id="括号匹配"><a class="markdownIt-Anchor" href="#括号匹配"></a> 括号匹配</h3><p><a href="https://leetcode.cn/problems/valid-parentheses/">题目链接</a></p><p><strong>题目描述</strong></p><p>给定一个只包括 ‘(’，‘)’，‘{’，‘}’，‘[’，‘]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ul><p>example：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;()&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">bool</span> isValid(<span class="hljs-keyword">string</span> s) &#123;<br>        <span class="hljs-keyword">int</span> len=s.size();<br>        stack&lt;<span class="hljs-keyword">char</span>&gt; st;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-keyword">empty</span>()&amp;&amp;(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>||s[i]==<span class="hljs-string">&#x27;]&#x27;</span>||s[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-keyword">empty</span>())<br>                st.push(s[i]);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;(&#x27;</span>||s[i]==<span class="hljs-string">&#x27;[&#x27;</span>||s[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>            &#123;<br>                <span class="hljs-comment">// if(s[i]&lt;=st.top())</span><br>                    st.push(s[i]);<br>                <span class="hljs-comment">// else</span><br>                <span class="hljs-comment">//     return false;</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>||s[i]==<span class="hljs-string">&#x27;]&#x27;</span>||s[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(st.top()==s[i]<span class="hljs-number">-1</span>||st.top()==s[i]<span class="hljs-number">-2</span>)<br>                    st.pop();<br>                <span class="hljs-keyword">else</span> <br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!st.<span class="hljs-keyword">empty</span>())<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="使括号有效的最少添加"><a class="markdownIt-Anchor" href="#使括号有效的最少添加"></a> 使括号有效的最少添加</h3><p><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/">题目链接</a></p><p><strong>题目描述</strong></p><p>只有满足下面几点之一，括号字符串才是有效的：</p><p>它是一个空字符串，或者<br />它可以被写成 AB （A 与 B 连接）, 其中 A 和 B 都是有效字符串，或者<br />它可以被写作 (A)，其中 A 是有效字符串。<br />给定一个括号字符串 s ，移动N次，你就可以在字符串的任何位置插入一个括号。</p><p>例如，如果 s = “()))” ，你可以插入一个开始括号为 “(()))” 或结束括号为 “())))” 。<br />返回 为使结果字符串 s 有效而必须添加的最少括号数。</p><p>example：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;())&quot;</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> Solution &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> minAddToMakeValid(string s) &#123;<br>        <span class="hljs-keyword">int</span> len=s.<span class="hljs-keyword">size</span>();<br>        stack&lt;<span class="hljs-keyword">char</span>&gt; st;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span>&amp; c:s)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                st.<span class="hljs-keyword">push</span>(c);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(st.empty())<br>                    ++ans;<br>                <span class="hljs-keyword">else</span><br>                    st.<span class="hljs-keyword">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans+st.<span class="hljs-keyword">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="括号生成"><a class="markdownIt-Anchor" href="#括号生成"></a> 括号生成</h3><p><a href="https://leetcode.cn/problems/generate-parentheses/">题目链接</a></p><p><strong>题目描述</strong><br />数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且有效的括号组合。</p><p>example：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">3</span><br>输出：[<span class="hljs-string">&quot;((()))&quot;</span>,<span class="hljs-string">&quot;(()())&quot;</span>,<span class="hljs-string">&quot;(())()&quot;</span>,<span class="hljs-string">&quot;()(())&quot;</span>,<span class="hljs-string">&quot;()()()&quot;</span>]<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bk</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> &amp;tmp,vector&lt;<span class="hljs-built_in">string</span>&gt;&amp; ans,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> n</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(tmp.size()==<span class="hljs-number">2</span>*n)<br>        &#123;<br>            ans.push_back(tmp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l&lt;n)<br>        &#123;<br>            tmp.push_back(<span class="hljs-string">&#x27;(&#x27;</span>);<br>            bk(tmp,ans,l+<span class="hljs-number">1</span>,r,n);<br>            tmp.pop_back();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r&lt;l)<br>        &#123;<br>            tmp.push_back(<span class="hljs-string">&#x27;)&#x27;</span>);<br>            bk(tmp,ans,l,r+<span class="hljs-number">1</span>,n);<br>            tmp.pop_back();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">generateParenthesis</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span> &#123;<br>        <span class="hljs-built_in">string</span> tmp;<br>        vector&lt;<span class="hljs-built_in">string</span>&gt; ans;<br>        bk(tmp,ans,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="括号的分数"><a class="markdownIt-Anchor" href="#括号的分数"></a> 括号的分数</h3><p><a href="https://leetcode.cn/problems/score-of-parentheses/">题目链接</a></p><p><strong>题目描述</strong></p><p>给定一个平衡括号字符串 S，按下述规则计算该字符串的分数：</p><ul><li>() 得 1 分。```A 是平衡括号字符串。</li></ul><p>样例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">输入： &quot;(()(()))&quot;<br>输出： <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>思路</strong></p><p>因为(()(())) = (()) + ((()))，所以记录层数就好<br />出现 ‘(’ 代表层数+1 ， 出现 ‘)’ 代表层数-1<br />当<code>s[i]==')'&amp;&amp;s[i-1]=='('</code>,该部分得分为 2^(层数-1) ,更新一下总分数</p><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">scoreOfParentheses</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> d=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> len=s.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                ++d;<br>            <span class="hljs-keyword">else</span><br>                --d;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>&amp;&amp;s[i<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                ans+=<span class="hljs-number">1</span>&lt;&lt;d;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LR字符串</title>
    <link href="/2022/10/02/LR%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/10/02/LR%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%9C%A8lr%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6">在LR字符串中交换相邻字符</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="在lr字符串中交换相邻字符"><a class="markdownIt-Anchor" href="#在lr字符串中交换相邻字符"></a> 在LR字符串中交换相邻字符</h2><p><a href="https://leetcode.cn/problems/swap-adjacent-in-lr-string/">原题链接</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如&quot;RXXLRXRXL&quot;）中进行移动操作。一次移动操作指用一个&quot;LX&quot;替换一个&quot;XL&quot;，或者用一个&quot;XR&quot;替换一个&quot;RX&quot;。现给定起始字符串start和结束字符串end，请编写代码，当且仅当存在一系列移动操作使得start可以转换成end时， 返回True。</p><p>input:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">start</span> = <span class="hljs-string">&quot;RXXLRXRXL&quot;</span>, end = <span class="hljs-string">&quot;XRLXXRRLX&quot;</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>用 i 和 j 分别表示 start 和 end 中的下标，跳过所有的<code>X</code>，当<code>start[i]!=start[j]</code>,直接返回false,当<code>start[i]==start[j]</code>，如果字符是<code>L</code>,应满足<code>j&lt;=i</code>,如果字符是<code>R</code>,应满足<code>i&lt;=j</code>，否则返回<code>false</code></p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canTransform</span><span class="hljs-params">(string start, string end)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=start.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;j&lt;n)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;start[i]==<span class="hljs-string">&#x27;X&#x27;</span>)<br>                ++i;<br>            <span class="hljs-keyword">while</span>(j&lt;n&amp;&amp;end[j]==<span class="hljs-string">&#x27;X&#x27;</span>)<br>                ++j;<br>            <span class="hljs-keyword">if</span>(i&lt;n&amp;&amp;j&lt;n)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(start[i]!=end[j])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(start[i]==<span class="hljs-string">&#x27;L&#x27;</span>&amp;&amp;i&lt;j)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">if</span>(start[i]==<span class="hljs-string">&#x27;R&#x27;</span>&amp;&amp;i&gt;j)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                ++i;<br>                ++j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(i&lt;n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(start[i]!=<span class="hljs-string">&#x27;X&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            ++i;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(j&lt;n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(end[j]!=<span class="hljs-string">&#x27;X&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            ++j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>非零段划分</title>
    <link href="/2022/09/29/%E9%9D%9E%E9%9B%B6%E6%AE%B5%E5%88%92%E5%88%86/"/>
    <url>/2022/09/29/%E9%9D%9E%E9%9B%B6%E6%AE%B5%E5%88%92%E5%88%86/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E9%9D%9E%E9%9B%B6%E6%AE%B5%E5%88%92%E5%88%86">非零段划分</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="非零段划分"><a class="markdownIt-Anchor" href="#非零段划分"></a> 非零段划分</h2><p>题目来自CCF 201909-2</p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>A1,A2,⋯,An 是一个由 n 个自然数组成的数组。我们称其中 Ai,⋯,Aj 是一个非零段，当且仅当以下条件同时满足：</p><ul><li>1≤i≤j≤n；</li><li>对于任意的整数 k，若 i≤k≤j，则 Ak&gt;0；</li><li>i=1 或 Ai−1=0；</li><li>j=n 或 Aj+1=0。</li></ul><p>下面展示了几个简单的例子：</p><p>A=[3,1,2,0,0,2,0,4,5,0,2] 中的 4 个非零段依次为 [3,1,2]、[2]、[4,5] 和 [2]；<br />A=[2,3,1,4,5] 仅有 1 个非零段；<br />A=[0,0,0] 则不含非零段（即非零段个数为 0）。</p><p>现在我们可以对数组 A 进行如下操作：任选一个正整数 p，然后将 A 中所有小于 p 的数都变为 0。试选取一个合适的 p，使得数组 A 中的非零段个数达到最大。若输入的 A 所含非零段数已达最大值，可取 p=1，即不对 A 做任何修改。</p><p>输入：<br />从标准输入读入数据。</p><p>输入的第一行包含一个正整数 n。</p><p>输入的第二行包含 n 个用空格分隔的自然数 A1,A2,⋯,An。</p><p>输出：</p><p>输出到标准输出。</p><p>仅输出一个整数，表示对数组 A 进行操作后，其非零段个数能达到的最大值。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>差分与前缀和<br />如果 <code>a[i]&gt;a[i−1]</code>，意味着当p取到 <code>a[i−1]+1 </code>到 <code>a[i]</code>之间的值时，非零段+1<br />数组<code>b[i]</code>表示<code>p</code>从<code>a[i-1]</code>到<code>a[i]</code>，非零段数量的变化<br />从正向前缀和中找出最大值就是所要的结果</p><p>差分前缀和之前练习过，但这道题真没想到还能这样，tcl😢，看了别人的思路，实在是太妙了啊😢😢😢😢</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e5</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">1e4</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> b[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>cin&gt;&gt;a[i];<br><span class="hljs-keyword">if</span>(a[i]&gt;a[i<span class="hljs-number">-1</span>])<br>&#123;<br><span class="hljs-comment">//a[i-1]~a[i]的非零段数加1 </span><br>++b[a[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>];<br>--b[a[i]+<span class="hljs-number">1</span>];<br>&#125; <br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=M;++i)<br>&#123;<br>sum+=b[i];<br>ans=<span class="hljs-built_in">max</span>(ans,sum);<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第k个数</title>
    <link href="/2022/09/29/%E7%AC%ACk%E4%B8%AA%E6%95%B0/"/>
    <url>/2022/09/29/%E7%AC%ACk%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%AC%ACk%E4%B8%AA%E6%95%B0">第k个数</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#%E7%AC%AC-n-%E4%B8%AA%E7%A5%9E%E5%A5%87%E6%95%B0%E5%AD%97">第 N 个神奇数字</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li></ul></li></ul><!-- /TOC --><h2 id="第k个数"><a class="markdownIt-Anchor" href="#第k个数"></a> 第k个数</h2><blockquote><p>此题不是特别难，但是第一眼看过去没有什么太好的想法，看了眼题解觉得思路很好，就记录下来<br /><s>顺便水一个博客😄</s></p></blockquote><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。</p><p>输入k，输出符合条件的第k个数</p><p>input:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>建立一个数组<code>dp[]</code>，<code>dp[i]</code>表示第<code>i</code>个数什么，然后三个变量a,b,c表示3、5、7的指针</p><p>状态方程：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">int <span class="hljs-attribute">numa</span>=dp[a]<span class="hljs-number">*3</span>,<span class="hljs-attribute">numb</span>=dp[b]<span class="hljs-number">*5</span>,<span class="hljs-attribute">numc</span>=dp[c]<span class="hljs-number">*7</span>;<br>dp[i]=min(min(numa,numb),numc);<br></code></pre></td></tr></table></figure><p>然后如果<code>dp[i]</code>与任何一个num相等，对应的指针加1</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include&lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>const int <span class="hljs-attribute">N</span>=1e3;<br>int dp[N];<br>int main()<br>&#123;<br>int n;<br>cin&gt;&gt;n;<br>int <span class="hljs-attribute">a</span>=1,b=1,c=1;<br>dp[1]=1;<br><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=2;i&lt;=n;++i)<br>&#123;<br>int <span class="hljs-attribute">numa</span>=dp[a]<span class="hljs-number">*3</span>,<span class="hljs-attribute">numb</span>=dp[b]<span class="hljs-number">*5</span>,<span class="hljs-attribute">numc</span>=dp[c]<span class="hljs-number">*7</span>;<br>dp[i]=min(min(numa,numb),numc);<br><span class="hljs-keyword">if</span>(dp[i]==numa)<br>++a;<br><span class="hljs-keyword">if</span>(dp[i]==numb)<br>++b;<br><span class="hljs-keyword">if</span>(dp[i]==numc)<br>++c;<br>&#125;<br>cout&lt;&lt;dp[n]&lt;&lt;endl;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第-n-个神奇数字"><a class="markdownIt-Anchor" href="#第-n-个神奇数字"></a> 第 N 个神奇数字</h2><p><a href="https://leetcode.cn/problems/nth-magical-number/description/">原题</a></p><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p>一个正整数如果能被 a 或 b 整除，那么它是神奇的。</p><p>给定三个整数 n , a , b ，返回第 n 个神奇的数字。因为答案可能很大，所以返回答案 对 109 + 7 取模 后的值。</p><p>示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：n = <span class="hljs-number">4</span>, <span class="hljs-selector-tag">a</span> = <span class="hljs-number">2</span>, <span class="hljs-selector-tag">b</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>用到了容斥原理，对于一个数x，他包含<code>x/a</code>个数能被a整除，包含<code>x/b</code>个数能被b整除,若a和b最小公倍数为c，那么x包含<code>x/c</code>个数能被a和b同时整除，因此，能被a或b整除的数的个数为：<code>x/a+x/b-x/c</code></p><p>根据以上规律，使用二分查找即可得出答案。</p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">mod</span>=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">mod</span>=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>    <span class="hljs-built_in">int</span> gcd(<span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b)<br>            <span class="hljs-keyword">return</span> gcd(b,a%b);<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-built_in">int</span> nthMagicalNumber(<span class="hljs-built_in">int</span> n, <span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b) &#123;<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> l=min(a,b);<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> r=(<span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span>)n*l;<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> c=a*b/gcd(a,b);<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> mid,t;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)<br>        &#123;<br>            mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>            t=mid/a+mid/b-mid/c;<br>            <span class="hljs-keyword">if</span>(t&lt;n)<br>                l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                r=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (r+<span class="hljs-number">1</span>)%<span class="hljs-keyword">mod</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>素数筛</title>
    <link href="/2022/09/25/%E7%B4%A0%E6%95%B0%E7%AD%9B/"/>
    <url>/2022/09/25/%E7%B4%A0%E6%95%B0%E7%AD%9B/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%9A%B4%E5%8A%9B">暴力</a></li><li><a href="#%E5%9F%83%E6%B0%8F%E7%AD%9B">埃氏筛</a></li><li><a href="#%E6%AC%A7%E6%8B%89%E7%AD%9B">欧拉筛</a></li><li><a href="#%E4%BE%8B%E9%A2%98">例题</a></li></ul><!-- /TOC --><p><strong>素数筛</strong></p><blockquote><p>找到1到n区间里的所有素数,通常有以下几种方法</p></blockquote><h3 id="暴力"><a class="markdownIt-Anchor" href="#暴力"></a> 暴力</h3><p>最基本的方法，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h3 id="埃氏筛"><a class="markdownIt-Anchor" href="#埃氏筛"></a> 埃氏筛</h3><p>主要思想是通过一个<code>bool</code>类型的数组记录某数是否为素数，思路不难，直接看代码就行</p><p><strong>代码</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)<br>        isPrime[i] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//假设2-n都是素数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)   <span class="hljs-comment">//遍历2-n里面所有数</span><br>        <span class="hljs-keyword">if</span>(isPrime[i])      <span class="hljs-comment">//如果i是素数</span><br>            <span class="hljs-comment">//i是素数的话，那么i的倍数肯定就不是合适</span><br>            <span class="hljs-comment">//即 i*2，i*3 .....i*j肯定不是素数，注意边界i*j&lt;=n</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;i*j&lt;=n;++j)<br>                <span class="hljs-comment">//n以内，且是i的倍数的数肯定不是素数，设为false</span><br>                isPrime[i*j] = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h3 id="欧拉筛"><a class="markdownIt-Anchor" href="#欧拉筛"></a> 欧拉筛</h3><p>在埃尼筛的基础上加以改进，需要维护一个<code>vis[]</code>数组判断是否被标记过，然后<code>prime[]</code>数组记录第几个素数是什么，比较好理解，看一道例题就行</p><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p><strong>题目描述</strong></p><p>Output the k-th prime number.</p><p>input:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">17<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>;<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> prime[<span class="hljs-number">10000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(cnt==k)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-literal">false</span>)<br>            prime[++cnt]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=N;++j)<br>        &#123;<br>            vis[i*prime[j]]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;prime[k]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>相似度为k的字符串</title>
    <link href="/2022/09/23/%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BAk%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/09/23/%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BAk%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%BAk%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">相似度为k的字符串</a></li></ul><!-- /TOC --><h3 id="相似度为k的字符串"><a class="markdownIt-Anchor" href="#相似度为k的字符串"></a> 相似度为k的字符串</h3><p><a href="https://leetcode.cn/problems/k-similar-strings/">题目链接</a></p><p><strong>题目描述</strong></p><p>对于某些非负整数 <code>k</code> ，如果交换 <code>s1</code> 中两个字母的位置恰好 <code>k</code> 次，能够使结果字符串等于 <code>s2</code> ，则认为字符串 <code>s1</code> 和 <code>s2</code> 的 相似度为<code> k</code> 。</p><p>给你两个字母异位词 <code>s1 </code>和 <code>s2</code> ，返回 <code>s1 </code>和<code>s2</code>的相似度<code>k</code>的最小值。</p><p><strong>思路</strong></p><blockquote><p>主要是BFS+剪枝，当s1和s2在某个位置出现s1[i] != s2[i]时，将s1的指针后移，找到j使得s1[j] == s2[i],然后交换s1[i]和s1[j]，将字符串和位置加入队列中。同时要注意剪枝，当s1[j]==s2[j]时说明本来就能匹配，所以无需交换，当交换后的字符串在之前已经出现时，无需再次加入队列。</p></blockquote><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> queue&lt;pair&lt;string,<span class="hljs-type">int</span>&gt;&gt; qpi;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_set&lt;string&gt; vis;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kSimilarity</span><span class="hljs-params">(string s1, string s2)</span> </span>&#123;<br>        qpi q;<br>        <span class="hljs-type">int</span> len=s1.<span class="hljs-built_in">size</span>();<br>        q.<span class="hljs-built_in">push</span>(&#123;s1,<span class="hljs-number">0</span>&#125;);<br>        vis.<span class="hljs-built_in">insert</span>(s1);<br>        string ts;<br>        <span class="hljs-type">int</span> idx;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;;++ans)<br>        &#123;<br>            <span class="hljs-type">int</span> sz=q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">while</span>(sz--)<br>            &#123;<br>                pair&lt;string,<span class="hljs-type">int</span>&gt; t=q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                ts=t.first;<br>                idx=t.second;<br>                <span class="hljs-keyword">if</span>(ts==s2)<br>                    <span class="hljs-keyword">return</span> ans;<br>                <span class="hljs-keyword">while</span>(idx&lt;len&amp;&amp;ts[idx]==s2[idx])<br>                    ++idx;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=idx+<span class="hljs-number">1</span>;i&lt;len;++i)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(ts[i]!=s2[i]&amp;&amp;ts[i]==s2[idx])<br>                    &#123;<br>                        <span class="hljs-built_in">swap</span>(ts[idx],ts[i]);<br>                        <span class="hljs-keyword">if</span>(!vis.<span class="hljs-built_in">count</span>(ts))<br>                        &#123;<br>                            q.<span class="hljs-built_in">push</span>(&#123;ts,idx+<span class="hljs-number">1</span>&#125;);<br>                            vis.<span class="hljs-built_in">insert</span>(ts);<br>                        &#125;<br>                        <span class="hljs-built_in">swap</span>(ts[idx],ts[i]);<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="/2022/09/20/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <url>/2022/09/20/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9">数组中的逆序对</a></li></ul><!-- /TOC --><h3 id="数组中的逆序对"><a class="markdownIt-Anchor" href="#数组中的逆序对"></a> 数组中的逆序对</h3><p><strong>题目描述</strong></p><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P mod 1000000007</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><p><strong>思路</strong></p><p>这道题可以用归并排序的思路来解决</p><p>假设我们有两个已排序的序列等待合并，分别是L={8,12,16,22,100} 和 R={9,26,55,64,91}。一开始我们用指针 lPtr = 0 指向 L 的首部，rPtr = 0 指向 R 的头部。记已经合并好的部分为 M。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">L = <span class="hljs-comment">[8, 12, 16, 22, 100]</span>   R = <span class="hljs-comment">[9, 26, 55, 64, 91]</span>  M = <span class="hljs-comment">[]</span><br>     |                          |<br>   lPtr                       rPtr<br></code></pre></td></tr></table></figure><p>发现 lPtr 指向的元素小于 rPtr 指向的元素，于是把 lPtr 指向的元素放入答案，并把 lPtr 后移一位。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">L = <span class="hljs-comment">[8, 12, 16, 22, 100]</span>   R = <span class="hljs-comment">[9, 26, 55, 64, 91]</span>  M = <span class="hljs-comment">[8]</span><br>        |                       |<br>      lPtr                     rPtr<br><br></code></pre></td></tr></table></figure><p>这个时候我们把左边的 8 加入了答案，我们发现右边没有数比 8 小，所以 8 对逆序对总数的「贡献」为 0。</p><p>接着我们继续合并，把 9 加入了答案，此时 lPtr 指向 12，rPtr 指向 26。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">L = <span class="hljs-comment">[8, 12, 16, 22, 100]</span>   R = <span class="hljs-comment">[9, 26, 55, 64, 91]</span>  M = <span class="hljs-comment">[8, 9]</span><br>        |                          |<br>       lPtr                       rPtr<br><br></code></pre></td></tr></table></figure><p>此时12对逆序数贡献为1，以此类推。</p><p><strong>代码</strong>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include&lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>int nums[100005];<br>int cnt;<br>int <span class="hljs-attribute">mod</span>=1e9+7;<br>void merge(int l,int m,int r)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-attribute">l</span>==r)<br>        return ;<br>    int i,j;<br>    int <span class="hljs-attribute">n1</span>=m-l+1;<br>    int <span class="hljs-attribute">n2</span>=r-m;<br>    vector&lt;int&gt; al(n1);<br>    vector&lt;int&gt; ar(n2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-attribute">i</span>=0;i&lt;n1;++i)<br>        al[i]=nums[l+i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-attribute">i</span>=0;i&lt;n2;++i)<br>        ar[i]=nums[m+1+i];<br>    <span class="hljs-attribute">i</span>=0;<br>    <span class="hljs-attribute">j</span>=0;<br>    int <span class="hljs-attribute">k</span>=l;<br>    <span class="hljs-keyword">while</span>(i&lt;n1&amp;&amp;j&lt;n2)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(al[i]&lt;=ar[j])<br>        &#123;<br>            nums[k]=al[i];<br>            ++k;<br>            ++i;<br>            cnt+=j;<br>            <span class="hljs-attribute">cnt</span>=cnt%mod;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            nums[k]=ar[j];<br>            ++k;<br>            ++j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;n1)<br>    &#123;<br>        nums[k++]=al[i];<br>        cnt+=j;<br>        <span class="hljs-attribute">cnt</span>=cnt%mod;<br>        ++i;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(j&lt;n2)<br>    &#123;<br>        nums[k++]=ar[j];<br>        ++j;<br>    &#125;    <br>&#125;<br>void mergesort(int l,int r)<br>&#123;<br>    <span class="hljs-keyword">if</span>(l&lt;r)<br>    &#123;<br>        int <span class="hljs-attribute">m</span>=l+r&gt;&gt;1;<br>        mergesort(l,m);<br>        mergesort(m+1,r);<br>        merge(l,m,r);<br>    &#125;<br>&#125;<br>int main() <br>&#123;<br>int n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;n;++i)<br>cin&gt;&gt;nums[i];<br>    mergesort(0,n-1);<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最长达标子串</title>
    <link href="/2022/09/17/%E6%9C%80%E9%95%BF%E8%BE%BE%E6%A0%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2022/09/17/%E6%9C%80%E9%95%BF%E8%BE%BE%E6%A0%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%9C%80%E9%95%BF%E8%BE%BE%E6%A0%87%E5%AD%90%E4%B8%B2">最长达标子串</a></li><li><a href="#%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%BB%83%E4%B9%A0">位操作练习</a></li></ul><!-- /TOC --><h3 id="最长达标子串"><a class="markdownIt-Anchor" href="#最长达标子串"></a> 最长达标子串</h3><p><strong>题目描述</strong></p><p>给定一个字符串<code>s</code>，其中都是英文小写字母，如果<code>s</code>的子串中含有的每种字符都是偶数个，那么这样的子串就是达标子串，输出达标子串的最大长度。</p><p>input:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">aababcdcdc</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">8<br></code></pre></td></tr></table></figure><p><strong>思路</strong></p><p>用一个数组记录当前的状态，<code>1</code>表示当前字母出现了奇数次，<code>0</code>表示当前字母出现了偶数次</p><p>例如：如果<code>s</code>一共有四个字母<code>abcd</code>，子串<code>a</code>的状态可记为<code>1000</code>，子串<code>aab</code>记为<code>0100</code><br />,子串<code>abacd</code>记为<code>0111</code></p><p>可以得出这样的结论：如果<code>i</code>处的状态与<code>i+k</code>处的状态相同，则<code>i~i+k</code>之间的子串中的每个字母都出现了偶数次</p><p>原理就是出现偶数次，不会改变某个字母的状态</p><p>所以，只需要记录每个状态序列最早出现的位置，然后当他再次出现时，最晚出现的位置减去最早出现的位置就是最长的达标子串。</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s;<br>cin&gt;&gt;s;<br><span class="hljs-type">int</span> len=s.<span class="hljs-built_in">size</span>();<br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-type">int</span> status=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>mp[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<span class="hljs-comment">//初始化-1位置为0...00 32个0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>&#123;<br><span class="hljs-comment">//假设当前s[i]是&#x27;c&#x27;,那么将1左移2位，然后和status异或</span><br><span class="hljs-comment">//即可改变&#x27;c&#x27;处的状态 </span><br>status=status^<span class="hljs-number">1</span>&lt;&lt;s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(status))<br>ans=<span class="hljs-built_in">max</span>(ans,i-mp[status]);<br><span class="hljs-keyword">else</span><br>mp[status]=i; <br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="位操作练习"><a class="markdownIt-Anchor" href="#位操作练习"></a> 位操作练习</h3><p><strong>题目描述</strong></p><p>给出两个不大于65535的非负整数，判断其中一个的16位二进制表示形式，是否能由另一个的16位二进制表示形式经过循环左移若干位而得到。 循环左移和普通左移的区别在于：最左边的那一位经过循环左移一位后就会被移到最右边去。比如： 1011 0000 0000 0001 经过循环左移一位后，变成 0110 0000 0000 0011, 若是循环左移2位，则变成 1100 0000 0000 0110</p><p>输入两个不大于65535的非负整数</p><p>如果能通过循环左移相等，输出<code>YES</code>,否则输出<code>NO</code></p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">45057 </span><span class="hljs-number">49158</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">YES</span><br></code></pre></td></tr></table></figure><p>这个就不说了，直接看代码就行了</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> a,b;<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(a==b)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">15</span>)<br>cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>a=a&lt;&lt;<span class="hljs-number">1</span> | a&gt;&gt;<span class="hljs-number">15</span>&amp;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>龙与地下城游戏问题</title>
    <link href="/2022/09/16/%E9%BE%99%E4%B8%8E%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/16/%E9%BE%99%E4%B8%8E%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E9%BE%99%E4%B8%8E%E5%9C%B0%E4%B8%8B%E5%9F%8E%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98">龙与地下城迷宫问题</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li></ul><!-- /TOC --><h2 id="龙与地下城迷宫问题"><a class="markdownIt-Anchor" href="#龙与地下城迷宫问题"></a> 龙与地下城迷宫问题</h2><p><a href="https://www.nowcoder.com/practice/c0ca4c9e65144af69ada03febaa0e33a?tpId=230&amp;tqId=537494&amp;ru=/exam/oj&amp;qru=/ta/dynamic-programming/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D230">题目链接</a></p><p><strong>题目描述</strong></p><p>给定一个二维数组map，含义是一张地图</p><p>游戏的规则如下:<br />1）骑士从左上角出发，每次只能向右或向下走，最后到达右下角见到公主。<br />2）地图中每个位置的值代表骑士要遭遇的事情。如果是负数，说明此处有怪兽，要让骑士损失血量。如果是非负数，代表此处有血瓶，能让骑士回血。<br />3）骑士从左上角到右下角的过程中，走到任何一个位置时，血量都不能少于1。为了保证骑土能见到公主，初始血量至少是多少?</p><p>根据map,输出初始血量。</p><p>输入第一行<code>n,m</code>，表示矩阵大小<br />然后输入矩阵</p><p>输出初始血量</p><p>input:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">3 3<br><span class="hljs-string">-2</span> <span class="hljs-string">-3</span> 3<br><span class="hljs-string">-5</span> <span class="hljs-string">-10</span> 1<br>0 30 <span class="hljs-string">-5</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题也属于dp，但是有意思的是，如果我们选择 <code>自顶向下</code> 的方式，即从左上角出发，在前进过程中，每一个位置的最小血量是由后面的路径决定的，因此<code>自顶向下</code> 方法是不行的，那么我们可以选择<code> 自底向上</code> 的方式，从右下角出发。</p><p><code>dp[i][j]</code>可理解为，走<code>a[i][j]</code>之前，至少要拥有的血量，且这个血量始终不能小于1</p><p>所以<code>dp[n][m]</code>初始化为<code>max(1-a[n][m],1)</code></p><p>然后从右下角到左上角更新dp数组即可</p><p><strong>代码</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include &lt;bits/stdc++.h&gt;<br>using namespace std;<br><br>const int N=1e3+5;<br>int a<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>,dp<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>;<br>int main()<br>&#123;<br>    int n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        for(int j=1;j&lt;=m;++j)<br>            cin&gt;&gt;a<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>;<br>    &#125;<br>    dp<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span>=max(1-a<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span>,1);<br>    for(int i=n-1;i&gt;=1;--i)<br>        dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[m]</span>=max(dp<span class="hljs-comment">[i+1]</span><span class="hljs-comment">[m]</span>-a<span class="hljs-comment">[i]</span><span class="hljs-comment">[m]</span>,1);<br>    for(int i=m-1;i&gt;=1;--i)<br>        dp<span class="hljs-comment">[n]</span><span class="hljs-comment">[i]</span>=max(dp<span class="hljs-comment">[n]</span><span class="hljs-comment">[i+1]</span>-a<span class="hljs-comment">[n]</span><span class="hljs-comment">[i]</span>,1);<br>    for(int i=n-1;i&gt;=1;--i)<br>    &#123;<br>        for(int j=m-1;j&gt;=1;--j)<br>        &#123;<br>            int t=min(dp<span class="hljs-comment">[i+1]</span><span class="hljs-comment">[j]</span>-a<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j+1]</span>-a<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>);<br>            dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=max(t,1);<br>        &#125;<br>    &#125;<br>    <br>    cout&lt;&lt;dp<span class="hljs-comment">[1]</span><span class="hljs-comment">[1]</span>&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dp练习</title>
    <link href="/2022/09/15/dp%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/09/15/dp%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%B8%8D%E5%90%8C%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E4%B8%AA%E6%95%B0">不同二叉搜索树的个数</a></li><li><a href="#%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF">最小花费爬楼梯</a></li><li><a href="#%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9">最小花费</a></li><li><a href="#%E5%88%86%E9%85%8D%E5%AE%9D%E8%97%8F">分配宝藏</a></li></ul><!-- /TOC --><h2 id="不同二叉搜索树的个数"><a class="markdownIt-Anchor" href="#不同二叉搜索树的个数"></a> 不同二叉搜索树的个数</h2><p><strong>题目描述</strong></p><p>给定一个由节点值从 1 到 n 的 n 个节点。请问由多少种不同的方法用这 n 个节点构成互不相同的二叉搜索树。</p><p>仅一行输入一个正整数 n ，表示节点的数量。</p><p>输出组成不同二叉搜索树的方法数。</p><p>input:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><p><strong>思路</strong></p><p><code>dp[k]</code>表示<code>k</code>个节点时不同二叉搜索树的个数，当有<code>n</code>个节点时，以<code>i</code>为根节点的左子树有<code>i-1</code>个节点，而右子树有<code>i-j</code>个节点，所以以<code>i</code>为根节点的二叉搜索树一共有<code>dp[i-1]*d[i-j]</code>个</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<br>        &#123;<br>            dp[i]+=dp[j<span class="hljs-number">-1</span>]*dp[i-j];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最小花费爬楼梯"><a class="markdownIt-Anchor" href="#最小花费爬楼梯"></a> 最小花费爬楼梯</h2><p><strong>题目描述</strong></p><p>给定一个整数数组 <code>cost[]</code> ，其中 <code>cost[i]</code>是从楼梯第<code>i</code>个台阶向上爬需要支付的费用，下标从0开始。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">100</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">90</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">80</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><p><strong>思路</strong></p><p><code>dp[i]</code>表示第<code>i</code>个台阶之前的最小花费<br />因为一次能走一级或者两级台阶，所以<code>dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])</code></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> cost[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        cin&gt;&gt;cost[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n+<span class="hljs-number">1</span>;++i)<br>    &#123;<br>        dp[i]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>]+cost[i<span class="hljs-number">-1</span>],dp[i<span class="hljs-number">-2</span>]+cost[i<span class="hljs-number">-2</span>]);<br>    &#125;<br>    cout&lt;&lt;dp[n+<span class="hljs-number">1</span>]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最小花费"><a class="markdownIt-Anchor" href="#最小花费"></a> 最小花费</h2><p><strong>题目描述</strong></p><p>在某条线路上有N个火车站，有三种距离的路程，L1，L2，L3,对应的价格为C1,C2,C3.<br />每两个站之间的距离不超过L3。 当乘客要移动的两个站的距离大于L3的时候，可以选择从中间一个站下车，然后买票再上车，所以乘客整个过程中至少会买两张票。 现在给你一个 L1，L2，L3，C1，C2，C3。然后是A，B的值，其分别为乘客旅程的起始站和终点站。 然后输入N，N为该线路上的总的火车站数目，然后输入N-1个整数，分别代表从该线路上的第一个站，到第2个站，第3个站，……，第N个站的距离。 根据输入，输出乘客从A到B站的最小花费。</p><p><strong>输入描述</strong></p><p>第一行输入l1,l2,l3,c1,c2,c3<br />第二行输入a,b<br />第三行输入n<br />第四行输入n-1个数，表示第一站到后面站的距离</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>output:</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>;<br><span class="hljs-type">int</span> l1,l2,l3,c1,c2,c3;<br><span class="hljs-type">int</span> a,b;<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getprice</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(dis[b]-dis[a]&lt;=l1)<br>        <span class="hljs-keyword">return</span> c1;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[b]-dis[a]&lt;=l2)<br>        <span class="hljs-keyword">return</span> c2;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> c3;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;l1&gt;&gt;l2&gt;&gt;l3&gt;&gt;c1&gt;&gt;c2&gt;&gt;c3)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)<br>            cin&gt;&gt;dis[i];<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(dp));<br>        dp[a]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a+<span class="hljs-number">1</span>;i&lt;=b;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=a;j&lt;i;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(dis[i]-dis[j]&lt;=l3)<br>                    dp[i]=<span class="hljs-built_in">min</span>(dp[i],dp[j]+<span class="hljs-built_in">getprice</span>(j,i));<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;dp[b]&lt;&lt;endl;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分配宝藏"><a class="markdownIt-Anchor" href="#分配宝藏"></a> 分配宝藏</h2><p><strong>题目描述</strong></p><p>两个寻宝者找到一个宝藏，里面包含n件物品，每件物品的价值分别是W[0]，W[1]，…W[n-1]。<br />SumA代表寻宝者A所获物品价值总和，SumB代表寻宝者B所获物品价值总和，请问怎么分配才能使得两人所获物品价值总和差距最小，即两人所获物品价值总和之差的绝对值|SumA - SumB|最小。</p><p>输入说明<br />输入数据由两行构成：<br />第一行为一个正整数n，表示物品个数，其中<code>0&lt;n&lt;=200</code>。<br />第二行有n个正整数，分别代表每件物品的价值<code>W[i]</code>，其中<code>0&lt;W[i]&lt;=200</code>。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><p><strong>思路</strong><br />其实是一道<strong>01背包问题</strong>，只需要将背包容量设置为总价值的一半即可</p><p>代码</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs excel">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>const <span class="hljs-built_in">int</span> <span class="hljs-built_in">N</span>=<span class="hljs-number">1</span>e6+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> a[<span class="hljs-built_in">N</span>];<br><span class="hljs-built_in">int</span> dp[<span class="hljs-built_in">N</span>]; <br><span class="hljs-built_in">int</span> main()<br>&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>;<br>cin&gt;&gt;<span class="hljs-built_in">n</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;<br>for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;++i)<br>&#123;<br>cin&gt;&gt;a[i];<br><span class="hljs-built_in">sum</span>+=a[i];<br>&#125;<br><span class="hljs-built_in">int</span> v=<span class="hljs-built_in">sum</span>/<span class="hljs-number">2</span>;<br>for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;++i)<br>&#123;<br>for(<span class="hljs-built_in">int</span> j=v;j&gt;=a[i];--j)<br>&#123;<br>dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-a[i]]+a[i]);<br>&#125;<br>&#125;<br>    cout&lt;&lt;<span class="hljs-built_in">abs</span>(<span class="hljs-number">2</span>*dp[v]-<span class="hljs-built_in">sum</span>)&lt;&lt;endl;<br>return <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2022/09/13/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2022/09/13/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%BE%8B1">例1</a></li><li><a href="#%E6%8E%A5%E9%9B%A8%E6%B0%B4">接雨水</a></li></ul><!-- /TOC --><h3 id="例1"><a class="markdownIt-Anchor" href="#例1"></a> 例1</h3><p><strong>题目描述</strong></p><p>给出项数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的整数数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo>…</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{1 \dots n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="minner mtight">…</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>定义函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span> 代表数列中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个元素之后第一个大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的元素的<strong>下标</strong>，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>j</mi></msub><mo>&gt;</mo><msub><mi>a</mi><mi>i</mi></msub></mrow></msub><mo stretchy="false">{</mo><mi>j</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">f(i)=\min_{i&lt;j\leq n, a_j &gt; a_i} \{j\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0973199999999999em;vertical-align:-0.34731999999999996em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166400000000005em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">≤</span><span class="mord mathnormal mtight">n</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mrel mtight">&gt;</span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">}</span></span></span></span>。若不存在，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(i)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>试求出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>1</mn><mo>…</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(1\dots n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p><strong>输入格式</strong></p><p>第一行一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>。</p><p>第二行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo>…</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{1\dots n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="minner mtight">…</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p><strong>输出格式</strong></p><p>一行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>1</mn><mo>…</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(1\dots n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的值。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>数据规模</strong></p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n\leq 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>；</p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>60</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">60\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n\leq 5 \times 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> ；</p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">1 \le n\leq 3\times 10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1\leq a_i\leq 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3</span>*<span class="hljs-number">1e6</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> a[N];<br>stack&lt;<span class="hljs-type">int</span>&gt; st;<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cin&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;--i)<br>&#123;<br><span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>()&amp;&amp;a[i]&gt;a[st.<span class="hljs-built_in">top</span>()])<br>st.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())<br>f[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>f[i]=st.<span class="hljs-built_in">top</span>();<br>st.<span class="hljs-built_in">push</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cout&lt;&lt;f[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="接雨水"><a class="markdownIt-Anchor" href="#接雨水"></a> 接雨水</h3><p><a href="https://leetcode.cn/problems/trapping-rain-water/">原题</a></p><p><strong>题目描述</strong></p><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>输入输出</strong><br />第一行输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>表示柱子数量<br />第二行输入n个数<br />输出最多能接多少雨水</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> a[N];<br>stack&lt;<span class="hljs-type">int</span>&gt; st;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cin&gt;&gt;a[i];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>()&amp;&amp;a[i]&gt;a[st.<span class="hljs-built_in">top</span>()])<br>        &#123;<br>            <span class="hljs-type">int</span> idx=st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-type">int</span> l=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-type">int</span> h=<span class="hljs-built_in">min</span>(a[i],a[l])-a[idx];<br>            <span class="hljs-type">int</span> w=i-l<span class="hljs-number">-1</span>;<br>            ans+=w*h;<br>        &#125;<br>        st.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2022/09/11/%E9%80%92%E5%BD%92/"/>
    <url>/2022/09/11/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98">汉诺塔问题</a></li><li><a href="#2%E7%9A%84%E5%B9%82%E6%AC%A1%E6%96%B9">2的幂次方</a></li></ul><!-- /TOC --><h3 id="汉诺塔问题"><a class="markdownIt-Anchor" href="#汉诺塔问题"></a> 汉诺塔问题</h3><blockquote><p>汉诺塔问题的种类非常多，这里就写一下最最基础的那个吧</p></blockquote><p>问题描述</p><p>有<code>n</code>个大小不一的圆盘和 a,b,c 三根柱子，初始时n个盘子全在a上，现在要将他们移动到c上</p><ul><li>一次只能移动1个柱子</li><li>大盘子不能在小盘子上面</li></ul><p>input:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">move <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">to</span> c<br>move <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">b</span><br>move <span class="hljs-selector-tag">from</span> c <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">b</span><br>move <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">to</span> c<br>move <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">a</span><br>move <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">to</span> c<br>move <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">to</span> c<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">char</span> a,<span class="hljs-type">char</span> b,<span class="hljs-type">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;move from &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; to &quot;</span>&lt;&lt;c&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">move</span>(x<span class="hljs-number">-1</span>,a,c,b);<br>cout&lt;&lt;<span class="hljs-string">&quot;move from &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; to &quot;</span>&lt;&lt;c&lt;&lt;endl;<br><span class="hljs-built_in">move</span>(x<span class="hljs-number">-1</span>,b,a,c);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">char</span> a=<span class="hljs-string">&#x27;a&#x27;</span>,b=<span class="hljs-string">&#x27;b&#x27;</span>,c=<span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-built_in">move</span>(n,a,b,c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2的幂次方"><a class="markdownIt-Anchor" href="#2的幂次方"></a> 2的幂次方</h3><p><strong>题目描述</strong></p><p>任何一个正整数都可以用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的幂次方表示。</p><p>例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>137</mn><mo>=</mo><msup><mn>2</mn><mn>7</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">137= 2^7 + 2^3 + 2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>。</p><p>同时约定方次用括号来表示，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">a^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span> 可表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>。</p><p>由此可知，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>137</mn></mrow><annotation encoding="application/x-tex">137</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">7</span></span></span></span> 可表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mn>7</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2(7)+2(3)+2(0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p>进一步：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>2</mn><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">7= 2^2+2+2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>  ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span> 用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 表示)，并且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>=</mo><mn>2</mn><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">3=2+2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>。</p><p>所以最后 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>137</mn></mrow><annotation encoding="application/x-tex">137</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">7</span></span></span></span> 可表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2(2(2)+2+2(0))+2(2+2(0))+2(0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>。</p><p>又如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1315</mn><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mo>+</mo><msup><mn>2</mn><mn>8</mn></msup><mo>+</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1315=2^{10} +2^8 +2^5 +2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1315</mn></mrow><annotation encoding="application/x-tex">1315</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">1</span><span class="mord">5</span></span></span></span> 最后可表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>。</p><p><strong>输入格式</strong></p><p>一行一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>。</p><p><strong>输出格式</strong></p><p>符合约定的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">0, 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span> 表示（在表示中不能有空格）。</p><p>input：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1315</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>(<span class="hljs-number">2</span>(<span class="hljs-number">2</span>+<span class="hljs-number">2</span>(<span class="hljs-number">0</span>))+<span class="hljs-number">2</span>)+<span class="hljs-number">2</span>(<span class="hljs-number">2</span>(<span class="hljs-number">2</span>+<span class="hljs-number">2</span>(<span class="hljs-number">0</span>)))+<span class="hljs-number">2</span>(<span class="hljs-number">2</span>(<span class="hljs-number">2</span>)+<span class="hljs-number">2</span>(<span class="hljs-number">0</span>))+<span class="hljs-number">2</span>+<span class="hljs-number">2</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>思路</p><blockquote><p>先找出当前数最大的次方，然后递归的对这个数分解，继续递归分解剩下的数</p></blockquote><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxm</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n)<br>&#123;<br>++k;<br>n/=<span class="hljs-number">2</span>;<br>&#125;<br>--k;<br><span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dg</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mm=<span class="hljs-built_in">maxm</span>(n);<br><span class="hljs-keyword">if</span>(mm==<span class="hljs-number">1</span>)<br>cout&lt;&lt;<span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;2(&quot;</span>;<br><span class="hljs-keyword">if</span>(mm==<span class="hljs-number">0</span>)<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">dg</span>(mm);<br>cout&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br>n=n-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,mm);<br><span class="hljs-keyword">if</span>(n) <br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-built_in">dg</span>(n);<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">dg</span>(n);<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贪心</title>
    <link href="/2022/09/08/%E8%B4%AA%E5%BF%83/"/>
    <url>/2022/09/08/%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%BE%8B%E9%A2%98to-fill-or-not-to-fill">例题：To Fill or Not to Fill</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E9%A2%98%E8%A7%A3">题解</a></li></ul><!-- /TOC --><blockquote><p>贪心的基本思想是，每一步都求出局部最有解，从而来求得可能的全局最优解，但是这种方式求得的全局的解并不一定是全局最优的</p></blockquote><h3 id="例题to-fill-or-not-to-fill"><a class="markdownIt-Anchor" href="#例题to-fill-or-not-to-fill"></a> 例题：To Fill or Not to Fill</h3><p><strong>题目描述</strong></p><p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p><p><strong>输入描述</strong></p><p>For each case, the first line contains 4 positive numbers: Cmax (&lt;= 100), the maximum capacity of the tank; D (&lt;=30000), the distance between Hangzhou and the destination city; Davg (&lt;=20), the average distance per unit gas that the car can run; and N (&lt;= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (&lt;=D), the distance between this station and Hangzhou, for i=1,…N. All the numbers in a line are separated by a space.</p><p><strong>输出描述</strong></p><p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print “The maximum travel distance = X” where X is the maximum possible distance the car can run, accurate up to 2 decimal places.</p><p>input：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">50</span> <span class="hljs-number">1300</span> <span class="hljs-number">12</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">6</span>.<span class="hljs-number">00</span> <span class="hljs-number">1250</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">00</span> <span class="hljs-number">600</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">00</span> <span class="hljs-number">150</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">10</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">20</span> <span class="hljs-number">200</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">50</span> <span class="hljs-number">400</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">30</span> <span class="hljs-number">1000</span><br><span class="hljs-attribute">6</span>.<span class="hljs-number">85</span> <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">749</span>.<span class="hljs-number">17</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>将所有加油站油价按升序排序，让油价最便宜的加油站尽可能加更多的油，维护一个数组<code>dis[]</code>来记录距离，同时需要注意低油价覆盖过的距离不可再次被覆盖</p><h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">st</span><br>&#123;<br>    <span class="hljs-type">double</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-built_in">st</span>():<span class="hljs-built_in">a</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">b</span>(<span class="hljs-number">0</span>)&#123;&#125;<br>    <span class="hljs-built_in">st</span>(<span class="hljs-type">double</span> aa,<span class="hljs-type">int</span> bb):<span class="hljs-built_in">a</span>(aa),<span class="hljs-built_in">b</span>(bb)&#123;&#125;<br>&#125;sta[<span class="hljs-number">501</span>];<br><span class="hljs-type">int</span> dis[<span class="hljs-number">30001</span>];<br><span class="hljs-type">int</span> cmax,d,davg,n,di;<br><span class="hljs-type">double</span> pi;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> func=[](st&amp; a,st&amp; b)&#123;<br>        <span class="hljs-keyword">if</span>(a.a!=b.a)<br>            <span class="hljs-keyword">return</span> a.a&lt;b.a;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> a.b&lt;b.b;<br>    &#125;;<br>    cin&gt;&gt;cmax&gt;&gt;d&gt;&gt;davg&gt;&gt;n; <br><span class="hljs-built_in">memset</span>(sta,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(sta));<br>    <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dis));<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>           cin&gt;&gt;pi&gt;&gt;di;<br>           sta[i]=<span class="hljs-built_in">st</span>(pi,di);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(sta,sta+n,func);<br>    <span class="hljs-type">int</span> maxlen=cmax*davg;<br>    <span class="hljs-type">double</span> cost=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>    <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(sta[i].b+maxlen&lt;d)<br>        len=maxlen;<br>        <span class="hljs-keyword">else</span><br>            len=d-sta[i].b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=sta[i].b;j&lt;sta[i].b+len;++j)<br>&#123;<br>        <span class="hljs-keyword">if</span>(dis[j]==<span class="hljs-number">0</span>)<br>&#123;<br>                dis[j]=<span class="hljs-number">1</span>;<br>                ++cnt;<br>            &#125;<br>        &#125;<br>        cost+=(<span class="hljs-type">double</span>)cnt/davg*sta[i].a;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;d;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The maximum travel distance = %d.00\n&quot;</span>,i);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i==d)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>,cost);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大子矩阵</title>
    <link href="/2022/09/01/%E6%9C%80%E5%A4%A7%E5%AD%90%E7%9F%A9%E9%98%B5/"/>
    <url>/2022/09/01/%E6%9C%80%E5%A4%A7%E5%AD%90%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul><!-- /TOC --><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>矩阵的大小定义为矩阵中所有元素的和，现在给定一个n维矩阵，输出他的最大子矩阵</p><p>输入：第一行输入n，表示矩阵的维数，随后输入n×n的矩阵</p><p>input:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">4<br>0 <span class="hljs-string">-2</span> <span class="hljs-string">-7</span> 0<br>9 2 <span class="hljs-string">-6</span> 2<br><span class="hljs-string">-4</span> 1 <span class="hljs-string">-4</span>  1<br><span class="hljs-string">-1</span> 8  0 <span class="hljs-string">-2</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">15<br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>这道题可以说是矩阵版的<em>最大连续子序列的和</em>，为了减少时间复杂度，将矩阵每个元素变成所在列的前缀和，如<code>s[i][j]</code>表示第<code>j</code>列前<code>i</code>个元素的和，然后按照一维的方式求最大和就好了</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include&lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>const int <span class="hljs-attribute">N</span>=105;<br>int <span class="hljs-attribute">inf</span>=-1e6;<br>int s[N][N];<br>int main()<br>&#123;<br>    int n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=1;j&lt;=n;++j)<br>        &#123;<br>            cin&gt;&gt;s[i][j];<br>            s[i][j]+=s[i-1][j];<br>        &#125;<br>    &#125;<br>    int <span class="hljs-attribute">ans</span>=inf;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=i;j&lt;=n;++j)<br>        &#123;<br>            int <span class="hljs-attribute">pre</span>=inf;<br>            <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">col</span>=1;col&lt;=n;++col)<br>            &#123;<br>                int <span class="hljs-attribute">t</span>=s[j][col]-s[i-1][col];<br>                <span class="hljs-attribute">pre</span>=max(pre+t,t);<br>                <span class="hljs-attribute">ans</span>=max(ans,pre);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见排序算法</title>
    <link href="/2022/08/31/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2022/08/31/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a></li><li><a href="#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">希尔排序</a></li><li><a href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8Fradix-sort">基数排序（Radix Sort)</a></li><li><a href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序</a></li><li><a href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmerge-sort">归并排序（Merge Sort）</a></li><li><a href="#%E5%A0%86%E6%8E%92%E5%BA%8F">堆排序</a></li><li><a href="#%E6%A1%B6%E6%8E%92%E5%BA%8Fbucket-sort">桶排序（Bucket Sort）</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a></li></ul><!-- /TOC --><blockquote><p>这篇博客主要总结一下常见排序算法及其时间复杂度</p></blockquote><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">平均时间复杂度</th><th style="text-align:center">最好</th><th style="text-align:center">最差</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">稳定性</th></tr></thead><tbody><tr><td style="text-align:center">插入排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{1.3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">桶排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">选择排序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">不稳定</td></tr></tbody></table><h3 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h3><blockquote><p>每次选择一个元素，并且将这个元素和前面元素进行比较，然后插入到合适的位置</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">void <span class="hljs-keyword">insert_sort(int </span>arr[], int length)<br>&#123;<br>    int i,<span class="hljs-keyword">j;</span><br><span class="hljs-keyword"></span>    for (i = <span class="hljs-number">1</span><span class="hljs-comment">; i &lt; length; i++) &#123;</span><br>        int tmp = arr[i];<br>        for (<span class="hljs-keyword">j </span>= i<span class="hljs-comment">; j &gt; 0 &amp;&amp; arr[j - 1] &gt; tmp; j--) &#123;</span><br>            arr[<span class="hljs-keyword">j] </span>= arr[<span class="hljs-keyword">j </span>- <span class="hljs-number">1</span>];<br>        &#125;<br>        arr[<span class="hljs-keyword">j] </span>= tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h3><blockquote><p>插入排序的升级版，初始间隔<em>gap</em>为元素数目的一般，每次间隔<em>gap</em>个元素进行插入排序，直到gap为1</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> shellSort(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n) <br>&#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> gap = n/<span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) <br>    &#123; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = gap; i &lt; n; i += <span class="hljs-number">1</span>) <br>        &#123; <br>            <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span> = arr[i]; <br>            <span class="hljs-type">int</span> j;             <br>            <span class="hljs-keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; <span class="hljs-keyword">temp</span>; j -= gap) <br>                arr[j] = arr[j - gap]; <br>            arr[j] = <span class="hljs-keyword">temp</span>; <br>        &#125; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序radix-sort"><a class="markdownIt-Anchor" href="#基数排序radix-sort"></a> 基数排序（Radix Sort)</h3><blockquote><p>将整数按位数切割成不同的数字，然后按每个位数分别比较。排序过程是将所有待比较数值统一为同样的数位长度，数位较短的数前面补零，然后从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> getMax(<span class="hljs-built_in">int</span> arr[], <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>) <br>&#123; <br>    <span class="hljs-built_in">int</span> mx = arr[<span class="hljs-number">0</span>]; <br>    for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">n</span>; i++) <br>        <span class="hljs-built_in">if</span> (arr[i] &gt; mx) <br>            mx = arr[i]; <br>    return mx; <br>&#125; <br><br>void countSort(<span class="hljs-built_in">int</span> arr[], <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>, <span class="hljs-built_in">int</span> <span class="hljs-built_in">exp</span>) <br>&#123; <br>    <span class="hljs-built_in">int</span> output[<span class="hljs-built_in">n</span>]; <br>    <span class="hljs-built_in">int</span> i, <span class="hljs-built_in">count</span>[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;; <br>  <br>    for (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; i++) <br>        <span class="hljs-built_in">count</span>[ (arr[i]/<span class="hljs-built_in">exp</span>)%<span class="hljs-number">10</span> ]++; <br>  <br>    for (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) <br>        <span class="hljs-built_in">count</span>[i] += <span class="hljs-built_in">count</span>[i - <span class="hljs-number">1</span>]; //此时<span class="hljs-built_in">count</span>[i]每位数字存放的位置，实际下标还要-<span class="hljs-number">1</span><br>  <br>    for (i = <span class="hljs-built_in">n</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) //从后往前保证稳定性<br>    &#123; <br>        output[<span class="hljs-built_in">count</span>[ (arr[i]/<span class="hljs-built_in">exp</span>)%<span class="hljs-number">10</span> ] - <span class="hljs-number">1</span>] = arr[i]; <br>        <span class="hljs-built_in">count</span>[ (arr[i]/<span class="hljs-built_in">exp</span>)%<span class="hljs-number">10</span> ]--; <br>    &#125; <br>  <br>    for (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; i++) <br>        arr[i] = output[i]; <br>&#125; <br>  <br>void radixsort(<span class="hljs-built_in">int</span> arr[], <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>) <br>&#123; <br>    <span class="hljs-built_in">int</span> m = getMax(arr, <span class="hljs-built_in">n</span>); <br>    for (<span class="hljs-built_in">int</span> <span class="hljs-built_in">exp</span> = <span class="hljs-number">1</span>; m/<span class="hljs-built_in">exp</span> &gt; <span class="hljs-number">0</span>; <span class="hljs-built_in">exp</span> *= <span class="hljs-number">10</span>) <br>        countSort(arr, <span class="hljs-built_in">n</span>, <span class="hljs-built_in">exp</span>); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3><blockquote><p>每次比较相邻两个元素大小，然后交换位置，每次将最大或最小的元素放到最后</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs excel">void bubblesort(<span class="hljs-built_in">int</span> arr[],<span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>)<br>&#123;<br>for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>-<span class="hljs-number">1</span>;++i)<br>&#123;<br>for( <span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">len</span>-i-<span class="hljs-number">1</span>;++j)<br>&#123;<br><span class="hljs-built_in">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">t</span>=arr[j];<br>arr[j]=arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>]=<span class="hljs-built_in">t</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序merge-sort"><a class="markdownIt-Anchor" href="#归并排序merge-sort"></a> 归并排序（Merge Sort）</h3><blockquote><p>主要思想是分治（Divide and Conquer），将数组不断分成两个部分，对分开的部分比较然后拼接</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void merge(<span class="hljs-built_in">int</span> arr<span class="hljs-literal">[]</span>, <span class="hljs-built_in">int</span> l, <span class="hljs-built_in">int</span> m, <span class="hljs-built_in">int</span> r) <br>&#123; <br>    <span class="hljs-built_in">int</span> i, j, k; <br>    <span class="hljs-built_in">int</span> n1 = m - l + <span class="hljs-number">1</span>; <br>    <span class="hljs-built_in">int</span> n2 =  r - m; <br><br>    <span class="hljs-built_in">int</span> L<span class="hljs-literal">[<span class="hljs-identifier">n1</span>]</span>, R<span class="hljs-literal">[<span class="hljs-identifier">n2</span>]</span>; <br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n1; i++) <br>        L<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = arr<span class="hljs-literal">[<span class="hljs-identifier">l</span> + <span class="hljs-identifier">i</span>]</span>; <br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n2; j++) <br>        R<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = arr<span class="hljs-literal">[<span class="hljs-identifier">m</span> + <span class="hljs-number">1</span>+ <span class="hljs-identifier">j</span>]</span>; <br><br>    i = <span class="hljs-number">0</span>; <br>    j = <span class="hljs-number">0</span>; <br>    k = l; <br>    <span class="hljs-keyword">while</span> (i &lt; n1<span class="hljs-operator"> &amp;&amp; </span>j &lt; n2) <br>    &#123; <br>        <span class="hljs-keyword">if</span> (L<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &lt;= R<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>) <br>        &#123; <br>            arr<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span> = L<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>; <br>            i++; <br>        &#125; <br>        <span class="hljs-keyword">else</span><br>        &#123; <br>            arr<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span> = R<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>; <br>            j++; <br>        &#125; <br>        k++; <br>    &#125; <br>  <br>    <span class="hljs-keyword">while</span> (i &lt; n1) <br>    &#123; <br>        arr<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span> = L<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>; <br>        i++; <br>        k++; <br>    &#125; <br>  <br>    <span class="hljs-keyword">while</span> (j &lt; n2) <br>    &#123; <br>        arr<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span> = R<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>; <br>        j++; <br>        k++; <br>    &#125; <br>&#125; <br>  <br>void merge<span class="hljs-constructor">Sort(<span class="hljs-params">int</span> <span class="hljs-params">arr</span>[], <span class="hljs-params">int</span> <span class="hljs-params">l</span>, <span class="hljs-params">int</span> <span class="hljs-params">r</span>)</span> <br>&#123; <br>    <span class="hljs-keyword">if</span> (l &lt; r) <br>    &#123; <br>        <span class="hljs-built_in">int</span> m = l+r&gt;&gt;<span class="hljs-number">1</span>; <br>        merge<span class="hljs-constructor">Sort(<span class="hljs-params">arr</span>, <span class="hljs-params">l</span>, <span class="hljs-params">m</span>)</span>; <br>        merge<span class="hljs-constructor">Sort(<span class="hljs-params">arr</span>, <span class="hljs-params">m</span>+1, <span class="hljs-params">r</span>)</span>; <br>        merge(arr, l, m, r); <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><blockquote><p>主要是建立小顶堆或者大顶堆，排序的时候，每次取出堆顶元素，然后剩下元素重新建堆，<s>建堆可以直接用STL的make_heap()😄</s></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> i)</span> <br>&#123; <br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxv</span> <span class="hljs-operator">=</span> i; <br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>*i + <span class="hljs-number">2</span>; <br>    <span class="hljs-keyword">if</span> (l &lt; n &amp;&amp; arr[l] &gt; arr[maxv]) <br>        maxv = l; <br>    <span class="hljs-keyword">if</span> (r &lt; n &amp;&amp; arr[r] &gt; arr[maxv]) <br>        maxv = r; <br>    <span class="hljs-keyword">if</span> (maxv != i) <br>    &#123; <br>        swap(arr[i], arr[maxv]); <br>        heapify(arr, n, maxv); <br>    &#125; <br>&#125;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">heapsort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-comment">//建堆</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        heapify(arr,len;i);<br>    <span class="hljs-comment">//排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>    &#123;<br>        swap(arr[i],a[<span class="hljs-number">0</span>]);<span class="hljs-comment">//堆顶放到最后</span><br>        heapify(arr,i,<span class="hljs-number">0</span>);<span class="hljs-comment">//重新调整</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="桶排序bucket-sort"><a class="markdownIt-Anchor" href="#桶排序bucket-sort"></a> 桶排序（Bucket Sort）</h3><blockquote><p>将数组分到有限数量的桶中，再对每个桶子再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序），最后将各个桶中的数据有序的合并起来。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">\\该代码只适合正数数组的排序<br>void bucket<span class="hljs-constructor">Sort(<span class="hljs-params">float</span> <span class="hljs-params">arr</span>[], <span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span> <br>&#123; <br>    vector&lt;<span class="hljs-built_in">float</span>&gt; b<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>; <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) <br>    &#123; <br>       <span class="hljs-built_in">int</span> bi = n*arr<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>; <br>       b<span class="hljs-literal">[<span class="hljs-identifier">bi</span>]</span>.push<span class="hljs-constructor">_back(<span class="hljs-params">arr</span>[<span class="hljs-params">i</span>])</span>; <br>    &#125; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) <br>       sort(b<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>, b<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>); <br>    <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; b<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.size<span class="hljs-literal">()</span>; j++) <br>          arr<span class="hljs-literal">[<span class="hljs-identifier">index</span><span class="hljs-operator">++</span>]</span> = b<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><blockquote><p>核心思想也是分治，每次选择一个pivot(一般选第一个)，设置左右端点两个指针，每一趟调整将比pivot元素小的值放到左指针位置，比pivot元素大的值放到位置，这样左半部分就小于右半部分，然后递归，分别对左右两个部分进行快排</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> adjust(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)<br>&#123;<br><span class="hljs-type">int</span> t=arr[l];<br><span class="hljs-keyword">while</span>(l&lt;r)<br>&#123;<br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;arr[r]&gt;=t)<br><span class="hljs-comment">--r;</span><br>arr[l]=arr[r];<br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;arr[l]&lt;=t)<br>++l;<br>arr[r]=arr[l];<br>&#125;<br>arr[l]=t;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-type">void</span> quicksort(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)<br>&#123;<br><span class="hljs-keyword">if</span>(l&lt;r)<br>&#123;<br><span class="hljs-type">int</span> pos=adjust(arr,l,r);<br>quicksort(arr,l,pos);<br>quicksort(arr,pos+<span class="hljs-number">1</span>,r);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>日期计算</title>
    <link href="/2022/08/29/%E6%97%A5%E6%9C%9F%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/08/29/%E6%97%A5%E6%9C%9F%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>先来看一道题</p><p>输入一年中的一天，输出这一天是星期几</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">14 </span>October <span class="hljs-number">2001</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Sunday</span><br></code></pre></td></tr></table></figure><p>用以下公式计算天数：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mi>X</mi><mo>−</mo><mn>1</mn><mo>+</mo><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>4</mn><mo>−</mo><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>100</mn><mo>+</mo><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>400</mn><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">S=X-1+(X-1)/4-(X-1)/100+(X-1)/400+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>其中，<code>X</code>是年份，<code>C</code>表示这一天是这一年的第<code>C</code>天</p><p>计算出<code>S</code>后用<code>S%7</code>判断星期几即可</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// S=X-1+(X-1)/4-(X-1)/100+(X-1)/400+C</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isrun</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;n%<span class="hljs-number">100</span>||n%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> d,y;<br>    string m;<br>    vector&lt;pair&lt;string,<span class="hljs-type">int</span>&gt;&gt; mon=&#123;&#123;<span class="hljs-string">&quot;January&quot;</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-string">&quot;February&quot;</span>,<span class="hljs-number">28</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;March&quot;</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-string">&quot;April&quot;</span>,<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-string">&quot;May&quot;</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-string">&quot;June&quot;</span>,<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-string">&quot;July&quot;</span>,<span class="hljs-number">31</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;August&quot;</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-string">&quot;September&quot;</span>,<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-string">&quot;October&quot;</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-string">&quot;November&quot;</span>,<span class="hljs-number">30</span>&#125;,<br>                                  &#123;<span class="hljs-string">&quot;December&quot;</span>,<span class="hljs-number">31</span>&#125;&#125;;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;d&gt;&gt;m&gt;&gt;y)<br>    &#123;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isrun</span>(y))<br>            flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=mon.<span class="hljs-built_in">begin</span>();it!=mon.<span class="hljs-built_in">end</span>();++it)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(it-&gt;first!=m)   <br>                sum+=it-&gt;second;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        sum=sum+d+flag;<br>        <span class="hljs-type">int</span> s=y<span class="hljs-number">-1</span>+(y<span class="hljs-number">-1</span>)/<span class="hljs-number">4</span>-(y<span class="hljs-number">-1</span>)/<span class="hljs-number">100</span>+(y<span class="hljs-number">-1</span>)/<span class="hljs-number">400</span>+sum;<br>        <span class="hljs-keyword">switch</span>(s%<span class="hljs-number">7</span>)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Sunday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Monday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Tuesday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Wednesday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Thursday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Friday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <br>                cout&lt;&lt;<span class="hljs-string">&quot;Saturday&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线段树</title>
    <link href="/2022/08/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2022/08/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E7%BA%BF%E6%AE%B5%E6%A0%91">线段树</a><ul><li><a href="#%E9%80%92%E5%BD%92%E5%BB%BA%E6%A0%91">递归建树</a></li></ul></li><li><a href="#%E7%B1%BB%E5%9E%8B%E4%B8%80%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2">类型一：单点修改，区间查询</a><ul><li><a href="#%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9">单点修改</a></li><li><a href="#%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2">区间查询</a></li><li><a href="#%E4%BE%8B%E9%A2%98">例题</a></li></ul></li><li><a href="#%E7%B1%BB%E5%9E%8B%E4%BA%8C%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E5%8D%95%E7%82%B9%E6%9F%A5%E8%AF%A2">类型二：区间修改，单点查询</a><ul><li><a href="#%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9">区间修改</a></li><li><a href="#%E5%8D%95%E7%82%B9%E6%9F%A5%E8%AF%A2">单点查询</a></li><li><a href="#%E4%BE%8B%E9%A2%98-1">例题</a></li></ul></li><li><a href="#%E7%B1%BB%E5%9E%8B%E4%B8%89-%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2">类型三： 区间修改，区间查询</a><ul><li><a href="#%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9-1">区间修改</a></li><li><a href="#%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-1">区间查询</a></li><li><a href="#%E4%BE%8B%E9%A2%98-2">例题</a></li></ul></li></ul><!-- /TOC --><h3 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h3><blockquote><p>能把对区间的修改、查询的时间复杂度由 O(n) 变为 O(logn)</p></blockquote><p>线段树实际上也是一种二叉树，每个节点用一个结构体<code>node</code>保存</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">struct <span class="hljs-keyword">node</span><br><span class="hljs-title">&#123;</span><br><span class="hljs-title">int</span> l,r,sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>l</code>和<code>r</code>表示线段的左右端点，<code>sum</code>表示线段的和</p><p>如果用数组存储，一棵二叉树，左孩子下标为<code>2*i</code>，右孩子下标为<code>2*i+1</code><br />因此，每一个节点的<code>sum</code>值为：<code>tree[i].sum=tree[2*i].sum+tree[2*i+1].sum</code></p><h4 id="递归建树"><a class="markdownIt-Anchor" href="#递归建树"></a> 递归建树</h4><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-type">void</span> build(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)<br>&#123;<br><span class="hljs-comment">//i:当前节点编号 l:左端点 r:右端点 </span><br>tree[i].l=l;<br>tree[i].r=r;<br><span class="hljs-comment">//如果是叶子节点，赋值并返回 </span><br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>tree[i].<span class="hljs-built_in">sum</span>=<span class="hljs-type">array</span>[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>build(<span class="hljs-number">2</span>*i,l,mid);<span class="hljs-comment">//建左子树 </span><br>build(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//建右子树 </span><br><span class="hljs-comment">//更新线段和 </span><br>tree[i].<span class="hljs-built_in">sum</span>=tree[<span class="hljs-number">2</span>*i].<span class="hljs-built_in">sum</span>+tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].<span class="hljs-built_in">sum</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型一单点修改区间查询"><a class="markdownIt-Anchor" href="#类型一单点修改区间查询"></a> 类型一：单点修改，区间查询</h3><p>单点修改：给第<code>idx</code>个数加<code>k</code><br />区间查询：输出区间[x,y]内所有数的和</p><h4 id="单点修改"><a class="markdownIt-Anchor" href="#单点修改"></a> 单点修改</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">void</span> mod1(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> idx,<span class="hljs-built_in">int</span> k)<br>&#123;<br><span class="hljs-keyword">if</span>(tree[i].l==tree[i].r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>+=k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(idx&lt;=mid)<br>mod1(<span class="hljs-number">2</span>*i,idx,k);<br><span class="hljs-keyword">else</span><br>mod1(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,idx,k);<br><span class="hljs-comment">//更新线段和</span><br>tree[i].<span class="hljs-keyword">sum</span>=tree[<span class="hljs-number">2</span>*i].<span class="hljs-keyword">sum</span>+tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].<span class="hljs-keyword">sum</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="区间查询"><a class="markdownIt-Anchor" href="#区间查询"></a> 区间查询</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//区间查询</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query1</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果当前区间完全被查询区间包括，返回当前区间的和 </span><br><span class="hljs-keyword">if</span>(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)<br><span class="hljs-keyword">return</span> tree[i].sum;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">//如果左孩子区间与查询区间相交，进入左子树 </span><br><span class="hljs-keyword">if</span>(l&lt;=mid)<br>res+=<span class="hljs-built_in">query1</span>(<span class="hljs-number">2</span>*i,l,r);<br><span class="hljs-comment">//如果右孩子区间与查询区间相交，进入右子树</span><br><span class="hljs-keyword">if</span>(r&gt;mid)<br>res+=<span class="hljs-built_in">query1</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r);<br> <span class="hljs-keyword">return</span> res;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h4><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a></p><p><strong>题目描述</strong></p><p>如题，已知一个数列，你需要进行下面两种操作：</p><ul><li><p>将某一个数加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span></p></li><li><p>求出某区间每一个数的和</p></li></ul><p><strong>输入格式</strong></p><p>第一行包含两个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n,m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span></span></span></span>，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个用空格分隔的整数，其中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个数字表示数列第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 项的初始值。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 行每行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个整数，表示一个操作，具体如下：</p><ul><li><p><code>1 x k</code>  含义：将第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 个数加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></p></li><li><p><code>2 x y</code>  含义：输出区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x,y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 内每个数的和</p></li></ul><p><strong>输出格式</strong></p><p>输出包含若干行整数，即为所有操作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的结果。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">14<br>16<br></code></pre></td></tr></table></figure><p><strong>【数据范围】</strong></p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">1 \le n \le 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">1\le m \le 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>；<br />对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">70\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">7</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1\le n,m \le 10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>；<br />对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1\le n,m \le 5\times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</p><p>ac代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e5</span>+<span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> nums[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> l,r,sum;<br>&#125;tree[<span class="hljs-number">4</span>*N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//i:当前节点编号 l:左端点 r:右端点 </span><br>tree[i].l=l;<br>tree[i].r=r;<br><span class="hljs-comment">//如果是叶子节点，赋值并返回 </span><br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>tree[i].sum=nums[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">build</span>(<span class="hljs-number">2</span>*i,l,mid);<span class="hljs-comment">//建左子树 </span><br><span class="hljs-built_in">build</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//建右子树 </span><br><span class="hljs-comment">//更新线段和 </span><br>tree[i].sum=tree[<span class="hljs-number">2</span>*i].sum+tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-comment">//单点修改 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mod1</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> idx,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(tree[i].l==tree[i].r)<br>&#123;<br>tree[i].sum+=k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(idx&lt;=mid)<br><span class="hljs-built_in">mod1</span>(<span class="hljs-number">2</span>*i,idx,k);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">mod1</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,idx,k);<br><span class="hljs-comment">//更新线段和</span><br>tree[i].sum=tree[<span class="hljs-number">2</span>*i].sum+tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-comment">//区间查询</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query1</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果当前区间完全被查询区间包括，返回当前区间的和 </span><br><span class="hljs-keyword">if</span>(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)<br><span class="hljs-keyword">return</span> tree[i].sum;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">//如果左孩子区间与查询区间相交，进入左子树 </span><br><span class="hljs-keyword">if</span>(l&lt;=mid)<br>res+=<span class="hljs-built_in">query1</span>(<span class="hljs-number">2</span>*i,l,r);<br><span class="hljs-comment">//如果右孩子区间与查询区间相交，进入右子树</span><br><span class="hljs-keyword">if</span>(r&gt;mid)<br>res+=<span class="hljs-built_in">query1</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r);<br> <span class="hljs-keyword">return</span> res;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cin&gt;&gt;nums[i];<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-type">int</span> op,a,b;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br><span class="hljs-built_in">mod1</span>(<span class="hljs-number">1</span>,a,b);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)<br>cout&lt;&lt;<span class="hljs-built_in">query1</span>(<span class="hljs-number">1</span>,a,b)&lt;&lt;endl;<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="类型二区间修改单点查询"><a class="markdownIt-Anchor" href="#类型二区间修改单点查询"></a> 类型二：区间修改，单点查询</h3><p>区间修改：给区间<code>[a,b]</code>每个数加k<br />单点查询：查询第<code>x</code>个数的值</p><p>思路：把修改区间所覆盖的区间加k，然后单点查询时从上到下将所有k相加</p><h4 id="区间修改"><a class="markdownIt-Anchor" href="#区间修改"></a> 区间修改</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">void</span> <span class="hljs-keyword">mod</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> k)<br>&#123;<br><span class="hljs-comment">//完全在区间内，+k </span><br><span class="hljs-keyword">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>+=k;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">//落在左区间 </span><br><span class="hljs-keyword">if</span>(l&lt;=mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i,l,r,k);<br><span class="hljs-comment">//落在右区间 </span><br><span class="hljs-keyword">if</span>(r&gt;mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r,k);<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="单点查询"><a class="markdownIt-Anchor" href="#单点查询"></a> 单点查询</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">int</span> query(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> x)<br>&#123;<br><span class="hljs-comment">//从上到下计算所有k的和 </span><br><span class="hljs-keyword">if</span>(tree[i].l==tree[i].r)<br><span class="hljs-keyword">return</span> tree[i].<span class="hljs-keyword">sum</span>;<br><span class="hljs-built_in">int</span> res=tree[i].<span class="hljs-keyword">sum</span>;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid)<br>res+=query(<span class="hljs-number">2</span>*i,x);<br><span class="hljs-keyword">else</span><br>res+=query(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,x);<br><span class="hljs-keyword">return</span> res;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h4><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 树状数组 2</a></p><p><strong>题目描述</strong></p><p>如题，已知一个数列，你需要进行下面两种操作：</p><ol><li><p>将某区间每一个数加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>；</p></li><li><p>求出某一个数的值。</p></li></ol><p><strong>输入格式</strong></p><p>第一行包含两个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个用空格分隔的整数，其中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个数字表示数列第 $i $ 项的初始值。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 行每行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>个整数，表示一个操作，具体如下：</p><p>操作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>： 格式：<code>1 x y k</code> 含义：将区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x,y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 内每个数加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>；</p><p>操作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>： 格式：<code>2 x</code> 含义：输出第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 个数的值。</p><p><strong>输出格式</strong></p><p>输出包含若干行整数，即为所有操作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的结果。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">6<br>10<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> N=<span class="hljs-number">5e5</span>+<span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span> nums[N];<br>struct node<br>&#123;<br><span class="hljs-built_in">int</span> l,r,<span class="hljs-keyword">sum</span>;<br>&#125;tree[<span class="hljs-number">4</span>*N];<br><span class="hljs-keyword">void</span> build(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r)<br>&#123;<br>tree[i].l=l;<br>tree[i].r=r;<br>tree[i].<span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>; <br><span class="hljs-comment">//如果是叶子节点，赋值并返回 </span><br><span class="hljs-keyword">if</span>(l==r)<br><span class="hljs-keyword">return</span>; <br><span class="hljs-built_in">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>build(<span class="hljs-number">2</span>*i,l,mid);<span class="hljs-comment">//建左子树 </span><br>build(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//建右子树 </span><br>&#125;<br><br><span class="hljs-comment">//区间修改</span><br><span class="hljs-keyword">void</span> <span class="hljs-keyword">mod</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> k)<br>&#123;<br><span class="hljs-comment">//完全在区间内，+k </span><br><span class="hljs-keyword">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>+=k;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">//落在左区间 </span><br><span class="hljs-keyword">if</span>(l&lt;=mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i,l,r,k);<br><span class="hljs-comment">//落在右区间 </span><br><span class="hljs-keyword">if</span>(r&gt;mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r,k);<br>&#125; <br><span class="hljs-comment">//单点查询</span><br><span class="hljs-built_in">int</span> query(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> x)<br>&#123;<br><span class="hljs-comment">//从上到下计算所有k的和 </span><br><span class="hljs-keyword">if</span>(tree[i].l==tree[i].r)<br><span class="hljs-keyword">return</span> tree[i].<span class="hljs-keyword">sum</span>;<br><span class="hljs-built_in">int</span> res=tree[i].<span class="hljs-keyword">sum</span>;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid)<br>res+=query(<span class="hljs-number">2</span>*i,x);<br><span class="hljs-keyword">else</span><br>res+=query(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,x);<br><span class="hljs-keyword">return</span> res;<br>&#125; <br><span class="hljs-built_in">int</span> main()<br>&#123;<br><span class="hljs-built_in">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cin&gt;&gt;nums[i];<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">int</span> op,a,b,c;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;op;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">1</span>,a,b,c);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)<br>&#123;<br>cin&gt;&gt;a;<br>cout&lt;&lt;query(<span class="hljs-number">1</span>,a)+nums[a]&lt;&lt;endl; <br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>数据规模与约定</strong></p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">N\le8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">M\le10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>；</p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">70\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">7</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">N\le 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">M\le10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>；</p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>500000</mn></mrow><annotation encoding="application/x-tex">1 \leq N, M\le 500000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \leq x, y \leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，保证任意时刻序列中任意元素的绝对值都不大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>。</p><p>ac代码：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> N=<span class="hljs-number">5e5</span>+<span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span> nums[N];<br>struct node<br>&#123;<br><span class="hljs-built_in">int</span> l,r,<span class="hljs-keyword">sum</span>;<br>&#125;tree[<span class="hljs-number">4</span>*N];<br><span class="hljs-keyword">void</span> build(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r)<br>&#123;<br>tree[i].l=l;<br>tree[i].r=r;<br>tree[i].<span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>; <br><span class="hljs-comment">//如果是叶子节点，赋值并返回 </span><br><span class="hljs-keyword">if</span>(l==r)<br><span class="hljs-keyword">return</span>; <br><span class="hljs-built_in">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>build(<span class="hljs-number">2</span>*i,l,mid);<span class="hljs-comment">//建左子树 </span><br>build(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//建右子树 </span><br>&#125;<br><br><span class="hljs-comment">//区间修改</span><br><span class="hljs-keyword">void</span> <span class="hljs-keyword">mod</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> k)<br>&#123;<br><span class="hljs-comment">//完全在区间内，+k </span><br><span class="hljs-keyword">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>+=k;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">//落在左区间 </span><br><span class="hljs-keyword">if</span>(l&lt;=mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i,l,r,k);<br><span class="hljs-comment">//落在右区间 </span><br><span class="hljs-keyword">if</span>(r&gt;mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r,k);<br>&#125; <br><span class="hljs-comment">//单点查询</span><br><span class="hljs-built_in">int</span> query(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> x)<br>&#123;<br><span class="hljs-comment">//从上到下计算所有k的和 </span><br><span class="hljs-keyword">if</span>(tree[i].l==tree[i].r)<br><span class="hljs-keyword">return</span> tree[i].<span class="hljs-keyword">sum</span>;<br><span class="hljs-built_in">int</span> res=tree[i].<span class="hljs-keyword">sum</span>;<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid)<br>res+=query(<span class="hljs-number">2</span>*i,x);<br><span class="hljs-keyword">else</span><br>res+=query(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,x);<br><span class="hljs-keyword">return</span> res;<br>&#125; <br><span class="hljs-built_in">int</span> main()<br>&#123;<br><span class="hljs-built_in">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cin&gt;&gt;nums[i];<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">int</span> op,a,b,c;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;op;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">1</span>,a,b,c);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)<br>&#123;<br>cin&gt;&gt;a;<br>cout&lt;&lt;query(<span class="hljs-number">1</span>,a)+nums[a]&lt;&lt;endl; <br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="类型三-区间修改区间查询"><a class="markdownIt-Anchor" href="#类型三-区间修改区间查询"></a> 类型三： 区间修改，区间查询</h3><p>需要定义一个懒标记，然后每次修改或查询需要进行<code>pushdown</code></p><p>pushdown步骤：</p><ul><li>当前节点懒标记不为0时，给左右子节点的懒标记加上父亲的懒标记</li><li>更新左右子节点的sum</li><li>父节点的懒标记置0</li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs inform7">void pushdown(int i)<br>&#123;<br>if(tree<span class="hljs-comment">[i]</span>.lz)<br>&#123;<br>tree<span class="hljs-comment">[2*i]</span>.lz+=tree<span class="hljs-comment">[i]</span>.lz;<br>tree<span class="hljs-comment">[2*i+1]</span>.lz+=tree<span class="hljs-comment">[i]</span>.lz;<br>int mid=tree<span class="hljs-comment">[i]</span>.l+tree<span class="hljs-comment">[i]</span>.r&gt;&gt;1;<br>tree<span class="hljs-comment">[2*i]</span>.sum+=tree<span class="hljs-comment">[i]</span>.lz*(mid-tree<span class="hljs-comment">[i]</span>.l+1);<br>tree<span class="hljs-comment">[2*i+1]</span>.sum+=tree<span class="hljs-comment">[i]</span>.lz*(tree<span class="hljs-comment">[i]</span>.r-mid);<br>tree<span class="hljs-comment">[i]</span>.lz=0;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="区间修改-2"><a class="markdownIt-Anchor" href="#区间修改-2"></a> 区间修改</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">void</span> <span class="hljs-keyword">mod</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> k)<br>&#123;<br><span class="hljs-comment">//区间被完全包括，更新sum，lz </span><br><span class="hljs-keyword">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>+=k*(tree[i].r-tree[i].l+<span class="hljs-number">1</span>);<br>tree[i].lz+=k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>pushdown(i);<br><span class="hljs-built_in">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(l&lt;=mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i,l,r,k);<br><span class="hljs-keyword">if</span>(r&gt;mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r,k);<br><span class="hljs-comment">//更新和</span><br>tree[i].<span class="hljs-keyword">sum</span>=tree[<span class="hljs-number">2</span>*i].<span class="hljs-keyword">sum</span> +tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].<span class="hljs-keyword">sum</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="区间查询-2"><a class="markdownIt-Anchor" href="#区间查询-2"></a> 区间查询</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> query(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r)<br>&#123;<br>//区间被完全包括，返回<span class="hljs-built_in">sum</span> <br><span class="hljs-built_in">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br>return tree[i].<span class="hljs-built_in">sum</span>;<br>pushdown(i);<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span>=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">if</span>(l&lt;=<span class="hljs-built_in">mid</span>)<br>res+=query(<span class="hljs-number">2</span>*i,l,r);<br><span class="hljs-built_in">if</span>(r&gt;<span class="hljs-built_in">mid</span>)<br>res+=query(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r);<br>return res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例题-3"><a class="markdownIt-Anchor" href="#例题-3"></a> 例题</h4><p><a href="https://www.luogu.com.cn/problem/P3372">P3372【模板】线段树 1</a></p><p><strong>题目描述</strong></p><p>如题，已知一个数列，你需要进行下面两种操作：</p><ol><li>将某区间每一个数加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>。</li><li>求出某区间每一个数的和。</li></ol><p><strong>输入格式</strong></p><p>第一行包含两个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n, m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span></span></span></span>，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个用空格分隔的整数，其中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个数字表示数列第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 项的初始值。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 行每行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 个整数，表示一个操作，具体如下：</p><ol><li><code>1 x y k</code>：将区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x, y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 内每个数加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>。</li><li><code>2 x y</code>：输出区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x, y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 内每个数的和。</li></ol><p><strong>输出格式</strong><br />输出包含若干行整数，即为所有操作 2 的结果。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">11<br>8<br>20<br></code></pre></td></tr></table></figure><p><strong>提示</strong></p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">n \le 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">m \le 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>。<br />对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">70\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">7</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><msup><mn>10</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n \le {10}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.848448em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord">1</span><span class="mord">0</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.848448em;"><span style="top:-3.09734em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>≤</mo><msup><mn>10</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">m \le {10}^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.848448em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord">1</span><span class="mord">0</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.848448em;"><span style="top:-3.09734em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>。<br />对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><msup><mn>10</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \le n, m \le {10}^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.848448em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord">1</span><span class="mord">0</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.848448em;"><span style="top:-3.09734em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。</p><p>保证任意时刻数列中所有元素的绝对值之和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><msup><mn>10</mn><mn>18</mn></msup></mrow><annotation encoding="application/x-tex">\le {10}^{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.848448em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord">1</span><span class="mord">0</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.848448em;"><span style="top:-3.09734em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>。</p><p>ac代码：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>typedef <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span> nums[N];<br>struct node<br>&#123;<br>ll l,r,<span class="hljs-keyword">sum</span>,lz;<br>&#125;tree[<span class="hljs-number">4</span>*N];<br><span class="hljs-keyword">void</span> build(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r)<br>&#123; <br>tree[i].l=l;<br>tree[i].r=r;<br>tree[i].lz=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//如果是叶子节点，赋值并返回 </span><br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>=nums[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br>ll mid=(l+r)/<span class="hljs-number">2</span>;<br>build(<span class="hljs-number">2</span>*i,l,mid);<span class="hljs-comment">//建左子树 </span><br>build(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//建右子树 </span><br><span class="hljs-comment">//更新线段和 </span><br>tree[i].<span class="hljs-keyword">sum</span>=tree[<span class="hljs-number">2</span>*i].<span class="hljs-keyword">sum</span>+tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].<span class="hljs-keyword">sum</span>;<br>&#125;<br><span class="hljs-keyword">void</span> pushdown(<span class="hljs-built_in">int</span> i)<br>&#123;<br><span class="hljs-keyword">if</span>(tree[i].lz)<br>&#123;<br>tree[<span class="hljs-number">2</span>*i].lz+=tree[i].lz;<br>tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].lz+=tree[i].lz;<br>ll mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br>tree[<span class="hljs-number">2</span>*i].<span class="hljs-keyword">sum</span>+=tree[i].lz*(mid-tree[i].l+<span class="hljs-number">1</span>);<br>tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].<span class="hljs-keyword">sum</span>+=tree[i].lz*(tree[i].r-mid);<br>tree[i].lz=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">void</span> <span class="hljs-keyword">mod</span>(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> k)<br>&#123;<br><span class="hljs-comment">//区间被完全包括，更新sum，lz </span><br><span class="hljs-keyword">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br>&#123;<br>tree[i].<span class="hljs-keyword">sum</span>+=k*(tree[i].r-tree[i].l+<span class="hljs-number">1</span>);<br>tree[i].lz+=k;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>pushdown(i);<br>ll mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(l&lt;=mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i,l,r,k);<br><span class="hljs-keyword">if</span>(r&gt;mid)<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r,k);<br><span class="hljs-comment">//更新和</span><br>tree[i].<span class="hljs-keyword">sum</span>=tree[<span class="hljs-number">2</span>*i].<span class="hljs-keyword">sum</span> +tree[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>].<span class="hljs-keyword">sum</span>;<br>&#125;<br>ll query(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r)<br>&#123;<br><span class="hljs-comment">//区间被完全包括，返回sum </span><br><span class="hljs-keyword">if</span>(l&lt;=tree[i].l&amp;&amp;r&gt;=tree[i].r)<br><span class="hljs-keyword">return</span> tree[i].<span class="hljs-keyword">sum</span>;<br>pushdown(i);<br>ll mid=tree[i].l+tree[i].r&gt;&gt;<span class="hljs-number">1</span>;<br>ll res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(l&lt;=mid)<br>res+=query(<span class="hljs-number">2</span>*i,l,r);<br><span class="hljs-keyword">if</span>(r&gt;mid)<br>res+=query(<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,l,r);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">int</span> main()<br>&#123;<br><span class="hljs-built_in">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cin&gt;&gt;nums[i];<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">int</span> op,a,b,c;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;op;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br><span class="hljs-keyword">mod</span>(<span class="hljs-number">1</span>,a,b,c);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b;<br>cout&lt;&lt;query(<span class="hljs-number">1</span>,a,b)&lt;&lt;endl;<br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>进制转换与大阶乘</title>
    <link href="/2022/08/27/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%A4%A7%E9%98%B6%E4%B9%98/"/>
    <url>/2022/08/27/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%A4%A7%E9%98%B6%E4%B9%98/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2">进制转换</a><ul><li><a href="#%E9%A2%98%E7%9B%AE">题目</a></li></ul></li><li><a href="#%E5%A4%A7%E9%98%B6%E4%B9%98">大阶乘</a><ul><li><a href="#%E9%A2%98%E7%9B%AE-1">题目</a></li></ul></li></ul><!-- /TOC --><h3 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换"></a> 进制转换</h3><blockquote><p>下面的模板可用于36以内进制任意转换</p></blockquote><h4 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h4><p>将M进制的数X转换为N进制的数输出。<br />输入的第一行包括两个整数：M和N(2&lt;=M,N&lt;=36)。<br />下面的一行输入一个数X，X是M进制的数，现在要求你将M进制的数X转换成N进制的数输出。</p><p>input:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">36</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">XYZZA765</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10374545654665<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s,<span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> len=s.size();<br>    <span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">string</span> res;<br>    <span class="hljs-keyword">while</span>(i&lt;len)<br>    &#123;<br>        <span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,tmp1=<span class="hljs-number">0</span>,tmp2=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i;j&lt;len;++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[j]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[j]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                tmp1=s[j]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">else</span><br>                tmp1=s[j]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">10</span>;<br>            <span class="hljs-built_in">int</span> t=k*a+tmp1;<br>            k=t%b;<br>            tmp2=t/b;<br>            <span class="hljs-keyword">if</span>(tmp2&lt;=<span class="hljs-number">9</span>)<br>                s[j]=tmp2+<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">else</span><br>                s[j]=tmp2<span class="hljs-number">-10</span>+<span class="hljs-string">&#x27;A&#x27;</span>;<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(k&lt;=<span class="hljs-number">9</span>)<br>            res+=k+<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">else</span><br>            res+=k<span class="hljs-number">-10</span>+<span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-keyword">while</span>(s[i]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>            ++i;<br>    &#125;<br>    reverse(res.begin(),res.end());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> m,n;<br>    <span class="hljs-built_in">string</span> s;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    cin&gt;&gt;s;<br>    cout&lt;&lt;convert(s,m,n)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="大阶乘"><a class="markdownIt-Anchor" href="#大阶乘"></a> 大阶乘</h3><h4 id="题目-2"><a class="markdownIt-Anchor" href="#题目-2"></a> 题目</h4><p>输入一个正整数N，输出N的阶乘<br />N&lt;=1000</p><p>input:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include&lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>int a[100000];<br>int main()<br>&#123;<br>    int n;<br>    cin&gt;&gt;n; <br>    int <span class="hljs-attribute">ws</span>=1;<br>    a[0]=1;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=2;i&lt;=n;++i)<br>    &#123;<br>        int <span class="hljs-attribute">k</span>=0;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=0;j&lt;ws;++j)<br>        &#123;<br>            int <span class="hljs-attribute">t</span>=i*a[j]+k;<br>            <span class="hljs-attribute">k</span>=t/10;<br>            a[j]=t%10;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(k)<br>        &#123;<br>            a[ws]=k%10;<br>            k/=10;<br>            ++ws;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=ws-1;i&gt;=0;--i)<br>        cout&lt;&lt;a[i];<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见问题</title>
    <link href="/2022/08/26/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/26/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#c%E4%B8%AD%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97">c++中的static关键字</a></li><li><a href="#c%E6%A8%A1%E6%9D%BF">c++模板</a></li><li><a href="#c%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB">c++深拷贝和浅拷贝的区别</a></li><li><a href="#c%E5%A4%9A%E6%80%81">c++多态</a></li><li><a href="#c%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88">c++智能指针</a></li><li><a href="#%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B">判别模型和生成模型</a></li><li><a href="#python%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6">python的垃圾回收机制</a></li><li><a href="#%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF">转置卷积</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8D%E5%B9%B3%E8%A1%A1%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F">数据集不平衡的处理方式</a></li><li><a href="#tensorflow%E5%92%8Cpytorch%E7%9A%84%E5%8C%BA%E5%88%AB">tensorflow和pytorch的区别</a></li><li><a href="#%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB">图像分类</a></li><li><a href="#%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B">目标检测</a></li></ul><!-- /TOC --><h2 id="c中的static关键字"><a class="markdownIt-Anchor" href="#c中的static关键字"></a> c++中的static关键字</h2><p>加载顺序（面向对象）</p><ul><li>静态-&gt;非静态-&gt;构造方法</li><li>父类静态-子类静态-父类非静态-父类构造-子类非静态-子类构造</li></ul><p>静态成员变量(面向对象)</p><ul><li>所有对象共享,不属于某个对象，可以通过类名访问，也可通过对象访问</li><li>在编译阶段分配内存，分配在数据区（全局区）</li><li>类内声明，类外初始化(class::var)</li><li>sizeof不会计算静态成员变量</li></ul><p>静态成员函数(面向对象)</p><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul><p>静态全局变量(面向过程)</p><ul><li>在数据区分配内存</li><li>未初始化会自动初始化为0</li><li>整个文件内可见，文件外不可见</li></ul><p>静态局部变量(面向过程)</p><ul><li>在数据区分配内存</li><li>一般在声明处初始化，未初始化会自动初始化为0</li><li>静态局部变量始终驻留在数据区，但他的作用域是局部作用域，当定义它的函数或语句块结束，其作用域随之结束</li></ul><blockquote><p>总结：静态变量具有全局变量的生命周期，但只能作用于自己的作用域。</p></blockquote><hr /><h2 id="c模板"><a class="markdownIt-Anchor" href="#c模板"></a> c++模板</h2><blockquote><p>模板是c++泛型编程的主要使用的技术</p></blockquote><p><strong>函数模板</strong></p><p>创建一个通用的函数，函数返回值类型和形参可以不指定，用一个虚拟的类型来表示</p><p>声明一个模板<code>template&lt;typename T&gt;</code>或者<code>template&lt;class T&gt;</code></p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">sum</span><span class="hljs-params">(T a,T b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> a=<span class="hljs-number">10.5</span>,b=<span class="hljs-number">20.00002</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;自动类型推导&quot;</span>&lt;&lt;endl;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,<span class="hljs-built_in">sum</span>(a,b));<br>cout&lt;&lt;<span class="hljs-string">&quot;显示指定类型&quot;</span>&lt;&lt;endl;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,<span class="hljs-built_in">sum</span>&lt;<span class="hljs-type">double</span>&gt;(a,b));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>注意</p><ul><li>自动推导类型需要推导出一致的类型</li><li>函数模板使用时必须确定<code>T</code>的类型</li><li>普通函数和函数模板都可调用时，先调用普通函数</li><li>如果类型和函数模板更匹配，则优先调用函数模板</li></ul><p><strong>类模板</strong></p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>T name;<br>M age;<br><span class="hljs-built_in">person</span>(T a,M b):<span class="hljs-built_in">name</span>(a),<span class="hljs-built_in">age</span>(b)&#123;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">person&lt;string,<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;cndh&quot;</span>,<span class="hljs-number">18</span>)</span></span>;<br>cout&lt;&lt;p.name&lt;&lt;endl;<br>cout&lt;&lt;p.age&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>类模板不能自动推导类型</li><li>类模板可以在模板参数列表中指定默认类型</li><li>类模板中定义的函数在调用时才创建</li></ul><hr /><h2 id="c深拷贝和浅拷贝的区别"><a class="markdownIt-Anchor" href="#c深拷贝和浅拷贝的区别"></a> c++深拷贝和浅拷贝的区别</h2><blockquote><p><strong>浅拷贝</strong> （默认方式）：将原对象的引用直接赋给新对象，只是原对象的一个引用。</p></blockquote><blockquote><p><strong>深拷贝</strong>： 创建一个新的对象，将原对象的各项属性拷贝过来，深拷贝会在堆中额外申请内存来储存数据，当数据成员中有指针时，必须要用深拷贝。</p></blockquote><ul><li>因为申请了新的内存，所以深拷贝改变新对象的属性对原对象没有影响，但是浅拷贝会影响</li><li>当成员中有指针时，必须用深拷贝。因为浅拷贝的新指针和旧指针都指向同一块内存，在新对象和旧对象析构时，已经释放的内存会被再次释放，这时会出现错误。</li></ul><hr /><h2 id="c多态"><a class="markdownIt-Anchor" href="#c多态"></a> c++多态</h2><p>编译时多态：在编译期间就确定了程序的行为，比如函数重载</p><p>运行时多态：指的是在不同继承关系的类对象去调用同一函数，产生了不同的行为</p><p><em><strong>override</strong></em></p><p>override是用来检查函数是否重写</p><p><em><strong>final</strong></em></p><p>加在类名后面表示该类不能被继承，加在函数后面表示函数不能被重写</p><p><em><strong>多继承存在的问题</strong></em></p><p>命名冲突</p><p><em><strong>向上转型</strong></em></p><p>向上转型是子类指针转换成父类指针</p><p><code>Parent* p =new son();</code></p><p><em><strong>向下转型</strong></em></p><p>因为父类指针不能操作子类独有的函数，即使父类指针指向子类的对象也不行，所以需要向下转型</p><p>向下转型有两种方式<code>dynamic_cast</code>和<code>static_cast</code>,前者更加安全一些</p><p>例如：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">Parent* pS<span class="hljs-keyword">on</span>=new S<span class="hljs-keyword">on</span>();<br>S<span class="hljs-keyword">on</span>* s=dynamic_cast<span class="hljs-variable">&lt;Son*&gt;</span>(pS<span class="hljs-keyword">on</span>);<br></code></pre></td></tr></table></figure><hr /><h2 id="c智能指针"><a class="markdownIt-Anchor" href="#c智能指针"></a> c++智能指针</h2><p><strong>内存泄漏</strong>：</p><ul><li><p>指因某些原因造成程序未能释放已不再使用的内存。内存泄漏并不是内存消失了，而是由于程序设计的问题，失去对某块内存的控制，导致无法利用该块内存。</p></li><li><p>内存泄漏会导致程序响应越来越慢，甚至崩溃</p></li><li><p>一般有2种内存泄漏，一种是堆区分配的内存没有及时释放，一种是套接字、文件描述符等没有释放，2种情形都会导致资源的浪费</p></li></ul><p><strong>RALL</strong></p><ul><li>RAII（Resource Acquisition Is Initialization）是一种将对象生命周期和资源绑定的技术</li><li>对象创建时获取资源，析构时释放资源</li></ul><p>智能指针就具有RALL的特性</p><p><strong>auto_ptr</strong></p><p>c++98中就已经提供了智能指针auto_ptr</p><p>例如：<code>auto_ptr&lt;int&gt; p(new int)</code>就相当于 <code>int * p=new int</code></p><p>auto_ptr的局限性：</p><ul><li>拷贝或者赋值会导致原指针变为<code>NULL</code>，如<code>p1=p2</code>后，<code>p2变成了NULL</code></li><li>不支持对象数组的内存管理</li></ul><p><strong>unique_ptr</strong></p><p>不能直接进行赋值或者拷贝构造，如：<code>p1 = p2</code>和<code>unique_ptr&lt;int&gt; p1(p2)</code></p><p>如果要强行执行的话要加上<code>move</code>，如：<code>p1 = std::move(p2)</code>和<code>unique_ptr&lt;int&gt; p1(std::move(p2))</code></p><p><strong>shared_ptr</strong></p><p>通过<strong>引用计数</strong>(<code>use_count()</code>)的方式来实现多个<code>shared_ptr</code>对象之间共享资源</p><ul><li>shared_ptr在其内部，给每个资源都有一份计数表，用来记录该份资源被几个指针共享</li><li>在对象被销毁时(也就是析构函数调用)，就说明自己不使用该资源了，对象的引用计数减一</li><li>如果引用计数是0，就说明自己是最后一个使用该资源的对象，必须释放该资源</li><li>如果不是0，就说明除了自己还有其他对象在使用该份资源，不能释放该资源，否则其他对象就成野指针了</li></ul><p>注意：两个对象交叉使用<strong>shared_ptr</strong>(互相获得对方的share指针),会导致内存泄漏</p><p><strong>weak_ptr</strong></p><p>专门为了解决上面的<strong>shared_ptr</strong>的问题，不支持RALL，不释放资源，不增加或减少引用计数</p><p>具体参考<a href="https://blog.csdn.net/cpp_learner/article/details/118912592?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166191088916782414982504%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166191088916782414982504&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-118912592-null-null.142%5Ev42%5Epc_rank_34,185%5Ev2%5Econtrol&amp;utm_term=c%2B%2B%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88&amp;spm=1018.2226.3001.4187">相关链接</a></p><hr /><h2 id="判别模型和生成模型"><a class="markdownIt-Anchor" href="#判别模型和生成模型"></a> 判别模型和生成模型</h2><p>判别模型：直接学习条件概率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(y|x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><br />生成模型：学习联合概率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，然后可以计算条件概率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(y|x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>以及其他信息，需要的数据量较大</p><p>简单说，要判断一个苹果是好是坏，判别模型会直接给出是好的概率和是坏的概率，而生成模型分别学习出两种苹果各自对应的模型，然后将要预测的苹果的特征分别输入不同模型，然后比较两个模型输出概率的大小，选出合适的类别</p><p>判别模型：</p><ul><li>感知机</li><li>k近邻</li><li>决策树</li><li>逻辑思蒂回归</li><li>svm</li><li>boosting</li><li>最大熵模型</li></ul><p>生成模型：</p><ul><li>朴素贝叶斯</li><li>混合高斯模型</li><li>隐马尔可夫模型</li></ul><h2 id="python的垃圾回收机制"><a class="markdownIt-Anchor" href="#python的垃圾回收机制"></a> python的垃圾回收机制</h2><blockquote><p>python采用的是<strong>引用计数</strong>为主，<strong>标记—清除</strong>和<strong>分代收集</strong>为辅的策略。</p></blockquote><p><strong>引用计数</strong><br />每个对象维护一个字段来记录对象被引用的次数，当新的引用指向该对象的时候，引用计数的值加1,当某个引用失效时，引用计数值减一。当引用计数的值为0时，会释放占用的内存空间。</p><p>缺点：</p><ul><li>需要额外的空间维护引用次数</li><li>对象的循环引用会导致内存泄漏</li></ul><p>引用计数增加的情况：</p><ul><li>对象被创建，例如 a = 23</li><li>对象被引用，例如 b = a</li><li>对象被作为参数，传入到一个函数中，例如 fun(a)</li><li>对象被作为一个元素，存储在容器中</li></ul><p>引用计数减少的情况：</p><ul><li>对象的别名被显式销毁，例如 del a</li><li>对象的别名被赋予新的对象，例如 a = 24</li><li>一个对象离开它的作用域，例如 f 的函数执行完毕时，func函数中的局部变量</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ul><p><strong>分代回收</strong></p><ul><li><p>分代回收是一种以空间换时间的方式，Python将内存根据对象的存活时间划分为不同的集合，每一个集合称为一个代，Python将内存分为了3“代”，分别代表<strong>年轻代</strong>（第0代）、<strong>中年代</strong>（第1代）、<strong>老年代</strong>（第2代），它们对应的是3个链表，它们的垃圾收集频率随着对象的存活时间的增大而减小</p></li><li><p>新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾回收机制就会被触发，把那些可以被回收的对象被回收掉，而那些不会被回收的对象就会被移动到中年代，依次类推， 老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期中。</p></li></ul><p><strong>标记–清除</strong></p><p>是一种基于追踪回收（tracking GC）技术实现的垃圾回收算法。它分为两个阶段：</p><ol><li>标记阶段，GC会把所有的活动对象打上标记</li><li>把那些没有标记的对象（非活动对象）进行回收</li></ol><p><strong>如何判断哪些是活动对象，哪些是非活动对象？</strong></p><p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从跟对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。</p><h2 id="转置卷积"><a class="markdownIt-Anchor" href="#转置卷积"></a> 转置卷积</h2><blockquote><p>在语义分割中，会使用卷积层进行特征提取，然后通过转置卷积做上采样，恢复为原先的尺寸，这样才可以对原来的图像中每个像素都进行分类。<strong>转置卷积不是卷积的逆运算</strong></p></blockquote><p>基本步骤：</p><ul><li>在图像<strong>中间</strong>填充s-1行，s为步长</li><li>在图像<strong>四周</strong>填充k-p-1行，k为卷积和大小，p为padding</li><li>将kernel上下、左右翻转</li><li>做正常卷积即可</li></ul><h2 id="数据集不平衡的处理方式"><a class="markdownIt-Anchor" href="#数据集不平衡的处理方式"></a> 数据集不平衡的处理方式</h2><ol><li>数据增广<ul><li>进行一定的旋转缩放</li><li>RGB三通道提取三张图片</li><li>高斯模糊</li></ul></li><li>人工合成数据</li><li>给每种类别赋予权值，样本少的类别权值可以大一些，样本多的类别权值小一些</li></ol><h2 id="tensorflow和pytorch的区别"><a class="markdownIt-Anchor" href="#tensorflow和pytorch的区别"></a> tensorflow和pytorch的区别</h2><ol><li>tf是谷歌开源的深度学习框架，pytorch是facebook开源的深度学习框架</li><li>在tf1.0时，tf只支持静态的计算图，而pytorch支持动态的计算图，但是tf2.0也支持动态计算图了</li><li>tf的api更详细更丰富，pytorch的代码更简洁</li><li>tf有tensorboard这样的可视化工具，但实际上现在pytorch也能使用tensorboard</li></ol><h2 id="图像分类"><a class="markdownIt-Anchor" href="#图像分类"></a> 图像分类</h2><h2 id="目标检测"><a class="markdownIt-Anchor" href="#目标检测"></a> 目标检测</h2><p><strong>一阶段方法</strong></p><blockquote><p>对于输入图像，通过网络直接回归出目标大小、位置和类别。如SSD、YOLO系列</p></blockquote><p><strong>二阶段方法</strong></p><blockquote><p>先成可能的候选框，然后进行分类，进一步校正候选框，如RCNN，FAST-RCNN，FASTER-RCNN，MASK-RCNN等</p></blockquote><p><strong>selective search</strong></p><blockquote><p>主要是将较为相似的小区域合并，并生成这些区域的边界框</p></blockquote><p><strong>RCNN</strong></p><ul><li>通过selective search生成RP(region proposal)</li><li>通过cnn对每个RP提取特征</li><li>通过svm进行分类</li><li>对完成分类的候选框进行更精确的定位，确定最终的候选框</li></ul><p><strong>Fast RCNN</strong></p><ul><li>对整张图像提取特征，不用每个候选框都提取</li><li>通过selective search 生成候选框映射到featuremap中</li><li>通过roi pooling生成固定尺寸的featuremap</li><li>通过softmax进行分类</li><li>通过NMS校正候选框</li></ul><p><strong>Faster Rcnn</strong></p><ul><li>使用RPN替代了selective research,提高了速度</li><li>RPN过程中，每个像素生成若干个锚框，然后生成稍微准确一些的候选框</li><li>将这些候选框映射到featuremap中</li><li>后续步骤与fast rcnn相同</li></ul><p><strong>mask rcnn</strong></p><p><strong>SSD</strong></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2022/08/26/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2022/08/26/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%B9%B6%E6%9F%A5%E9%9B%86">并查集</a></li><li><a href="#%E9%80%92%E5%BD%92%E7%9A%84%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9%E7%9A%84%E7%A5%96%E5%85%88">递归的查找节点的祖先</a></li><li><a href="#%E4%BE%8B%E9%A2%98">例题</a></li></ul><!-- /TOC --><h3 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h3><blockquote><p>通过一个数组来保存各个节点的祖先，所有连通的节点的祖先相同，常用于解决最小生成树，图的连通性等问题</p></blockquote><h3 id="递归的查找节点的祖先"><a class="markdownIt-Anchor" href="#递归的查找节点的祖先"></a> 递归的查找节点的祖先</h3><p>首先假设有<code>N</code>个节点，定义一个数组<code>vset[N]</code>记录所有节点的祖先，<code>vset[N]初始化为-1</code></p><p>定义一个<code>find</code>函数来查找祖先</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">int</span> <span class="hljs-keyword">find</span>(<span class="hljs-keyword">int</span> a)<br>&#123;<br>    <span class="hljs-keyword">if</span>(vset[a]==-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        vset[a]=<span class="hljs-keyword">find</span>(vset[a]);<br>        <span class="hljs-keyword">return</span> vset[a];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p>有<code>n</code>条道路，<code>m</code>个村庄,计算出使所有村庄连通的最低成本</p><p>输入n,m，然后输入n行，每一行输入u,v,w表示两个村庄的编号和道路成本</p><p>输出使所有村庄连通的最低成本</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">typedef</span> vector&lt;<span class="hljs-type">int</span>&gt; vi;<br><span class="hljs-type">int</span> vset[<span class="hljs-number">1000</span>];<br><span class="hljs-function">vector&lt;vi&gt; <span class="hljs-title">e</span><span class="hljs-params">(<span class="hljs-number">1000</span>,vi(<span class="hljs-number">3</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vset[a]==<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        vset[a]=<span class="hljs-built_in">find</span>(vset[a]);<br>        <span class="hljs-keyword">return</span> vset[a];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(vset,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(vset));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    &#123;<br>        cin&gt;&gt;e[i][<span class="hljs-number">0</span>]&gt;&gt;e[i][<span class="hljs-number">1</span>]&gt;&gt;e[i][<span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(e.<span class="hljs-built_in">begin</span>(),e.<span class="hljs-built_in">end</span>(),[](vi a,vi b)&#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">2</span>]&lt;b[<span class="hljs-number">2</span>];<br>    &#125;);<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(vi&amp; t: e)<br>    &#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-built_in">find</span>(t[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">int</span> y=<span class="hljs-built_in">find</span>(t[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(x!=y)<br>        &#123;<br>            ++cnt;<br>            ans+=t[<span class="hljs-number">2</span>];<br>            vset[x]=y;<br>            <span class="hljs-keyword">if</span>(cnt==n<span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>重排链表</title>
    <link href="/2022/08/25/%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/08/25/%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8">重排链表</a></li><li><a href="#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8">反转链表</a></li><li><a href="#%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8">合并链表</a></li><li><a href="#%E9%A2%98%E8%A7%A3">题解</a></li></ul><!-- /TOC --><h3 id="重排链表"><a class="markdownIt-Anchor" href="#重排链表"></a> 重排链表</h3><blockquote><p>来源于leetcode上的一道题 <a href="https://leetcode.cn/problems/reorder-list/">重排链表</a>，因为这到题涉及到许多链表的知识，正好拿来复习一下</p></blockquote><p>题目描述</p><p>给定一个单链表 L 的头节点 head ，单链表 L 表示为：<br /><code>L0 → L1 → … → Ln - 1 → Ln</code></p><p>请将其重新排列后变为：</p><p><code>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</code></p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ul><li>先找到链表的中点</li><li>将链表后半段反转</li><li>将前后两端重新合并</li></ul><h3 id="找到链表中点快慢指针"><a class="markdownIt-Anchor" href="#找到链表中点快慢指针"></a> 找到链表中点（快慢指针）</h3><blockquote><p>设置两个指针，其中快的指针每次移动2次，慢指针移动一次，当快指针到达尾部，慢指针的位置就是中点</p></blockquote><p>代码：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs autoit">ListNode* middleNode(ListNode* head) &#123;<br>        ListNode *low=head<span class="hljs-comment">;</span><br>        ListNode *fast=head<span class="hljs-comment">;</span><br>        //如果有偶数个节点，以下条件找到的是右侧中点<br>        //如果要找左侧中点，改为：fast-&gt;<span class="hljs-keyword">next</span>!=<span class="hljs-literal">NULL</span>&amp;&amp;fast-&gt;<span class="hljs-keyword">next</span>-&gt;<span class="hljs-keyword">next</span>!=<span class="hljs-literal">NULL</span>即可<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">NULL</span>&amp;&amp;fast-&gt;<span class="hljs-keyword">next</span>!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            low=low-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>            fast=fast-&gt;<span class="hljs-keyword">next</span>-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> low<span class="hljs-comment">;</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="反转链表"><a class="markdownIt-Anchor" href="#反转链表"></a> 反转链表</h3><blockquote><p>其实反转链表可以用线性表做，时间复杂度差不多，但这里还是回归链表操作</p></blockquote><p>代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ListNode* reverseList(ListNode* head) &#123;<br>        ListNode* <span class="hljs-attribute">pre</span>=<span class="hljs-literal">NULL</span>;<br>        ListNode* <span class="hljs-attribute">l</span>=head;<br>        <span class="hljs-keyword">while</span>(l!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            ListNode* <span class="hljs-attribute">tmp</span>=l-&gt;next;<br>            l-&gt;<span class="hljs-attribute">next</span>=pre;<br>            <span class="hljs-attribute">pre</span>=l;<br>            <span class="hljs-attribute">l</span>=tmp;<br>        &#125;<br>        return pre;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="合并链表"><a class="markdownIt-Anchor" href="#合并链表"></a> 合并链表</h3><blockquote><p>将l1和l2交错合并</p></blockquote><p>代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void merge(ListNode* l1,ListNode* l2)<br>&#123;<br>    <span class="hljs-keyword">while</span>(l1!=<span class="hljs-literal">NULL</span>&amp;&amp;l2!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        ListNode* <span class="hljs-attribute">l1t</span>=l1-&gt;next;<br>        ListNode* <span class="hljs-attribute">l2t</span>=l2-&gt;next;<br>        l1-&gt;<span class="hljs-attribute">next</span>=l2;<br>        <span class="hljs-attribute">l1</span>=l1t;<br>        l2-&gt;<span class="hljs-attribute">next</span>=l1;<br>        <span class="hljs-attribute">l2</span>=l2t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void reorderList(ListNode* head) &#123;<br>    ListNode* <span class="hljs-attribute">mid</span>=middleNode(head);<br>    ListNode* <span class="hljs-attribute">l1</span>=head;<br>    ListNode* <span class="hljs-attribute">l2</span>=mid-&gt;next;<br>    mid-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    ListNode* <span class="hljs-attribute">r</span>=reverseList(l2);<br>    merge(l1,r);<br>&#125;<br>ListNode* reverseList(ListNode* head) &#123;<br>    ListNode* <span class="hljs-attribute">pre</span>=<span class="hljs-literal">NULL</span>;<br>    ListNode* <span class="hljs-attribute">l</span>=head;<br>    <span class="hljs-keyword">while</span>(l!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        ListNode* <span class="hljs-attribute">tmp</span>=l-&gt;next;<br>        l-&gt;<span class="hljs-attribute">next</span>=pre;<br>        <span class="hljs-attribute">pre</span>=l;<br>        <span class="hljs-attribute">l</span>=tmp;<br>    &#125;<br>    return pre;<br>&#125;<br>ListNode* middleNode(ListNode* head) &#123;<br>    ListNode *<span class="hljs-attribute">low</span>=head;<br>    ListNode <span class="hljs-number">*fa</span><span class="hljs-attribute">st</span>=head;<br>    <span class="hljs-keyword">while</span>(fast-&gt;next!=<span class="hljs-literal">NULL</span>&amp;&amp;fast-&gt;next-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-attribute">low</span>=low-&gt;next;<br>        <span class="hljs-attribute">fast</span>=fast-&gt;next-&gt;next;<br>    &#125;<br>    return low;<br>&#125;<br>void merge(ListNode* l1,ListNode* l2)<br>&#123;<br>    <br>    <span class="hljs-keyword">while</span>(l1!=<span class="hljs-literal">NULL</span>&amp;&amp;l2!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        ListNode* <span class="hljs-attribute">l1t</span>=l1-&gt;next;<br>        ListNode* <span class="hljs-attribute">l2t</span>=l2-&gt;next;<br>        l1-&gt;<span class="hljs-attribute">next</span>=l2;<br>        <span class="hljs-attribute">l1</span>=l1t;<br>        l2-&gt;<span class="hljs-attribute">next</span>=l1;<br>        <span class="hljs-attribute">l2</span>=l2t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>差分与前缀和</title>
    <link href="/2022/08/24/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2022/08/24/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%89%8D%E7%BC%80%E5%92%8C">前缀和</a></li><li><a href="#%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C">一维前缀和</a></li><li><a href="#%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C">二维前缀和</a></li><li><a href="#%E4%BE%8B%E9%A2%98">例题</a></li><li><a href="#%E5%B7%AE%E5%88%86">差分</a></li><li><a href="#%E4%B8%80%E7%BB%B4%E5%B7%AE%E5%88%86">一维差分</a></li><li><a href="#%E4%BE%8B%E9%A2%98-1">例题</a></li><li><a href="#%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86">二维差分</a></li><li><a href="#%E4%BE%8B%E9%A2%98-2">例题</a></li></ul><!-- /TOC --><h3 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h3><blockquote><p>前缀和指的是序列的前n项和</p></blockquote><h3 id="一维前缀和"><a class="markdownIt-Anchor" href="#一维前缀和"></a> 一维前缀和</h3><p>先看一个例题：<br />输入一个长度为n的整数序列。接下来再输入m个询问，每个询问输入一对l, r。对于每个询问，输出原序列中从第l个数到第r个数的和。<br />如果使用暴力枚举，时间复杂度为 <code>O(n*m)</code>,但是使用前缀和的话，时间复杂度可降为 <code>O(n)</code><br />input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>6<br>10<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>;<br><span class="hljs-type">int</span> a[N]; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m,l,r;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>cin&gt;&gt;a[i];<br>a[i]+=a[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;l&gt;&gt;r;<br>cout&lt;&lt;a[r]-a[l<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维前缀和"><a class="markdownIt-Anchor" href="#二维前缀和"></a> 二维前缀和</h3><p>每一个元素<code>a[i][j]</code>表示左上角和第<code>i</code>行，第<code>j</code>列围成的元素之和</p><p>更新方式： <code>a[i][j]+=a[i-1][j]+a[i][j-1]-a[i-1][j-1]</code></p><p>即下图中：紫色区域+绿色区域-红色区域</p><p><img src="https://img-blog.csdnimg.cn/20201214201734653.png" alt="" /></p><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p>输入一个n行m列的整数矩阵，再输入q个询问，每个询问包含四个整数x1, y1, x2, y2，表示一个子矩阵的左上角坐标和右下角坐标。<br />对于每个询问输出子矩阵中所有数的和</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">17<br>27<br>21<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int N=1e3;<br>int a<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>; <br>int main()<br>&#123;<br>int n,m,q;<br>int x1,y1,x2,y2;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br>for(int i=1;i&lt;=n;++i)<br>&#123;<br>for(int j=1;j&lt;=m;++j)<br>&#123;<br>cin&gt;&gt;a<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>;<br>a<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>+=a<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>+a<span class="hljs-comment">[i]</span><span class="hljs-comment">[j-1]</span>-a<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-1]</span>;<br>&#125;<br>&#125;<br>while(q--)<br>&#123;<br>cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;<br>cout&lt;&lt;a<span class="hljs-comment">[x2]</span><span class="hljs-comment">[y2]</span>-a<span class="hljs-comment">[x1-1]</span><span class="hljs-comment">[y2]</span>-a<span class="hljs-comment">[x2]</span><span class="hljs-comment">[y1-1]</span>+a<span class="hljs-comment">[x1-1]</span><span class="hljs-comment">[y1-1]</span>&lt;&lt;endl;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3><blockquote><p>可以看作前缀和的逆运算</p></blockquote><h3 id="一维差分"><a class="markdownIt-Anchor" href="#一维差分"></a> 一维差分</h3><p>常用于给数组的某个区间段<code>[l,r]</code>加上某个数<code>c</code>，可以减小时间复杂度</p><ul><li>先构造差分数组：<code>b[i]=a[i]-a[i-1]</code></li><li>构造好之后 <code>b[l]+=c</code>,<code>b[r+1]-=c</code></li><li>然后根据<code>b[i]+=b[i-1]</code>计算前缀和数组，就是最终答案</li></ul><h3 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h3><p>输入一个长度为n的整数序列。<br />接下来输入m个操作，每个操作包含三个整数l, r, c，表示将序列中[l, r]之间的每个数加上c。<br />请你输出进行完所有操作后的序列。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e3</span>;<br><span class="hljs-type">int</span> a[N],b[N]; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m,l,r,c;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>cin&gt;&gt;a[i];<br>b[i]=a[i]-a[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;<br>b[l]+=c;<br>b[r+<span class="hljs-number">1</span>]-=c;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cout&lt;&lt;b[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维差分"><a class="markdownIt-Anchor" href="#二维差分"></a> 二维差分</h3><p>常用于给某个子矩阵的每个元素加上 c</p><ul><li>二维差分数组的构造：<br /><code>b[i][j]=a[i][j]-a[i-1][j]-a[i][j-1]+a[i-1][j-1]</code></li><li>修改差分数组：  <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">b<span class="hljs-comment">[x1]</span><span class="hljs-comment">[y1]</span>+=c;<br>b<span class="hljs-comment">[x1]</span><span class="hljs-comment">[y2+1]</span>-=c;<br>b<span class="hljs-comment">[x2+1]</span><span class="hljs-comment">[y1]</span>-=c;<br>b<span class="hljs-comment">[x2+1]</span><span class="hljs-comment">[y2+1]</span>+=c;<br></code></pre></td></tr></table></figure></li><li>生成前缀和数组：<br /><code>b[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];</code></li></ul><h3 id="例题-3"><a class="markdownIt-Anchor" href="#例题-3"></a> 例题</h3><p>输入一个n行m列的整数矩阵，再输入q个操作，每个操作包含五个整数x1, y1, x2, y2, c，其中(x1, y1)和(x2, y2)表示一个子矩阵的左上角坐标和右下角坐标。<br />每个操作都要将选中的子矩阵中的每个元素的值加上c。<br />请你将进行完所有操作后的矩阵输出。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int <span class="hljs-symbol">N</span>=<span class="hljs-number">1e3</span>;<br>int a[<span class="hljs-symbol">N</span>][<span class="hljs-symbol">N</span>],b[<span class="hljs-symbol">N</span>][<span class="hljs-symbol">N</span>]; <br>int main()<br>&#123;<br>int n,m,q;<br>int x1,y1,x2,y2,c;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br>for(int i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>for(int j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>&#123;<br>cin&gt;&gt;a[i][j];<br>b[i][j]=a[i][j]-a[i<span class="hljs-number">-1</span>][j]-a[i][j<span class="hljs-number">-1</span>]+a[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>&#125;<br>&#125;<br>while(q--)<br>&#123;<br>cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;<br>b[x1][y1]+=c;<br>b[x1][y2+<span class="hljs-number">1</span>]-=c;<br>b[x2+<span class="hljs-number">1</span>][y1]-=c;<br>b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>]+=c;<br>&#125;<br>for(int i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>for(int j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>b[i][j]+=b[i<span class="hljs-number">-1</span>][j]+b[i][j<span class="hljs-number">-1</span>]-b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>&#125;<br>for(int i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br>for(int j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>cout&lt;&lt;b[i][j]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>cout&lt;&lt;endl;<br>&#125;<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速幂矩阵幂</title>
    <link href="/2022/08/23/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%9F%A9%E9%98%B5%E5%B9%82/"/>
    <url>/2022/08/23/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%9F%A9%E9%98%B5%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%B9%82">例1 快速幂</a></li><li><a href="#%E4%BE%8B2-%E7%9F%A9%E9%98%B5%E5%B9%82">例2 矩阵幂</a></li></ul><!-- /TOC --><blockquote><p><strong>快速幂</strong> 快速幂常用于计算指数非常大的幂，核心思想就是每一步都把指数分成两半，而相应的底数做平方运算。这样不仅能把非常大的指数给不断变小，所需要执行的循环次数也变小，而最后表示的结果却一直不会变。</p></blockquote><p><em>直接看例题</em></p><h3 id="例1-快速幂"><a class="markdownIt-Anchor" href="#例1-快速幂"></a> 例1 快速幂</h3><p>输入三个数字a,b,c,输出 a^b <strong>mod</strong> c<br />input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">10</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>a=a%c;<br><span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b%<span class="hljs-number">2</span>)<br>ans=(ans*a)%c;<br>a=(a*a)%c;<br>b/=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>cout&lt;&lt;<span class="hljs-built_in">ksm</span>()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例2-矩阵幂"><a class="markdownIt-Anchor" href="#例2-矩阵幂"></a> 例2 矩阵幂</h3><p>描述<br />给定一个n*n的矩阵，输出矩阵的k次方</p><p>输入描述<br />有多组输入，第一行输入n和k<br />后面n行输入矩阵元素<br />2&lt;=n&lt;=10,1&lt;=k&lt;=5<br />输出描述<br />每组输入输出矩阵的k次方<br />input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">8</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">153 </span><span class="hljs-number">96</span><br><span class="hljs-symbol">108 </span><span class="hljs-number">81</span><br><span class="hljs-symbol">1216 </span><span class="hljs-number">1248</span> <span class="hljs-number">708</span><br><span class="hljs-symbol">1089 </span><span class="hljs-number">927</span> <span class="hljs-number">504</span><br><span class="hljs-symbol">1161 </span><span class="hljs-number">1151</span> <span class="hljs-number">739</span><br><span class="hljs-symbol">47 </span><span class="hljs-number">29</span> <span class="hljs-number">41</span> <span class="hljs-number">22</span> <span class="hljs-number">16</span><br><span class="hljs-symbol">147 </span><span class="hljs-number">103</span> <span class="hljs-number">73</span> <span class="hljs-number">116</span> <span class="hljs-number">94</span><br><span class="hljs-symbol">162 </span><span class="hljs-number">108</span> <span class="hljs-number">153</span> <span class="hljs-number">168</span> <span class="hljs-number">126</span><br><span class="hljs-symbol">163 </span><span class="hljs-number">67</span> <span class="hljs-number">112</span> <span class="hljs-number">158</span> <span class="hljs-number">122</span><br><span class="hljs-symbol">152 </span><span class="hljs-number">93</span> <span class="hljs-number">93</span> <span class="hljs-number">111</span> <span class="hljs-number">97</span><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title">M</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">int</span> row;<br>    <span class="hljs-built_in">int</span> col;<br>    <span class="hljs-built_in">int</span> m[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>    M(<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> c):row(r),col(c)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;row;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;col;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i==j)<br>                    m[i][j]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    m[i][j]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;      <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;row;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;col;++j)<br>                cin&gt;&gt;m[i][j];<br>        &#125; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;row;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;col;++j)<br>                cout&lt;&lt;m[i][j]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            cout&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    M <span class="hljs-keyword">operator</span>* (<span class="hljs-keyword">const</span> M&amp; t) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-function">M <span class="hljs-title">ans</span>(<span class="hljs-params">row,t.col</span>)</span>;<br>        memset(ans.m,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ans.m));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;row;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;t.col;++j)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>;k&lt;col;++k)<br>                &#123;<br>                    ans.m[i][j]+=m[i][k]*t.m[k][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>&#125;;<br><span class="hljs-function">M <span class="hljs-title">ksm</span>(<span class="hljs-params">M a,<span class="hljs-built_in">int</span> k</span>)</span><br>&#123;<br>    <span class="hljs-function">M <span class="hljs-title">ans</span>(<span class="hljs-params">a.row,a.col</span>)</span>;<br>    <span class="hljs-keyword">while</span>(k&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(k%<span class="hljs-number">2</span>)<br>            ans=ans*a;<br>        a=a*a;<br>        k/=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans; <br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> n,k;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>    &#123;<br>        <span class="hljs-function">M <span class="hljs-title">a</span>(<span class="hljs-params">n,n</span>)</span>;<br>        a.input();<br>        M ans=ksm(a,k);<br>        ans.output();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最短路</title>
    <link href="/2022/08/22/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <url>/2022/08/22/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E4%BE%8B1-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF-%E6%B4%9B%E8%B0%B7p4779">例1 单源最短路 洛谷p4779</a></li><li><a href="#spfa">SPFA</a></li><li><a href="#dijkstra%E6%99%AE%E9%80%9A%E7%89%88">Dijkstra普通版</a></li><li><a href="#dijkstra%E5%A0%86%E4%BC%98%E5%8C%96%E7%89%88ac">Dijkstra堆优化版(AC)</a><ul><li><a href="#%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%E5%AD%98%E5%9B%BE">链式前向星存图</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#%E4%BE%8B2-%E6%9C%80%E5%A4%9A%E7%BB%8F%E8%BF%87k%E6%9D%A1%E8%BE%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF">例2 最多经过k条边的最短路</a></li><li><a href="#bellmanford">Bellmanford</a></li><li><a href="#%E5%B9%B6%E6%9F%A5%E9%9B%86%E8%A7%A3%E6%9C%80%E7%9F%AD%E8%B7%AF">并查集解最短路</a></li></ul><!-- /TOC --><h3 id="例1-单源最短路-洛谷p4779"><a class="markdownIt-Anchor" href="#例1-单源最短路-洛谷p4779"></a> 例1 单源最短路 洛谷p4779</h3><p>题目描述</p><p>给定一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 条有向边的带非负权图，请你计算从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span> 出发，到每个点的距离。</p><p>数据保证你能从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span> 出发到任意点。</p><p>输入格式</p><p>第一行为三个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>s</mi></mrow><annotation encoding="application/x-tex">n, m, s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span></span></span></span>。<br />第二行起 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 行，每行三个非负整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i, v_i, w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 有一条权值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的有向边。</p><p>输出格式</p><p>输出一行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个空格分隔的非负整数，表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span> 到每个点的距离。</p><p>样例输入</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">6</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>提示</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq n \leq 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq m \leq 2\times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">s = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \leq u_i, v_i\leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>w</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">0 \leq w_i \leq 10 ^ 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>,</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mo>∑</mo><msub><mi>w</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">0 \leq \sum w_i \leq 10 ^ 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>。</p><h3 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> SPFA</h3><blockquote><p>此题用spfa会超时,这里写的代码弱化了数据范围，存图也直接用二维数组了，主要是复习spfa的思路</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,s;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e4</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> mp[N][N];<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">bool</span> vis[N]; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(mp,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(mp));<br><span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(dist));<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>dist[s]=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> u,v,w;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>&#123;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br>mp[u][v]=w;<br>&#125;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(s);<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> t=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>vis[t]=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(dist[i]&gt;dist[t]+mp[t][i])<br>&#123;<br>dist[i]=dist[t]+mp[t][i];<br><span class="hljs-keyword">if</span>(!vis[i])<br>&#123;<br>vis[i]=<span class="hljs-literal">true</span>;<br>q.<span class="hljs-built_in">push</span>(i);<br>&#125;<br>&#125;<br>&#125;<br>&#125; <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cout&lt;&lt;dist[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dijkstra普通版"><a class="markdownIt-Anchor" href="#dijkstra普通版"></a> Dijkstra普通版</h3><blockquote><p>此题用普通Dijkstra会超时,这里写的代码弱化了数据范围，存图也直接用二维数组了，主要是复习dj的思路</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs excel">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>,m,s;<br>const <span class="hljs-built_in">int</span> <span class="hljs-built_in">N</span>=<span class="hljs-number">1</span>e4+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> mp[<span class="hljs-built_in">N</span>][<span class="hljs-built_in">N</span>];<br><span class="hljs-built_in">int</span> dist[<span class="hljs-built_in">N</span>];<br>bool vis[<span class="hljs-built_in">N</span>]; <br><span class="hljs-built_in">int</span> main()<br>&#123;<br>memset(mp,<span class="hljs-number">0</span>x3f,sizeof(mp));<br>memset(dist,<span class="hljs-number">0</span>x3f,sizeof(dist));<br>cin&gt;&gt;<span class="hljs-built_in">n</span>&gt;&gt;m&gt;&gt;s;<br>dist[s]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> u,v,w;<br>for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>&#123;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br>mp[u][v]=w;<br>&#125;<br>for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;++i)<br>&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">t</span>=-<span class="hljs-number">1</span>;<br>for(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-built_in">n</span>;++j)<br>&#123;<br><span class="hljs-built_in">if</span>(!vis[j]&amp;&amp;(<span class="hljs-built_in">t</span>==-<span class="hljs-number">1</span>||dist[<span class="hljs-built_in">t</span>]&gt;dist[j]))<br><span class="hljs-built_in">t</span>=j;<br>&#125;<br>vis[<span class="hljs-built_in">t</span>]=<span class="hljs-built_in">true</span>;<br>for(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-built_in">n</span>;++j)<br>&#123;<br>dist[j]=<span class="hljs-built_in">min</span>(dist[j],dist[<span class="hljs-built_in">t</span>]+mp[<span class="hljs-built_in">t</span>][j]);<br>&#125;<br>&#125;<br>for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;++i)<br>cout&lt;&lt;dist[i]&lt;&lt;&#x27; &#x27;;<br>cout&lt;&lt;endl;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dijkstra堆优化版ac"><a class="markdownIt-Anchor" href="#dijkstra堆优化版ac"></a> Dijkstra堆优化版(AC)</h3><h4 id="链式前向星存图"><a class="markdownIt-Anchor" href="#链式前向星存图"></a> 链式前向星存图</h4><p>题目中给的节点数很多，属于稀疏图，二维数组无法存储，所以需要使用<strong>链式前向星</strong>存储，方法如下：</p><p>定义一个数组<code>head[]</code>,<code>head[a]</code>表示以a为起始点的最后一条边的序号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">cnt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span>：表示边的序号</p><p>结构体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">edge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span></span></span></span>，存储边</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">struct</span> edge<br>&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">to</span>;<span class="hljs-comment">//这条边指向的点 </span><br><span class="hljs-built_in">int</span> next;<span class="hljs-comment">//这条边的邻边的序号 </span><br><span class="hljs-built_in">int</span> w;<span class="hljs-comment">//这条边的权值 </span><br>&#125;;<br></code></pre></td></tr></table></figure><p>加边，如果是无向图，交换u和v再add一次即可</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void add(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)<br>&#123;<br>++<span class="hljs-keyword">cnt</span><span class="hljs-comment">;</span><br>e[<span class="hljs-keyword">cnt</span>].to=v<span class="hljs-comment">;</span><br>e[<span class="hljs-keyword">cnt</span>].w=w<span class="hljs-comment">;</span><br>e[<span class="hljs-keyword">cnt</span>].next=head[u]<span class="hljs-comment">;</span><br>head[u]=<span class="hljs-keyword">cnt</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>遍历以a为起点的所有边</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=head[a];i!=0;<span class="hljs-attribute">i</span>=edge[i].next)<br></code></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,s;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> head[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-comment">//边 </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span><br>&#123;<br><span class="hljs-type">int</span> to;<span class="hljs-comment">//这条边指向的点 </span><br><span class="hljs-type">int</span> next;<span class="hljs-comment">//这条边的邻边的序号 </span><br><span class="hljs-type">int</span> w;<span class="hljs-comment">//这条边的权值 </span><br>&#125;e[<span class="hljs-number">2</span>*N];<br><span class="hljs-comment">//优先级队列的节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w;<br><span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> nn,<span class="hljs-type">int</span> ww):<span class="hljs-built_in">n</span>(nn),<span class="hljs-built_in">w</span>(ww)&#123;&#125;<br><span class="hljs-comment">//重载运算符&lt;，为了建立小顶堆 </span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> node&amp; t) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> w&gt;t.w;<br>&#125;<br>&#125;; <br><span class="hljs-comment">//加边 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>++cnt;<br>e[cnt].to=v;<br>e[cnt].w=w;<br>e[cnt].next=head[u];<br>head[u]=cnt;<br>&#125;<br>priority_queue&lt;node&gt; q;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br><span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(dis));<br>dis[s]=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> u,v,w;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>&#123;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br><span class="hljs-built_in">add</span>(u,v,w);<br>&#125;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(s,<span class="hljs-number">0</span>));<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>node t=q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>u=t.n;<br><span class="hljs-keyword">if</span>(!vis[u])<br>&#123;<br>vis[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];i;i=e[i].next)<br>&#123;<br>v=e[i].to;<br>w=e[i].w;<br><span class="hljs-keyword">if</span>(dis[v]&gt;dis[u]+w)<br>&#123;<br>dis[v]=dis[u]+w;<br><span class="hljs-keyword">if</span>(!vis[v])<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(v,dis[v]));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>cout&lt;&lt;dis[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例2-最多经过k条边的最短路"><a class="markdownIt-Anchor" href="#例2-最多经过k条边的最短路"></a> 例2 最多经过k条边的最短路</h3><p>描述<br />给定 n 个点，m条有向边，起点s，终点d，最大边数k</p><p>第一行输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>s</mi><mo separator="true">,</mo><mi>d</mi><mo separator="true">,</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n,m,s,d,k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span><br />后面m行输入m条边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i,v_i,w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>输出从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>最多经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>条边时的最短路径<br />input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">100</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">100</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">200<br></code></pre></td></tr></table></figure><h3 id="bellmanford"><a class="markdownIt-Anchor" href="#bellmanford"></a> Bellmanford</h3><blockquote><p>Bellmanford常用于解决此类有边数限制的最短路</p></blockquote><p>代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> namespace std;<br><span class="hljs-type">int</span> n,m,s,d,k;<br><span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br>const <span class="hljs-type">int</span> N=<span class="hljs-number">1e4</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">100</span>][N];<br><span class="hljs-type">bool</span> vis[N];<br>struct edge<br>&#123;<br><span class="hljs-type">int</span> u,v,w;<br>//edge(<span class="hljs-type">int</span> uu,<span class="hljs-type">int</span> vv,<span class="hljs-type">int</span> ww):u(uu),v(vv),w(ww)&#123;&#125;<br>&#125;e[N];<br><span class="hljs-type">int</span> main()<br>&#123;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;d&gt;&gt;k;<br>memset(dp,<span class="hljs-number">0x3f</span>,sizeof(dp));<br>dp[<span class="hljs-number">0</span>][s]=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> u,v,w;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>&#123;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br>e[i].u=u;<br>e[i].v=v;<br>e[i].w=w;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;++i)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>&#123;<br>u=e[j].u;<br>v=e[j].v;<br>w=e[j].w;<br>dp[i][v]=min(dp[i][v],dp[i<span class="hljs-number">-1</span>][u]+w);<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans=inf;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;++i)<br>&#123;<br>ans=min(dp[i][d],ans);<br>&#125; <br><span class="hljs-keyword">if</span>(ans==inf)<br>cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span><br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="并查集解最短路"><a class="markdownIt-Anchor" href="#并查集解最短路"></a> 并查集解最短路</h3><p>先看一个例题</p><p><a href="https://www.nowcoder.com/practice/a29d0b5eb46b4b90bfa22aa98cf5ff17?tpId=40&amp;tqId=21438&amp;rp=1&amp;ru=/ta/kaoyan&amp;qru=/ta/kaoyan&amp;difficulty=&amp;judgeStatus=&amp;tags=/question-ranking">最短路径</a></p><p><strong>描述</strong></p><p>N个城市，标号从0到N-1，M条道路，第K条道路（K从0开始）的长度为2^K，求编号为0的城市到其他城市的最短距离</p><p><strong>输入描述</strong></p><p>第一行两个正整数N（2&lt;=N&lt;=100）M(M&lt;=500),表示有N个城市，M条道路 接下来M行两个整数，表示相连的两个城市的编号</p><p><strong>输出描述</strong></p><p>N-1行，表示0号城市到其他城市的最短路，如果无法到达，输出-1，数值太大的以MOD 100000 的结果输出。</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">8<br>9<br>11<br></code></pre></td></tr></table></figure><blockquote><p>思路：对于这道题，第k条边的长度为2^k，也就是说，第k条边会比前面所有边的和还要大。所以用并查集来做，当新加入边的两个端点u和v不连通时，这条边就是u到v的最短距离，因为后续如果再次出现以uv为端点的边，一定会比当前长度长。加入uv边后，更新两端点各自连通子图中各点间的距离即可。</p></blockquote><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">102</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> mp[N][N];<br><span class="hljs-type">int</span> vset[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(ll a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>    a=a%c;<br>    <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b%<span class="hljs-number">2</span>)<br>            ans=(ans*a)%c;<br>        a=(a*a)%c;<br>        b/=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(vset[a]==<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">else</span><br>&#123;<br>vset[a]=<span class="hljs-built_in">find</span>(vset[a]);<br><span class="hljs-keyword">return</span> vset[a];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(vset,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(vset));<br>    <span class="hljs-built_in">memset</span>(mp,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(mp));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    mp[i][i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> u,v,w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;m;++k)<br>    &#123;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        <span class="hljs-type">int</span> x=<span class="hljs-built_in">find</span>(u);<br>        <span class="hljs-type">int</span> y=<span class="hljs-built_in">find</span>(v);<br>        <span class="hljs-comment">//当两点不连通的时候才加入该边，此时该边是u到v的最短边</span><br><span class="hljs-keyword">if</span>(x!=y)<br>&#123;<br>w=<span class="hljs-built_in">ksm</span>(<span class="hljs-number">2</span>,k,mod);<br><span class="hljs-comment">//更新两个连通子图间各点的距离 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)==x)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(j)==y)<br>&#123;<br>mp[i][j]=mp[j][i]=(mp[i][u]+w+mp[v][j])%mod;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//连接两个连通子图</span><br>vset[x]=y; <br>&#125; <br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)<br>    cout&lt;&lt;mp[<span class="hljs-number">0</span>][i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>背包问题</title>
    <link href="/2022/08/22/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/22/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BE%8B%E9%A2%98101%E8%83%8C%E5%8C%85">例题1：01背包</a></li><li><a href="#%E4%BE%8B%E9%A2%982%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85">例题2：完全背包</a></li></ul><!-- /TOC --><blockquote><p><em><strong>背包问题</strong></em> 是经典的一类动态规划类型的题目，一般是有n种物品，每个物品有对应的价值w，然后背包体积为V，求能装入的物品的最大价值。</p></blockquote><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>设 <strong>dp[i][j]</strong> 为前 i 个物品，背包容量为 j 的最大价值。</p><p>那么考虑第i个物品是否放入，有两种情况：</p><ul><li>如果不放，那么等同于前 <strong>i−1</strong> 个物品，容量为j的背包的最优方案。</li><li>如果放，那么等同于前 <strong>i−1</strong> 个物品，容量为 <strong>j−v[i]</strong> 的背包的最优方案，再加上第i个物品的价值。</li></ul><p>那么可以得到转移方程：</p><p><em><strong>dp[i][j]=max(dp[i−1][j],dp[i−1][j−v[i]]+w[i])</strong></em></p><p>最终的答案就是 <strong>dp[n][V]</strong></p><p>观察到dp数组，第i行仅跟上一行有关系，故可以压缩一维，为了防止dp[i−1][j−v[i]]被覆盖掉，第二维度须<strong>反向枚举</strong>。</p><h4 id="例题101背包"><a class="markdownIt-Anchor" href="#例题101背包"></a> 例题1：01背包</h4><p>你有一个背包，最多能容纳的体积是V，现在有n个物品，第i个物品的体积为vi,价值为wi。</p><ol><li>求这个背包至多能装多大价值的物品？</li><li>若背包恰好装满，求至多能装多大价值的物品？</li></ol><p>输入第一行n,V<br />后面n行，输入第i件物品的体积vi和价值wi<br />输出：两个问题的答案，各占一行，如果无解输出0</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">14<br>9<br></code></pre></td></tr></table></figure><p>题解：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>int n,V;<br>const int N=1005;<br>int v<span class="hljs-comment">[N]</span>,w<span class="hljs-comment">[N]</span>;<br>int dp<span class="hljs-comment">[N]</span>;<br>int main()<br>&#123;<br>    cin&gt;&gt;n&gt;&gt;V;<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        cin&gt;&gt;v<span class="hljs-comment">[i]</span>;<br>        cin&gt;&gt;w<span class="hljs-comment">[i]</span>;<br>    &#125;<br>    //不要求装满<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        for(int j=V;j&gt;=v<span class="hljs-comment">[i]</span>;--j)<br>            dp<span class="hljs-comment">[j]</span>=max(dp<span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>    cout&lt;&lt;dp<span class="hljs-comment">[V]</span>&lt;&lt;endl;<br>    <br>    //要求装满<br>    memset(dp,-0x3f,sizeof(dp));<br>    dp<span class="hljs-comment">[0]</span>=0;<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        for(int j=V;j&gt;=v<span class="hljs-comment">[i]</span>;--j)<br>            dp<span class="hljs-comment">[j]</span>=max(dp<span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>    if(dp<span class="hljs-comment">[V]</span>&gt;0)<br>        cout&lt;&lt;dp<span class="hljs-comment">[V]</span>&lt;&lt;endl;<br>    else<br>        cout&lt;&lt;0&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例题2完全背包"><a class="markdownIt-Anchor" href="#例题2完全背包"></a> 例题2：完全背包</h4><p>描述与例题1相同，不过每种物品有<strong>任意</strong>个</p><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">13</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">189</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">360</span><br><span class="hljs-symbol">19 </span><span class="hljs-number">870</span><br><span class="hljs-symbol">14 </span><span class="hljs-number">184</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">298</span><br><span class="hljs-symbol">16 </span><span class="hljs-number">242</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">596<br>189<br></code></pre></td></tr></table></figure><p>题解：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>int n,V;<br>const int N=1005;<br>int v<span class="hljs-comment">[N]</span>,w<span class="hljs-comment">[N]</span>;<br>int dp<span class="hljs-comment">[N]</span>;<br>int main()<br>&#123;<br>    cin&gt;&gt;n&gt;&gt;V;<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        cin&gt;&gt;v<span class="hljs-comment">[i]</span>;<br>        cin&gt;&gt;w<span class="hljs-comment">[i]</span>;<br>    &#125;<br>    //不要求装满<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        for(int j=v<span class="hljs-comment">[i]</span>;j&lt;=V;++j)<br>            dp<span class="hljs-comment">[j]</span>=max(dp<span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>    cout&lt;&lt;dp<span class="hljs-comment">[V]</span>&lt;&lt;endl;<br>    <br>    //要求装满<br>    memset(dp,-0x3f,sizeof(dp));<br>    dp<span class="hljs-comment">[0]</span>=0;<br>    for(int i=1;i&lt;=n;++i)<br>    &#123;<br>        for(int j=v<span class="hljs-comment">[i]</span>;j&lt;=V;++j)<br>            dp<span class="hljs-comment">[j]</span>=max(dp<span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>    if(dp<span class="hljs-comment">[V]</span>&gt;0)<br>        cout&lt;&lt;dp<span class="hljs-comment">[V]</span>&lt;&lt;endl;<br>    else<br>        cout&lt;&lt;0&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯</title>
    <link href="/2022/08/22/%E5%9B%9E%E6%BA%AF/"/>
    <url>/2022/08/22/%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em><strong>回溯</strong></em>  核心思想和dfs相似，主要通过递归寻找可行解</p></blockquote><!-- TOC --><ul><li><a href="#%E4%BE%8B%E9%A2%981">例题1:</a></li><li><a href="#%E4%BE%8B%E9%A2%982">例题2:</a></li></ul><!-- /TOC --><h3 id="例题1"><a class="markdownIt-Anchor" href="#例题1"></a> 例题1:</h3><p>给定一个数组a[]和target的值，找出数组中可以使数字和为target的不同组合，输出所有符合要求的组合</p><ul><li>数组中数字可以重复使用</li><li>1,1,5和1,5,1视为一种方式<br />input:</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>题解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,target;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">typedef</span> vector&lt;<span class="hljs-type">int</span>&gt; vi;<br><span class="hljs-function">vi <span class="hljs-title">a</span><span class="hljs-params">(N)</span></span>;<br>vi tmp;<br>vector&lt;vi&gt; ans; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bk</span><span class="hljs-params">(<span class="hljs-type">int</span> idx,<span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(idx==n)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(target==<span class="hljs-number">0</span>)<br>    &#123;<br>        ans.<span class="hljs-built_in">push_back</span>(tmp);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">bk</span>(idx+<span class="hljs-number">1</span>,target);<br>    <span class="hljs-keyword">if</span>(target&gt;=a[idx])<br>    &#123;<br>        tmp.<span class="hljs-built_in">push_back</span>(a[idx]);<br>        <span class="hljs-built_in">bk</span>(idx,target-a[idx]);<br>        tmp.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;target;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>cin&gt;&gt;a[i];<br><br>    <span class="hljs-built_in">bk</span>(<span class="hljs-number">0</span>,target);<br>    <span class="hljs-keyword">for</span>(vi&amp; t:ans)<br>    &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> tt :t)<br>    cout&lt;&lt;tt&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例题2"><a class="markdownIt-Anchor" href="#例题2"></a> 例题2:</h3><p>给定一个数组a[]和target的值，找出数组中可以使数字和为target的不同组合，输出所有符合要求的组合</p><ul><li>数组中每个数字最多使用一次</li><li>1,1,5和1,5,1视为一种方式<br />input:</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>题解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,target;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">typedef</span> vector&lt;<span class="hljs-type">int</span>&gt; vi;<br><span class="hljs-function">vi <span class="hljs-title">a</span><span class="hljs-params">(N)</span></span>;<br>vi tmp;<br>vector&lt;vi&gt; ans; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bk</span><span class="hljs-params">(<span class="hljs-type">int</span> idx,<span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(idx==n)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(target==<span class="hljs-number">0</span>)<br>    &#123;<br>        ans.<span class="hljs-built_in">push_back</span>(tmp);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=idx;i&lt;n;++i)<br>    &#123;<br>    <span class="hljs-keyword">if</span>(target&gt;=a[i])<br>    &#123;<br>    <span class="hljs-keyword">if</span>(i&gt;idx&amp;&amp;a[i]==a[i<span class="hljs-number">-1</span>])<br>    <span class="hljs-keyword">continue</span>;<br>    tmp.<span class="hljs-built_in">push_back</span>(a[i]);<br>    <span class="hljs-built_in">bk</span>(i+<span class="hljs-number">1</span>,target-a[i]);<br>    tmp.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;target;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>cin&gt;&gt;a[i];<br><br>    <span class="hljs-built_in">bk</span>(<span class="hljs-number">0</span>,target);<br>    <span class="hljs-keyword">for</span>(vi&amp; t:ans)<br>    &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> tt :t)<br>    cout&lt;&lt;tt&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kmp算法</title>
    <link href="/2022/08/21/kmp%E7%AE%97%E6%B3%95/"/>
    <url>/2022/08/21/kmp%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em><strong>kmp</strong></em> 算法的核心思想：当匹配失败时，主串指针不回退，而是根据 <em><strong>next</strong></em> 数组，从适当的位置重新匹配，相比于暴力匹配，跳过了不可能匹配成功的部分，大大提升了效率</p></blockquote><blockquote><p><em><strong>next</strong></em> 数组每个位置的值表示前缀集合和后缀集合交集中,最长元素的长度</p></blockquote><pre><code class="hljs">        p:    a b a b a b c a    next[i]:  0 0 1 2 3 4 0 1</code></pre><p>例题:</p><p>给你两个字符串 s 和 p ，请你在 s 字符串中找出 p 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。</p><p>input:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abacdf</span><br><span class="hljs-attribute">acd</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>题解</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include&lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>const int <span class="hljs-attribute">N</span>=1e5;<br>int nxt[N];<br>void get_next(string p)<br>&#123;<br>int <span class="hljs-attribute">len</span>=p.size();<br>int <span class="hljs-attribute">i</span>=1,j=0;<br><span class="hljs-keyword">while</span>(i&lt;len)<br>&#123;<br><span class="hljs-keyword">if</span>(p[i]==p[j])<br>&#123;<br>nxt[i]=j+1;<br>++i;<br>++j;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-attribute">j</span>==0)<br>&#123;<br>nxt[i]=0;<br>++i;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-attribute">j</span>=nxt[j-1];<br>&#125;<br>&#125; <br>int main()<br>&#123;<br>string s,p;<br>cin&gt;&gt;s&gt;&gt;p;<br>int <span class="hljs-attribute">m</span>=s.size(),n=p.size();<br>int <span class="hljs-attribute">ans</span>=-1;<br><br><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0,j=0;i&lt;m;++i)<br>&#123;<br><span class="hljs-keyword">while</span>(j&gt;0&amp;&amp;s[i]!=p[j])<br><span class="hljs-attribute">j</span>=nxt[j-1];<br><span class="hljs-keyword">if</span>(s[i]==p[j])<br>++j;<br><span class="hljs-keyword">if</span>(<span class="hljs-attribute">j</span>==n)<br><span class="hljs-attribute">ans</span>=i-j+1;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面经</title>
    <link href="/2022/08/21/%E9%9D%A2%E7%BB%8F/"/>
    <url>/2022/08/21/%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#2022%E4%B8%AA%E4%BA%BA%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%A2%84%E6%8E%A8%E5%85%8D%E8%AE%B0%E5%BD%95">2022个人夏令营/预推免记录😢</a><ul><li><a href="#%E5%90%89%E5%A4%A7ai">吉大ai</a></li><li><a href="#%E8%A5%BF%E4%BA%A4cs">西交cs</a></li><li><a href="#%E5%8D%8E%E7%A7%91%E7%BD%91%E5%AE%89">华科网安</a></li><li><a href="#%E5%8C%97%E9%82%AE">北邮</a></li><li><a href="#%E5%9B%BD%E9%98%B2%E7%A7%91%E5%A4%A7%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B">国防科大系统工程</a></li><li><a href="#%E6%B5%99%E8%BD%AF">浙软</a></li><li><a href="#%E5%8D%97%E5%A4%A7cs">南大cs</a></li><li><a href="#%E5%8C%97%E8%88%AAai">北航ai</a></li><li><a href="#%E4%B8%9C%E5%8D%97cs">东南cs</a></li></ul></li><li><a href="#%E9%A2%84%E6%8E%A8%E5%85%8D">预推免</a><ul><li><a href="#%E5%A4%8D%E6%97%A6">复旦</a></li><li><a href="#%E8%A5%BF%E4%BA%A4">西交</a></li><li><a href="#%E5%93%88%E5%B7%A5%E5%A4%A7">哈工大</a></li><li><a href="#%E5%8C%97%E8%88%AAai-1">北航ai</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><!-- /TOC --><h2 id="2022个人夏令营预推免记录"><a class="markdownIt-Anchor" href="#2022个人夏令营预推免记录"></a> 2022个人夏令营/预推免记录😢</h2><h3 id="吉大ai"><a class="markdownIt-Anchor" href="#吉大ai"></a> 吉大ai</h3><ul><li>自我介绍</li><li>英文翻译</li><li>抽题目回答</li></ul><p>我抽到的是关于聚类的：</p><ul><li>什么是聚类</li><li>聚类和分类区别</li><li>聚类的性能指标</li><li>层次聚类方法有哪些？</li><li><em>后两个也是关于层次聚类的，忘了。。。</em></li></ul><h3 id="西交cs"><a class="markdownIt-Anchor" href="#西交cs"></a> 西交cs</h3><p>夏令营没有优营，没有考核，先报名然后团队内部面试（聊天）</p><h3 id="华科网安"><a class="markdownIt-Anchor" href="#华科网安"></a> 华科网安</h3><p>有机试，5道题，150min,题目记不清了，难度中等，机试成绩不计入总成绩，仅作为参考<br />面试就自我介绍，然后聊聊天，最后优营40人，大概1/3</p><h3 id="北邮"><a class="markdownIt-Anchor" href="#北邮"></a> 北邮</h3><p>入营未参加</p><h3 id="国防科大系统工程"><a class="markdownIt-Anchor" href="#国防科大系统工程"></a> 国防科大系统工程</h3><p>入营未参加</p><h3 id="浙软"><a class="markdownIt-Anchor" href="#浙软"></a> 浙软</h3><p>入营选择方向，一共八个方向，每个方向会布置任务，做完提交即可，按完成质量评优营</p><p>时间紧，随便做了下就交了，最后普通营员</p><h3 id="南大cs"><a class="markdownIt-Anchor" href="#南大cs"></a> 南大cs</h3><ul><li><p><strong>笔试</strong><br />很多要计算的题，题量挺大的<br /><strong>数据结构</strong>：排序算法性能，希尔排序序列、红黑树、b树、最短路径算法(dijkstra,bellford,floyd)、最小生成树、线性探测、优先级队列、汉诺塔问题、还有好几个读程序的题<br /><strong>计组</strong>：组相联映射、cache和主存给定命中率计算时间、想不起来了。。。<br />os：linux终端退出的符号，jvm，进程通信、一些语言特性（rust，ruby，scala），访管指令，还有一堆指令。。<br /><strong>计网</strong>：无类寻址，拥塞窗口、数据链路层、ip协议、后面记的不清楚了。。。。</p></li><li><p><strong>面试</strong><br />先英文介绍merge sort，问一些项目问题，然后问了个数学题（怎么在球面上确定一点？），然后问了下生活上的兴趣之类的</p></li></ul><h3 id="北航ai"><a class="markdownIt-Anchor" href="#北航ai"></a> 北航ai</h3><p>今年是第二届夏令营，入营120/1000，优营60</p><ul><li>先英文自我介绍</li><li>政治：谈谈科教兴国的理解</li><li>聊聊项目</li><li>因为我在下午，可能是老师累了把，没有问专业课，最后优营了</li></ul><p>北航和老师聊，问了些问题，都是比较底层的细节问题，<br />还记得的有：</p><ul><li>python 垃圾回收机制</li><li>c++ 智能指针的原理</li><li>如何判断链表有没有环</li></ul><h3 id="东南cs"><a class="markdownIt-Anchor" href="#东南cs"></a> 东南cs</h3><p>入营318人</p><ul><li>面试<ul><li>3分钟自我介绍</li><li>英文问题：cv的相关任务、参加的实践活动</li><li>聊聊天，没有问专业课</li></ul></li></ul><hr /><hr /><hr /><h2 id="预推免"><a class="markdownIt-Anchor" href="#预推免"></a> 预推免</h2><h3 id="复旦"><a class="markdownIt-Anchor" href="#复旦"></a> 复旦</h3><p>机试：给3道题，2个小时的时间，自己做不用oj，然后做完把解题思路和代码提交就行了</p><p>感觉题都挺难的，数据规模也很大，我也刷了一段时间题，感觉难度有OI提高组级别吧，也可能是我tcl😢</p><p>英语：上来先自我介绍，然后让我介绍自己专业，学了什么。前面说的还行，后面几个问题也没准备，就说的磕磕绊绊。。。</p><p>面试：问得不是特别难，基本都答上来了。就是深度学习的一些基础知识还有数据结构的一些算法和复杂度，问得倒是很细，代码细节都问，但不难。</p><p>结果：候补第1。然后中午有老师打电话过来说那边夏令营会空出来几个名额，基本会候补到。</p><h3 id="西交"><a class="markdownIt-Anchor" href="#西交"></a> 西交</h3><p>面试和夏令营一样，没问什么专业课，感觉类似于聊天。</p><h3 id="哈工大"><a class="markdownIt-Anchor" href="#哈工大"></a> 哈工大</h3><p>报的是卓越工程师学院的人工智能，开始报名的很早，竞争相对没那么激烈。本来打算报本部和哈深的，后面给忘了😄</p><p>这个预推免体验不是很好，具体的就不多说了，反正各个环节安排的不是很合理，甚至面试的时候问题还没回答完，就被打断然后被要求退出会议了。</p><p>结果：第二天出结果了，通过了，要签承诺书什么的。</p><h3 id="北航ai-2"><a class="markdownIt-Anchor" href="#北航ai-2"></a> 北航ai</h3><p>最想去的学校，感觉夏令营优营也没什么优势。预推免还问的挺难的，比如问<em>广义的特征向量</em>，图形学里面的点云的什么公式之类的，感觉都很难😢😢😢😢</p><p>26日下午3点半收到拟录取邮件了</p><p>最后还是北航😄</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>感觉自己水平很一般，就是运气好了一点吧，希望别被buaa的大佬们碾压了。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
